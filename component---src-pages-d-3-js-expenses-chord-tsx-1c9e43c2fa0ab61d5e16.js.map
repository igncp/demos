{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./node_modules/uuid/dist/esm-browser/rng.js","webpack://demos/./node_modules/uuid/dist/esm-browser/regex.js","webpack://demos/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://demos/./node_modules/uuid/dist/esm-browser/validate.js","webpack://demos/./node_modules/uuid/dist/esm-browser/v1.js","webpack://demos/./src/demos/expenses-chord/expenses-chord-chart.ts","webpack://demos/./src/demos/expenses-chord/expenses-chord.module.css","webpack://demos/./src/demos/expenses-chord/expenses-chord-chart-data.ts","webpack://demos/./src/demos/expenses-chord/expenses-chord.ts","webpack://demos/./src/pages/d3js/expenses-chord.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","byteToHex","i","push","toString","substr","_nodeId","_clockseq","arr","offset","length","toLowerCase","TypeError","_lastMSecs","_lastNSecs","options","buf","b","Array","node","clockseq","seedBytes","random","msecs","Date","now","nsecs","dt","tl","tmh","n","DisplayType","RibbonType","chordGroup","groupText","height","durations","easingFn","easeCircle","zoomed","zoomEvent","select","transition","duration","attr","transform","renderChart","chartConfig","rootElId","chartState","lastFocused","chordGroupsIds","color","scaleOrdinal","schemeTableau10","width","document","getElementById","getBoundingClientRect","innerRadius","Math","min","outerRadius","ribbonCommon","r","radius","padAngle","ribbonArrow","ribbonArrowD3","ribbon","ribbonD3","zoomBehavior","zoom","extent","on","svg","append","call","textId","chord","chordDirected","sortSubgroups","descendingD3","sortChords","arcD3","endAngle","PI","startAngle","arc","ribbonContainer","groupContainer","renderItems","usedRibbon","getRibbonType","Common","matrix","getChordMatrix","chords","initialRibbonsData","selectAll","styles","data","reduce","acc","ribbonNode","source","index","target","fillRibbon","d","getRibbonGroupIdColor","ribbons","join","enter","attrTween","finalRibbon","initialRibbon","interpolateSource","interpolate","interpolateTarget","t","interpolated","update","getChordTitle","_e","el","chordGroupId","$","tooltip","track","getGroupText","getChordGroupTitle","initialGroupData","groups","ease","finalGroup","interpolateFn","text","latestRibbons","getDisplayTypeOnGroupClick","Source","d2","idx","initialGroup","exit","remove","ALL_ID","getAreas","countries","Object","keys","sort","regions","createChartConfig","state","names","concat","map","maybeCountry","includes","selectedCountry","maybeRegion","dataItem","selectedRegion","timeIndex","sourceIndex","targetIndex","sourceValue","Target","sourceGroupId","targetGroupId","Arrow","json","ROOT_PATH","slider","change","max","setupSelect","vals","id","onChange","selectEl","forEach","val","option","createElement","setAttribute","innerText","appendChild","addEventListener","newSelected","pageContext","links","main","scripts","className"],"mappings":"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","file":"component---src-pages-d-3-js-expenses-chord-tsx-1c9e43c2fa0ab61d5e16.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import {\n  Chord,\n  ChordGroup,\n  arc as arcD3,\n  chordDirected,\n  descending as descendingD3,\n  easeCircle,\n  interpolate,\n  ribbonArrow as ribbonArrowD3,\n  ribbon as ribbonD3,\n  scaleOrdinal,\n  schemeTableau10,\n  select,\n  zoom,\n} from \"d3\"\nimport { v1 as uuid } from \"uuid\"\n\nimport * as styles from \"./expenses-chord.module.css\"\n\nconst height = 800\n\nexport enum DisplayType {\n  Source = \"source\",\n  Target = \"target\",\n}\n\nexport enum RibbonType {\n  Arrow = \"arrow\",\n  Common = \"common\",\n}\n\ntype ChartState = {\n  lastFocused: string | null\n}\n\nconst durations = {\n  ribbonAnimation: 1000,\n  zoom: 500,\n} as const\n\nconst easingFn = easeCircle\n\nconst zoomed = function (this: Element, zoomEvent: any) {\n  select(this)\n    .transition()\n    .duration(durations.zoom)\n    .attr(\"transform\", zoomEvent.transform)\n}\n\nexport type ChartConfig = {\n  chordGroupsIds: string[]\n  getChordGroupTitle: (groupId: string) => string\n  getChordMatrix: () => number[][]\n  getChordTitle: (\n    sourceIndex: number,\n    targetIndex: number,\n    sourceValue: number,\n    targetValue: number\n  ) => string\n  getDisplayTypeOnGroupClick: (chordGroupId: string) => DisplayType\n  getRibbonGroupIdColor: (\n    sourceGroupId: string,\n    targetGroupId: string\n  ) => string\n  getRibbonType: () => RibbonType\n  rootElId: string\n}\n\nexport const renderChart = (chartConfig: ChartConfig) => {\n  const { rootElId } = chartConfig\n\n  const chartState: ChartState = {\n    lastFocused: null,\n  }\n\n  const { chordGroupsIds } = chartConfig\n\n  const color = scaleOrdinal(chordGroupsIds, schemeTableau10)\n\n  const { width } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n\n  const innerRadius = Math.min(width, height) * 0.5 - 20\n  const outerRadius = innerRadius + 20\n\n  const ribbonCommon = (r: any) =>\n    r.radius(innerRadius - 0.5).padAngle(1 / innerRadius)\n\n  const ribbonArrow = ribbonCommon(ribbonArrowD3())\n  const ribbon = ribbonCommon(ribbonD3())\n\n  const zoomBehavior = zoom()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const totalHeight = height + 50\n\n  const svg = select(`#${rootElId}`)\n    .attr(\"class\", styles.chartWrapper)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", totalHeight)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${width / 2}, ${totalHeight / 2})`)\n    .append(\"g\")\n    .call(zoomBehavior as any)\n    .on(\"dblclick.zoom\", null)\n\n  // this rect is to allow zooming\n  svg\n    .append(\"rect\")\n    .attr(\"fill\", \"#fff\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"transform\", `translate(-${width / 2}, -${totalHeight / 2})`)\n\n  const textId = uuid()\n\n  const chord = chordDirected()\n    .padAngle(12 / innerRadius)\n    .sortSubgroups(descendingD3)\n    .sortChords(descendingD3)\n\n  svg\n    .append(\"path\")\n    .attr(\"fill\", \"none\")\n    .attr(\"id\", textId)\n    .attr(\n      \"d\",\n      arcD3()({\n        endAngle: 2 * Math.PI,\n        innerRadius: 0,\n        outerRadius,\n        startAngle: 0,\n      }) as string\n    )\n\n  const arc = arcD3<d3.ChordGroup>()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius)\n\n  const ribbonContainer = svg.append(\"g\").attr(\"fill-opacity\", 0.75)\n  const groupContainer = svg\n    .append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", 10)\n\n  const renderItems = () => {\n    const usedRibbon =\n      chartConfig.getRibbonType() === RibbonType.Common ? ribbon : ribbonArrow\n\n    const matrix = chartConfig.getChordMatrix()\n    const chords = chord(matrix)\n\n    const initialRibbonsData = ribbonContainer\n      .selectAll<SVGPathElement, Chord>(`.${styles.ribbon}`)\n      .data()\n      .reduce((acc, ribbonNode) => {\n        acc[\n          `${ribbonNode.source.index}_${ribbonNode.target.index}`\n        ] = ribbonNode\n\n        return acc\n      }, {} as { [k: string]: Chord | undefined })\n\n    const fillRibbon = (d: Chord) =>\n      color(\n        chartConfig.getRibbonGroupIdColor(\n          chordGroupsIds[d.source.index],\n          chordGroupsIds[d.target.index]\n        )\n      )\n\n    const ribbons = ribbonContainer\n      .selectAll<SVGPathElement, Chord>(`.${styles.ribbon}`)\n      .data<Chord>(chords, (d) => `${d.source.index}_${d.target.index}`)\n      .join(\n        (enter) => {\n          const el = enter\n            .append(\"path\")\n            .attr(\"class\", styles.ribbon)\n            .attr(\"fill\", fillRibbon)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attrTween(\"d\", (finalRibbon) => {\n              const initialRibbon = {\n                source: {\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n                target: {\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n              }\n              const interpolateSource = interpolate(\n                initialRibbon.source,\n                finalRibbon.source\n              )\n              const interpolateTarget = interpolate(\n                initialRibbon.target,\n                finalRibbon.target\n              )\n\n              return (t) => {\n                const interpolated = {\n                  source: interpolateSource(t),\n                  target: interpolateTarget(t),\n                }\n\n                return usedRibbon(interpolated)\n              }\n            })\n\n          return el\n        },\n        (update) => {\n          update\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attr(\"fill\", fillRibbon)\n            .attrTween(\"d\", (finalRibbon) => {\n              const {\n                [`${finalRibbon.source.index}_${finalRibbon.target.index}`]: initialRibbon,\n              } = initialRibbonsData\n\n              if (!initialRibbon) {\n                return () => usedRibbon(finalRibbon)\n              }\n\n              const interpolateSource = interpolate(\n                initialRibbon.source,\n                finalRibbon.source\n              )\n              const interpolateTarget = interpolate(\n                initialRibbon.target,\n                finalRibbon.target\n              )\n\n              return (t) => {\n                const interpolated = {\n                  source: interpolateSource(t),\n                  target: interpolateTarget(t),\n                }\n\n                return usedRibbon(interpolated)\n              }\n            })\n\n          return update\n        }\n      )\n\n    ribbons\n      .attr(\"title\", (d) =>\n        chartConfig.getChordTitle(\n          d.source.index,\n          d.target.index,\n          d.source.value,\n          d.target.value\n        )\n      )\n      .on(\"click\", function (_e, d) {\n        const el = select(this)\n        const chordGroupId = `${chordGroupsIds[d.source.index]}_${\n          chordGroupsIds[d.target.index]\n        }`\n\n        if (chartState.lastFocused === chordGroupId) {\n          ribbons.attr(\"display\", \"block\")\n          chartState.lastFocused = null\n        } else {\n          ribbons.attr(\"display\", \"none\")\n          el.attr(\"display\", \"block\")\n          chartState.lastFocused = chordGroupId\n        }\n      })\n\n    $(`.${styles.ribbon}`).tooltip({\n      track: true,\n    })\n\n    const getGroupText = (d: ChordGroup) => {\n      if (d.endAngle - d.startAngle < 0.07) {\n        return \"\"\n      }\n\n      return chartConfig.getChordGroupTitle(chordGroupsIds[d.index])\n    }\n\n    const initialGroupData = groupContainer\n      .selectAll(`.${styles.chordGroup}`)\n      .data()\n\n    groupContainer\n      .selectAll<SVGGElement, ChordGroup>(`.${styles.chordGroup}`)\n      .data<ChordGroup>(chords.groups, (chordGroup) => chordGroup.index)\n      .join(\n        (enter) => {\n          const el = enter\n            .append(\"g\")\n            .attr(\"class\", styles.chordGroup)\n            .attr(\"title\", (d) =>\n              chartConfig.getChordGroupTitle(chordGroupsIds[d.index])\n            )\n\n          el.append(\"path\")\n            .attr(\"class\", \"group-path\")\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .ease(easingFn)\n            .attrTween(\"d\", (finalGroup) => {\n              const interpolateFn = interpolate<ChordGroup>(\n                {\n                  ...finalGroup,\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n                finalGroup\n              )\n\n              return (t) => arc(interpolateFn(t))!\n            })\n            .attr(\"fill\", (d) => color(chordGroupsIds[d.index]))\n            .attr(\"stroke\", \"#fff\")\n\n          el.append(\"text\")\n            .attr(\"dy\", -3)\n            .append(\"textPath\")\n            .attr(\"xlink:href\", `#${textId}`)\n            .attr(\"class\", styles.groupText)\n            .text(getGroupText)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .ease(easingFn)\n            .attr(\"startOffset\", (d) => d.startAngle * outerRadius)\n\n          el.on(\"click\", (_e, d) => {\n            const { [d.index]: chordGroupId } = chordGroupsIds\n            const latestRibbons = ribbonContainer.selectAll<\n              SVGPathElement,\n              Chord\n            >(`.${styles.ribbon}`)\n\n            if (chartState.lastFocused === chordGroupId) {\n              latestRibbons.attr(\"display\", () => \"block\")\n              chartState.lastFocused = null\n\n              return\n            }\n\n            chartState.lastFocused = chordGroupId\n\n            if (\n              chartConfig.getDisplayTypeOnGroupClick(chordGroupId) ===\n              DisplayType.Source\n            ) {\n              latestRibbons.attr(\"display\", (d2) =>\n                d2.source.index === d.index ? \"block\" : \"none\"\n              )\n\n              return\n            }\n\n            latestRibbons.attr(\"display\", (d2) =>\n              d2.target.index === d.index ? \"block\" : \"none\"\n            )\n          })\n\n          $(`.${styles.chordGroup}`).tooltip({\n            track: true,\n          })\n\n          return el\n        },\n        (update) => {\n          update\n            .select(\".group-path\")\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attrTween(\"d\", (finalGroup, idx) => {\n              const { [idx]: initialGroup } = initialGroupData\n              const interpolateFn = interpolate(initialGroup, finalGroup)\n\n              return (t) => arc(interpolateFn(t)) as string\n            })\n\n          update\n            .select(`.${styles.groupText}`)\n            .text(getGroupText)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attr(\"startOffset\", (d) => d.startAngle * outerRadius)\n\n          return update\n        },\n        (exit) => exit.remove()\n      )\n      .attr(\"class\", styles.chordGroup)\n  }\n\n  renderItems()\n\n  return {\n    renderItems,\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport var chartWrapper = \"expenses-chord-module--chartWrapper--1V-_7\";\nexport var chordGroup = \"expenses-chord-module--chordGroup--2xhSq\";\nexport var countriesSelect = \"expenses-chord-module--countriesSelect--bu3tz\";\nexport var groupText = \"expenses-chord-module--groupText--2wIqW\";\nexport var ribbon = \"expenses-chord-module--ribbon--28nns\";\nexport var sliderTime = \"expenses-chord-module--sliderTime--1AAv8\";","import { json } from \"d3\"\n\nimport { ChartConfig, DisplayType, RibbonType } from \"./expenses-chord-chart\"\n\nexport const ALL_ID = \"All\"\n\ntype State = {\n  selectedCountry: string\n  selectedRegion: string\n  timeIndex: number\n}\n\ntype DataItem = {\n  value: number | null\n  year: number\n}\n\ntype Data = {\n  [country: string]: {\n    [region: string]: DataItem[]\n  }\n}\n\nexport const createInitialState = (): State => ({\n  selectedCountry: ALL_ID,\n  selectedRegion: ALL_ID,\n  timeIndex: 0,\n})\n\nexport const getAreas = (data: Data) => {\n  const countries = Object.keys(data).sort()\n  const regions = Object.keys(data[countries[0]]).sort()\n\n  return { countries, regions }\n}\n\nexport const fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/expenses-chord/data.json`\n  ) as unknown) as Promise<Data>\n\nexport const createChartConfig = ({\n  countries,\n  data,\n  regions,\n  state,\n}: {\n  countries: string[]\n  data: Data\n  regions: string[]\n  state: State\n}): ChartConfig => {\n  const names = countries.concat(regions)\n\n  const getChordMatrix: ChartConfig[\"getChordMatrix\"] = () => {\n    const matrix = names.map((maybeCountry) => {\n      if (!data[maybeCountry] as unknown) {\n        return names.map(() => 0)\n      }\n\n      if (![ALL_ID, maybeCountry].includes(state.selectedCountry)) {\n        return names.map(() => 0)\n      }\n\n      return names.map((maybeRegion) => {\n        const {\n          [maybeCountry]: { [maybeRegion]: dataItem },\n        } = data\n\n        if (!dataItem as unknown) {\n          return 0\n        }\n\n        if (![ALL_ID, maybeRegion].includes(state.selectedRegion)) {\n          return 0\n        }\n\n        return dataItem[state.timeIndex].value\n      })\n    }) as number[][]\n\n    return matrix\n  }\n\n  // @TODO: confirm title\n  const getChordTitle: ChartConfig[\"getChordTitle\"] = (\n    sourceIndex,\n    targetIndex,\n    sourceValue\n  ) =>\n    `People from \"${names[sourceIndex]}\" spend into \"${names[targetIndex]}\": ${sourceValue}`\n\n  const getChordGroupTitle: ChartConfig[\"getChordGroupTitle\"] = (d) => d\n\n  const getRibbonGroupIdColor: ChartConfig[\"getRibbonGroupIdColor\"] = (\n    sourceGroupId,\n    targetGroupId\n  ) => (state.selectedRegion === ALL_ID ? targetGroupId : sourceGroupId)\n\n  const getDisplayTypeOnGroupClick: ChartConfig[\"getDisplayTypeOnGroupClick\"] = (\n    chordGroupId\n  ) =>\n    countries.includes(chordGroupId) ? DisplayType.Source : DisplayType.Target\n\n  const getRibbonType: ChartConfig[\"getRibbonType\"] = () =>\n    state.selectedCountry !== ALL_ID && state.selectedRegion !== ALL_ID\n      ? RibbonType.Common\n      : RibbonType.Arrow\n\n  return {\n    chordGroupsIds: names,\n    getChordGroupTitle,\n    getChordMatrix,\n    getChordTitle,\n    getDisplayTypeOnGroupClick,\n    getRibbonGroupIdColor,\n    getRibbonType,\n    rootElId: \"chart\",\n  }\n}\n","import { renderChart } from \"./expenses-chord-chart\"\nimport {\n  ALL_ID,\n  createChartConfig,\n  createInitialState,\n  fetchData,\n  getAreas,\n} from \"./expenses-chord-chart-data\"\n\nconst main = async () => {\n  const data = await fetchData()\n  const state = createInitialState()\n  const { countries, regions } = getAreas(data)\n  const chartConfig = createChartConfig({\n    countries,\n    data,\n    regions,\n    state,\n  })\n\n  const { renderItems } = renderChart(chartConfig)\n\n  $(\"#slider-time\").slider({\n    change: (_e, { value }) => {\n      if (value === 3) {\n        // @TODO: error in this case, find why\n        return\n      }\n\n      state.timeIndex = value!\n      renderItems()\n    },\n    max: data[countries[0]][regions[0]].length - 1,\n    min: 0,\n  })\n\n  const setupSelect = (\n    vals: string[],\n    id: string,\n    onChange: (v: string) => void\n  ) => {\n    const selectEl = document.getElementById(id) as HTMLSelectElement\n\n    ;[ALL_ID].concat(vals).forEach((val) => {\n      const option = document.createElement(\"option\")\n\n      option.setAttribute(\"value\", val)\n      option.innerText = val\n\n      selectEl.appendChild(option)\n    })\n\n    selectEl.addEventListener(\"change\", () => {\n      onChange(selectEl.value)\n    })\n  }\n\n  setupSelect(countries, \"countries-select\", (newSelected: string) => {\n    state.selectedCountry = newSelected\n    renderItems()\n  })\n  setupSelect(regions, \"regions-select\", (newSelected: string) => {\n    state.selectedRegion = newSelected\n    renderItems()\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/expenses-chord/expenses-chord\"\nimport * as styles from \"@/demos/expenses-chord/expenses-chord.module.css\"\n\nconst ExpensesChord = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div>Time Item:</div>\n    <div className={styles.sliderTime} id=\"slider-time\" />\n    <p>\n      <span>Countries:</span>\n      <select className={styles.countriesSelect} id=\"countries-select\" />\n      <span>Regions:</span>\n      <select id=\"regions-select\" />\n    </p>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default ExpensesChord\n"],"sourceRoot":""}