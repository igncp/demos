{"version":3,"file":"component---src-pages-d-3-js-icosahedron-tsx-ad93be4e0e9a22f4d81c.js","mappings":"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","sources":["webpack://demos/./src/demos/icosahedron/icosahedron.ts","webpack://demos/./src/demos/icosahedron/icosahedron.module.css","webpack://demos/./src/pages/d3js/icosahedron.tsx"],"sourcesContent":["import {\n  GeoProjection,\n  ScaleOrdinal,\n  Selection,\n  geoOrthographic,\n  polygonArea,\n  polygonHull,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n  timer,\n} from \"d3\"\n\nimport * as styles from \"./icosahedron.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype IcosahedronOpts = {\n  rootElId: string\n}\n\ntype Position = [number, number, number]\ntype Point2D = [number, number]\n\ntype Hull = Point2D[]\ntype Face = Hull\ntype Faces = Face[]\ntype FaceWithPolygon = Face & {\n  polygon: Hull\n}\n\ntype SvgSelection = Selection<\n  SVGSVGElement,\n  FaceWithPolygon,\n  HTMLElement,\n  unknown\n>\n\nclass Icosahedron {\n  private readonly rootElId: string\n\n  private config!: {\n    color: ScaleOrdinal<string, string>\n    defaultVelocity: number[]\n    height: number\n    rotationFactor1: number\n    rotationFactor2: number\n    t0: number\n    width: number\n    zeroVelocity: number[]\n  }\n\n  private dom!: {\n    faces: Selection<\n      SVGPathElement,\n      FaceWithPolygon,\n      SVGSVGElement,\n      unknown\n    > | null\n    projection: GeoProjection\n    svg: SvgSelection\n  }\n\n  private vars!: {\n    velocity: number[] | null\n  }\n\n  public constructor(opts: IcosahedronOpts) {\n    this.rootElId = opts.rootElId\n    this.setConfig()\n    this.setDom()\n    this.setVars()\n\n    const faces = this.dom.svg\n      .selectAll(\"path\")\n      .data(Icosahedron.getIcosahedronFaces() as FaceWithPolygon[])\n      .enter()\n      .append(\"path\")\n      .each((face) => {\n        face.polygon = polygonHull(\n          face.map(this.dom.projection) as Faces[0]\n        ) as Hull\n      })\n      .style(\"fill\", (...[, faceIndex]: [unknown, number]) =>\n        this.config.color(faceIndex.toString())\n      )\n\n    this.dom.faces = faces\n    this.vars.velocity = this.config.defaultVelocity\n  }\n\n  private static getIcosahedronFaces(): Faces {\n    const faces: Faces = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces\n  }\n\n  public start() {\n    timer(() => this.timer())\n  }\n\n  private setConfig() {\n    const color = scaleOrdinal(schemePastel2)\n\n    this.config = {\n      color,\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      width: (\n        document.getElementById(this.rootElId) as HTMLElement\n      ).getBoundingClientRect().width,\n      zeroVelocity: [0, 0, 0],\n    }\n  }\n\n  private setDom() {\n    const rootEl = document.getElementById(this.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.icosahedronChart)\n\n    const projection = geoOrthographic().scale(this.config.height / 2 - 10)\n    const svg = select(`#${this.rootElId}`)\n      .append(\"svg\")\n      .attr(\"width\", this.config.width)\n      .attr(\"height\", this.config.height)\n      .on(\"click\", () => {\n        this.vars.velocity =\n          this.vars.velocity?.toString() === this.config.zeroVelocity.toString()\n            ? this.config.defaultVelocity\n            : this.config.zeroVelocity\n      }) as SvgSelection\n\n    this.dom = {\n      faces: null,\n      projection,\n      svg,\n    }\n  }\n\n  private setVars() {\n    this.vars = {\n      velocity: null,\n    }\n  }\n\n  private calcNewPosition({\n    position,\n    time,\n  }: {\n    position: Position\n    time: number\n  }): Position {\n    const {\n      vars: { velocity },\n    } = this\n\n    return [\n      velocity![0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity![1] + position[1],\n      position[2] + velocity![2],\n    ]\n  }\n\n  private timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(\n      this.calcNewPosition({ position: originalPos, time })\n    )\n    this.dom\n      .faces!.each((face) => {\n        face.forEach((...[point, pointIndex]: [Point2D, number]) => {\n          face.polygon[pointIndex] = this.dom.projection(point) as Point2D\n\n          return null\n        })\n      })\n      .style(\"display\", (face) => {\n        const area = polygonArea(face.polygon)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (face) => `M${face.polygon.join(\"L\")}Z`)\n\n    return null\n  }\n}\n\nconst main = () => {\n  const chart = new Icosahedron({\n    rootElId: CONTAINER_ID,\n  })\n\n  chart.start()\n\n  return Promise.resolve()\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var icosahedronChart = \"icosahedron-module--icosahedronChart--UzLaM\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/icosahedron/icosahedron\"\n\nconst Icosahedron = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/d3/d3.min.js\"]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Icosahedron\n"],"names":["CONTAINER_ID","Icosahedron","opts","this","rootElId","setConfig","setDom","setVars","faces","dom","svg","selectAll","data","getIcosahedronFaces","enter","append","each","face","polygon","polygonHull","map","projection","style","faceIndex","config","color","toString","vars","velocity","defaultVelocity","y","Math","atan2","PI","x","push","start","timer","scaleOrdinal","schemePastel2","height","rotationFactor1","rotationFactor2","t0","Date","now","width","document","getElementById","getBoundingClientRect","zeroVelocity","classList","add","geoOrthographic","scale","select","attr","on","calcNewPosition","position","time","abs","sin","originalPos","rotate","forEach","point","pointIndex","polygonArea","join","Promise","resolve","pageContext","main","scripts","id"],"sourceRoot":""}