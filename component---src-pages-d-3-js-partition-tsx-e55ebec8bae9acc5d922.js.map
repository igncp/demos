{"version":3,"file":"component---src-pages-d-3-js-partition-tsx-e55ebec8bae9acc5d922.js","mappings":"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","sources":["webpack://demos/./src/demos/partition/partition-chart.ts","webpack://demos/./src/demos/partition/partition-chart-config.ts","webpack://demos/./src/demos/partition/partition.ts","webpack://demos/./src/pages/d3js/partition.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import {\n  D3DragEvent,\n  HierarchyRectangularNode,\n  Selection,\n  arc as arcD3,\n  drag as dragD3,\n  easeBounce,\n  easeLinear,\n  hierarchy,\n  interpolate,\n  partition as partitionD3,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n} from \"d3\"\n\ntype Node<NodeData> = NodeData & {\n  chidren: Array<Node<NodeData>>\n}\n\ntype HierarchyRectNode<ChartData> = HierarchyRectangularNode<Node<ChartData>>\n\nenum PartitionType {\n  Count = \"count\",\n  Size = \"size\",\n}\n\nconst height = 700\nconst overColor = \"#de7c03\"\nconst transitionDuration = 2000\nconst easeFn = easeBounce\n\nconst extractTweenObj = <ChartData>(node: HierarchyRectNode<ChartData>) => ({\n  depth: node.depth,\n  x0: node.x0,\n  x1: node.x1,\n  y0: node.y0,\n  y1: node.y1,\n})\n\nconst getInterpolatorFn =\n  <ChartData>({\n    fn,\n    initialData,\n  }: {\n    fn: (node: HierarchyRectNode<ChartData>) => string | null\n    initialData: Array<HierarchyRectNode<ChartData>>\n  }) =>\n  (...[finalNode, nodeIndex]: [HierarchyRectNode<ChartData>, number]) => {\n    const { [nodeIndex]: initialNode } = initialData\n\n    const interpolateFn = interpolate(\n      extractTweenObj(initialNode),\n      extractTweenObj(finalNode)\n    )\n\n    return (t: number) => {\n      const transitientState = interpolateFn(t)\n\n      return fn(transitientState as HierarchyRectNode<ChartData>)!\n    }\n  }\n\ntype ChartConfig<ChartData> = {\n  getNodeLabel: (node: Node<ChartData>) => string\n  getNodeSize: (node: Node<ChartData>) => number | undefined\n  getNodeTitle: (options: {\n    nodeData: Node<ChartData>\n    valueNum?: number\n  }) => string\n  partitionType: PartitionType\n  rootData: Node<ChartData>\n  rootElId: string\n}\n\ntype ChartElements = {\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgDrag: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}\n\nclass PartitionChart<ChartData> {\n  private readonly config: ChartConfig<ChartData>\n  private readonly elements: ChartElements\n\n  private readonly state: {\n    descendants: Array<HierarchyRectangularNode<Node<ChartData>>>\n    drag: { x: number; y: number }\n    partitionType: PartitionType\n  }\n\n  public constructor(config: ChartConfig<ChartData>) {\n    this.config = config\n\n    const { partitionType, rootElId } = config\n\n    const svg = select(`#${rootElId}`).append(\"svg\").text(\"\")\n    const svgDrag = svg.append(\"g\")\n    const svgG = svgDrag.append(\"g\")\n\n    this.state = {\n      descendants: [],\n      drag: { x: 0, y: 0 },\n      partitionType,\n    }\n\n    this.state.descendants = this.getDataHierarchy()\n\n    this.elements = {\n      svg,\n      svgDrag,\n      svgG,\n    }\n\n    this.setupDrag()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public updatePartition(newPartitionType: PartitionType) {\n    this.state.partitionType = newPartitionType\n\n    const newDescendants = this.getDataHierarchy()\n\n    this.state.descendants = newDescendants\n\n    this.renderDescendants()\n  }\n\n  public render() {\n    const { width } = this.getDimensions()\n    const {\n      elements: { svg, svgG },\n    } = this\n\n    svg.attr(\"width\", width).attr(\"height\", height)\n    svgG.attr(\"transform\", `translate(${width / 2},${height * 0.52})`)\n\n    this.renderDescendants()\n  }\n\n  private getDimensions() {\n    const {\n      config: { rootElId },\n    } = this\n    const { width } = (\n      document.getElementById(rootElId) as HTMLElement\n    ).getBoundingClientRect()\n    const chartWidth = Math.max(width, 700)\n    const radius = Math.min(chartWidth, height) / 2\n\n    return {\n      chartWidth,\n      radius,\n      width,\n    }\n  }\n\n  private getDataHierarchy() {\n    const {\n      config: { getNodeSize, rootData },\n      state: { partitionType },\n    } = this\n    const { radius } = this.getDimensions()\n    const dataHierarchySize = hierarchy(rootData).sum(\n      (node: Node<ChartData>) => getNodeSize(node) ?? 0\n    )\n    const dataHierarchyCount = hierarchy(rootData).sum(() => 1)\n    const partition = partitionD3<Node<ChartData>>().size([2 * Math.PI, radius])\n\n    const hierarchyResult = partition(\n      partitionType === \"size\" ? dataHierarchySize : dataHierarchyCount\n    )\n\n    return hierarchyResult.descendants()\n  }\n\n  private setupDrag() {\n    const {\n      elements: { svg, svgDrag },\n    } = this\n\n    const handler = (\n      dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>\n    ) => {\n      this.state.drag.x += dragEvent.dx\n      this.state.drag.y += dragEvent.dy\n\n      svgDrag.attr(\n        \"transform\",\n        `translate(${this.state.drag.x},${this.state.drag.y})`\n      )\n    }\n\n    const dragBehavior = dragD3<SVGSVGElement, unknown>().on(\"drag\", handler)\n\n    svg\n      .style(\"cursor\", \"move\")\n      .call(dragBehavior)\n      .on(\"drag\", handler)\n      .on(\"wheel\", null)\n  }\n\n  private renderDescendants() {\n    const {\n      config: { getNodeLabel, getNodeTitle },\n      elements: { svgG },\n      state: { descendants: usedDescendants },\n    } = this\n\n    const colorScale = scaleOrdinal(schemePastel2)\n\n    const color = (node: HierarchyRectNode<ChartData>) =>\n      node.children\n        ? colorScale(getNodeLabel(node.data))\n        : colorScale(getNodeLabel(node.parent!.data))\n\n    const arc = arcD3<HierarchyRectNode<ChartData>>()\n      .startAngle((node) => node.x0)\n      .endAngle((node) => node.x1)\n      .innerRadius((node) => node.y0)\n      .outerRadius((node) => node.y1)\n      .padAngle(0.01)\n\n    const textsTransform = (node: HierarchyRectNode<ChartData>) => {\n      if (!node.depth) {\n        return \"\"\n      }\n\n      const centroid = arc.centroid({\n        ...node,\n        x0: node.x0 + (node.x0 > Math.PI ? -1 : 1) * 0.05,\n      })\n      const rotationDeg = (() => {\n        const rotation =\n          90 + ((node.x0 + (node.x1 - node.x0) / 2) * 180) / Math.PI\n\n        return rotation > 90 && rotation < 270 ? rotation - 180 : rotation\n      })()\n\n      return [\n        `rotate(${rotationDeg},${centroid[0]},${centroid[1]})`,\n        `translate(${centroid[0]},${centroid[1]})`,\n      ].join(\" \")\n    }\n\n    const pathSel = svgG.selectAll<\n      SVGPathElement,\n      HierarchyRectNode<ChartData>\n    >(\"path\")\n    const pathInitialData = pathSel.data()\n    const path = pathSel.data(usedDescendants)\n\n    path.exit().remove()\n\n    const pathEnter = path\n      .enter()\n      .append(\"path\")\n      .attr(\"display\", (node) => (node.depth ? null : \"none\"))\n      .attr(\"data-index\", (...[, nodeIndex]) => nodeIndex)\n      .style(\"stroke\", \"#000\")\n      .style(\"stroke-width\", \"0.5px\")\n      .style(\"stroke-dasharray\", \"1,3\")\n      .style(\"fill\", color)\n      .attr(\"d\", arc)\n\n    path\n      .transition()\n      .duration(transitionDuration)\n      .ease(easeFn)\n      .attrTween(\n        \"d\",\n        getInterpolatorFn({ fn: arc, initialData: pathInitialData })\n      )\n\n    const initialTextsSel = svgG.selectAll<\n      SVGTextElement,\n      HierarchyRectNode<ChartData>\n    >(\"text\")\n    const textsInitialData = initialTextsSel.data()\n    const initialTexts = initialTextsSel.data(usedDescendants)\n\n    initialTexts.exit().remove()\n\n    const opacityFn = (node: HierarchyRectangularNode<Node<ChartData>>) => {\n      const arcLength = Math.abs(node.x0 - node.x1) * node.y1\n\n      // this number is obtained empirically\n      if (arcLength < 25) {\n        return 0\n      }\n\n      const isAlmostVertical = Math.abs((node.x0 + node.x1) / 2 - Math.PI) < 0.2\n\n      return isAlmostVertical ? 0 : 1\n    }\n\n    const textsEnter = initialTexts\n      .enter()\n      .append(\"text\")\n      .style(\"fill\", \"#333\")\n      .style(\"cursor\", \"default\")\n      .style(\"font\", \"bold 12px Arial\")\n      .attr(\"text-anchor\", \"middle\")\n      .text((...[node, nodeIndex]) => {\n        if (nodeIndex === 0) {\n          return \"\"\n        }\n\n        const label = getNodeLabel(node.data)\n        const limit = 9\n\n        return label.length > limit ? `${label.slice(0, limit)}...` : label\n      })\n      .attr(\"data-index\", (...[, nodeIndex]) => nodeIndex)\n      .attr(\"transform\", textsTransform)\n      .style(\"opacity\", opacityFn)\n\n    initialTexts\n      .transition(\"movement\")\n      .duration(transitionDuration)\n      .ease(easeFn)\n      .attrTween(\n        \"transform\",\n        getInterpolatorFn({\n          fn: textsTransform,\n          initialData: textsInitialData,\n        })\n      )\n\n    svgG\n      .selectAll<SVGTextElement, HierarchyRectNode<ChartData>>(\"text\")\n      .transition(\"opacity\")\n      .duration(transitionDuration)\n      .ease(easeLinear)\n      .style(\"opacity\", opacityFn)\n\n    const updatedGroups = [pathEnter, textsEnter]\n\n    updatedGroups.forEach((set) => {\n      set.on(\"mouseover\", function onMouseOver() {\n        const nodeIndex = select(this).attr(\"data-index\")\n\n        select(`path[data-index=\"${nodeIndex}\"]`).style(\"fill\", overColor)\n        select(`text[data-index=\"${nodeIndex}\"]`).style(\"fill\", \"white\")\n      })\n\n      set.on(\"mouseout\", function onMouseOut() {\n        const nodeIndex = select(this).attr(\"data-index\")\n\n        select<SVGPathElement, HierarchyRectNode<ChartData>>(\n          `path[data-index=\"${nodeIndex}\"]`\n        ).style(\"fill\", color)\n        select(`text[data-index=\"${nodeIndex}\"]`).style(\"fill\", \"#000\")\n      })\n\n      set.append(\"title\").text((node) =>\n        getNodeTitle({\n          nodeData: node.data,\n          valueNum: node.value,\n        })\n      )\n    })\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nexport { PartitionChart, PartitionType, Node, ChartConfig }\n","import { json } from \"d3\"\n\nimport { ChartConfig, Node, PartitionType } from \"./partition-chart\"\n\nconst CONTAINER_ID = \"chart\"\nconst TYPE_FORM = \"type-form\"\n\ntype DataNode = Node<{\n  name: string\n  size?: number\n}>\n\nconst fetchData = () =>\n  json(\n    `${ROOT_PATH}data/d3js/partition/flare.json`\n  ) as unknown as Promise<DataNode>\n\ntype Config = ChartConfig<DataNode>\n\nconst getNodeSize: Config[\"getNodeSize\"] = (node) => node.size\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeTitle: Config[\"getNodeTitle\"] = ({ nodeData, valueNum }) =>\n  `${nodeData.name}\\n${valueNum}`\n\nconst getChartConfig = ({\n  partitionType,\n  rootData,\n}: {\n  partitionType: PartitionType\n  rootData: DataNode\n}) => ({\n  getNodeLabel,\n  getNodeSize,\n  getNodeTitle,\n  partitionType,\n  rootData,\n  rootElId: CONTAINER_ID,\n})\n\nexport { CONTAINER_ID, TYPE_FORM, fetchData, getChartConfig, PartitionType }\n","import { PartitionChart } from \"./partition-chart\"\nimport {\n  CONTAINER_ID,\n  PartitionType,\n  TYPE_FORM,\n  fetchData,\n  getChartConfig,\n} from \"./partition-chart-config\"\n\nconst main = async () => {\n  const rootData = await fetchData()\n\n  const formEl = document.getElementById(TYPE_FORM) as HTMLFormElement\n\n  const getCurrentSelectedRadio = (): PartitionType => {\n    const selectedRadio = Array.from(\n      formEl.elements as unknown as HTMLInputElement[]\n    ).find((formElement: HTMLInputElement) => formElement.checked)\n\n    return selectedRadio!.value as PartitionType\n  }\n\n  const partitionType = getCurrentSelectedRadio()\n\n  const chartConfig = getChartConfig({\n    partitionType,\n    rootData,\n  })\n\n  const chart = new PartitionChart(chartConfig)\n\n  chart.render()\n\n  formEl.addEventListener(\"change\", () => {\n    const newPartitionType = getCurrentSelectedRadio()\n\n    chart.updatePartition(newPartitionType)\n  })\n}\n\nexport { CONTAINER_ID, TYPE_FORM }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID, TYPE_FORM } from \"@/demos/partition/partition\"\n\nconst Partition = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form id={TYPE_FORM} style={{ marginBottom: 20 }}>\n      <label>\n        <input name=\"mode\" type=\"radio\" value=\"size\" /> Size\n      </label>\n      <label>\n        <input defaultChecked name=\"mode\" type=\"radio\" value=\"count\" /> Count\n      </label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Partition\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["PartitionType","transitionDuration","easeFn","easeBounce","extractTweenObj","node","depth","x0","x1","y0","y1","getInterpolatorFn","fn","initialData","finalNode","nodeIndex","initialNode","interpolateFn","interpolate","t","transitientState","PartitionChart","config","handleResize","render","this","partitionType","rootElId","svg","select","append","text","svgDrag","svgG","state","descendants","drag","x","y","getDataHierarchy","elements","setupDrag","window","addEventListener","updatePartition","newPartitionType","newDescendants","renderDescendants","width","getDimensions","attr","document","getElementById","getBoundingClientRect","chartWidth","Math","max","radius","min","getNodeSize","rootData","dataHierarchySize","hierarchy","sum","dataHierarchyCount","partitionD3","size","PI","partition","handler","dragEvent","dx","dy","dragBehavior","dragD3","on","style","call","getNodeLabel","getNodeTitle","usedDescendants","colorScale","scaleOrdinal","schemePastel2","color","children","data","parent","arc","arcD3","startAngle","endAngle","innerRadius","outerRadius","padAngle","textsTransform","rotation","centroid","join","pathSel","selectAll","pathInitialData","path","exit","remove","pathEnter","enter","transition","duration","ease","attrTween","initialTextsSel","textsInitialData","initialTexts","opacityFn","abs","textsEnter","label","limit","length","slice","easeLinear","forEach","set","nodeData","valueNum","value","CONTAINER_ID","TYPE_FORM","name","getChartConfig","main","json","ROOT_PATH","formEl","getCurrentSelectedRadio","Array","from","find","formElement","checked","chartConfig","chart","pageContext","id","marginBottom","type","defaultChecked","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","self","args","arguments","apply","err","undefined"],"sourceRoot":""}