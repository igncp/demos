{"version":3,"file":"component---src-pages-d-3-js-partition-tsx-5b6486ebeedf7f645c4e.js","mappings":"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","sources":["webpack://demos/./node_modules/uuid/dist/esm-browser/rng.js","webpack://demos/./node_modules/uuid/dist/esm-browser/regex.js","webpack://demos/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://demos/./node_modules/uuid/dist/esm-browser/validate.js","webpack://demos/./node_modules/uuid/dist/esm-browser/v1.js","webpack://demos/./src/demos/partition/ui-constants.ts","webpack://demos/./src/demos/partition/chart/chart-drag.ts","webpack://demos/./src/demos/partition/chart/partition-data.ts","webpack://demos/./src/demos/partition/chart/partition-chart.ts","webpack://demos/./src/demos/partition/partition-controls.ts","webpack://demos/./src/demos/partition/partition-chart-config.ts","webpack://demos/./src/demos/partition/partition.ts","webpack://demos/./src/demos/partition/partition-page.module.css","webpack://demos/./src/pages/d3js/partition.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","const CONTAINER_ID = \"chart\"\nconst TYPE_FORM = \"type-form\"\nconst COLOR_METHOD = \"color-method\"\nconst ATTR_DATA_ID = \"data-id\"\nconst TRANSITION_DURATION = 2000\n\nexport {\n  ATTR_DATA_ID,\n  COLOR_METHOD,\n  CONTAINER_ID,\n  TRANSITION_DURATION,\n  TYPE_FORM,\n}\n","import { D3DragEvent, Selection, drag as dragD3 } from \"d3\"\n\ntype Elements<ContainerEl extends SVGElement, SurfaceEl extends SVGElement> = {\n  container: Selection<ContainerEl, unknown, HTMLElement, unknown>\n  dragSurface: Selection<SurfaceEl, unknown, HTMLElement, unknown>\n}\n\nclass DragModule<ContainerEl extends SVGElement, SurfaceEl extends SVGElement> {\n  private readonly elements: Elements<ContainerEl, SurfaceEl>\n\n  private readonly state: {\n    x: number\n    y: number\n  }\n\n  public constructor(elements: Elements<ContainerEl, SurfaceEl>) {\n    this.state = {\n      x: 0,\n      y: 0,\n    }\n\n    this.elements = elements\n\n    this.setupDrag()\n  }\n\n  private setupDrag() {\n    const {\n      elements: { container, dragSurface },\n    } = this\n\n    const handler = (\n      dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>\n    ) => {\n      this.state.x += dragEvent.dx\n      this.state.y += dragEvent.dy\n\n      dragSurface.attr(\n        \"transform\",\n        `translate(${this.state.x},${this.state.y})`\n      )\n    }\n\n    const dragBehavior = dragD3<ContainerEl, unknown>().on(\"drag\", handler)\n\n    container\n      .style(\"cursor\", \"move\")\n      .call(dragBehavior)\n      .on(\"drag\", handler)\n      .on(\"wheel\", null)\n  }\n}\n\nexport { DragModule }\n","import {\n  HierarchyRectangularNode,\n  hierarchy,\n  interpolate,\n  partition as partitionD3,\n} from \"d3\"\n\ntype Node<NodeData> = NodeData & {\n  children?: Array<Node<NodeData>>\n}\n\ntype HierarchyNode<ChartData> = HierarchyRectangularNode<Node<ChartData>>\n\nconst extractTweenObj = <ChartData>(node?: HierarchyNode<ChartData>) => ({\n  depth: node?.depth ?? 0,\n  x0: node?.x0 ?? 0,\n  x1: node?.x1 ?? 0,\n  y0: node?.y0 ?? 0,\n  y1: node?.y1 ?? 0,\n})\n\ntype PartitionDataConfig<ChartData> = {\n  getHierarchySum: (node: Node<ChartData>) => number\n  getMaxRadius: () => number\n  getNodeId: (node: Node<ChartData>) => number\n  rootData: Node<ChartData>\n}\n\nconst createDescendants = <ChartData>({\n  getHierarchySum,\n  radius,\n  rootNode,\n}: {\n  getHierarchySum: PartitionDataConfig<ChartData>[\"getHierarchySum\"]\n  radius: number\n  rootNode: Node<ChartData>\n}) => {\n  const circularPartition = partitionD3<Node<ChartData>>().size([\n    2 * Math.PI,\n    radius,\n  ])\n  const newHierarchy = hierarchy(rootNode).sum(getHierarchySum)\n  const hierarchyResult = circularPartition(newHierarchy)\n\n  return hierarchyResult.descendants()\n}\n\nconst getInterpolatorFn =\n  <ChartData>({\n    fn,\n    getNodeId,\n    initialData,\n    isText,\n  }: {\n    fn: (node: HierarchyNode<ChartData>) => string | null\n    getNodeId: PartitionDataConfig<ChartData>[\"getNodeId\"]\n    initialData: Array<HierarchyNode<ChartData> | undefined>\n    isText: boolean\n  }) =>\n  (finalNode: HierarchyNode<ChartData>) => {\n    const initialNode = initialData.find(\n      (node) => node && getNodeId(node.data) === getNodeId(finalNode.data)\n    )\n\n    const finalTween = extractTweenObj(finalNode)\n    const initialTween = extractTweenObj(initialNode)\n\n    const initialTweenUpdated = (() => {\n      if (finalTween.x0 === finalTween.x1) {\n        return finalTween\n      }\n\n      if (isText && finalNode.depth === 0) {\n        return finalTween\n      }\n\n      return {\n        ...initialTween,\n        y0: finalTween.y0,\n        y1: finalTween.y1,\n      }\n    })()\n\n    const interpolateFn = interpolate(initialTweenUpdated, finalTween)\n\n    return (t: number) => {\n      const transitientState = interpolateFn(t)\n\n      return fn(transitientState as HierarchyNode<ChartData>)!\n    }\n  }\n\nclass PartitionData<ChartData> {\n  private readonly config: PartitionDataConfig<ChartData>\n\n  private readonly state: {\n    descendants: Array<HierarchyNode<ChartData>>\n    focusedPath: number[]\n  }\n\n  public constructor(config: PartitionDataConfig<ChartData>) {\n    this.config = config\n\n    this.state = {\n      descendants: [],\n      focusedPath: [],\n    }\n\n    this.state.descendants = this.getDataHierarchy()\n  }\n\n  public setDescendants() {\n    this.state.descendants = this.getDataHierarchy()\n  }\n\n  public getDescendants() {\n    return this.state.descendants\n  }\n\n  public getDataHierarchy() {\n    const {\n      config: { getHierarchySum, getNodeId, rootData },\n      state: { focusedPath },\n    } = this\n    const maxRadius = this.config.getMaxRadius()\n\n    const getMaxDepthRecursive = (node: Node<ChartData>): number => {\n      const { children } = node\n\n      if (!children) {\n        return 0\n      }\n\n      return (\n        Math.max(...children.map((child) => getMaxDepthRecursive(child))) + 1\n      )\n    }\n\n    const cloneRecursive = ({\n      level,\n      node,\n    }: {\n      level: number\n      node: Node<ChartData>\n    }): Node<ChartData> => {\n      const { [level]: pathId } = focusedPath\n      const isValidPathId = typeof pathId === \"number\"\n\n      const childrenObj = {\n        ...(\"children\" in node && {\n          children: node\n            .children!.filter(\n              (child) => !isValidPathId || getNodeId(child) === pathId\n            )\n            .map((child) =>\n              cloneRecursive({\n                level: level + 1,\n                node: child,\n              })\n            ),\n        }),\n      }\n\n      return {\n        ...node,\n        ...childrenObj,\n      }\n    }\n\n    const newNode = cloneRecursive({\n      level: 0,\n      node: rootData,\n    })\n\n    const maxDepthTotal = getMaxDepthRecursive(rootData)\n    const maxDepthFiltered = getMaxDepthRecursive(newNode)\n    const radiusOfLevel = maxRadius / maxDepthTotal\n\n    return createDescendants({\n      getHierarchySum,\n      radius: radiusOfLevel * maxDepthFiltered,\n      rootNode: newNode,\n    })\n  }\n\n  public setFocusedPathFromNode(rootNode: HierarchyNode<ChartData>) {\n    const {\n      config: { getNodeId },\n    } = this\n\n    const getFocusedPath = (node: HierarchyNode<ChartData>): number[] => {\n      if (!node.parent) {\n        return []\n      }\n\n      return getFocusedPath(node.parent).concat([getNodeId(node.data)])\n    }\n\n    this.state.focusedPath = getFocusedPath(rootNode)\n  }\n\n  public getFocusedPathRef() {\n    return this.state.focusedPath\n  }\n\n  public setFocusedPath(newFocusedPath: number[]) {\n    this.state.focusedPath = newFocusedPath\n  }\n}\n\nconst zTestCreateDescendants =\n  process.env.NODE_ENV === \"test\" ? createDescendants : null\n\nexport type { Node }\n\nexport {\n  HierarchyNode,\n  PartitionData,\n  PartitionDataConfig,\n  extractTweenObj,\n  getInterpolatorFn,\n  zTestCreateDescendants,\n}\n","import {\n  Arc,\n  ScaleOrdinal,\n  Selection,\n  arc as arcD3,\n  easeExpInOut,\n  interpolate,\n  scaleOrdinal,\n  schemePastel1,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport $ from \"jquery\"\nimport \"jquery-ui/themes/base/all.css\"\nimport { v1 as uuid } from \"uuid\"\n\nimport { ATTR_DATA_ID, TRANSITION_DURATION } from \"../ui-constants\"\n\nimport { DragModule } from \"./chart-drag\"\nimport {\n  HierarchyNode,\n  Node,\n  PartitionData,\n  PartitionDataConfig,\n  extractTweenObj,\n  getInterpolatorFn,\n} from \"./partition-data\"\n\nif (typeof window !== \"undefined\") {\n  require(\"jquery-ui/ui/widgets/tooltip\")\n}\n\nconst colorHover = \"#de7c03\"\nconst colorDefaultStroke = \"#000\"\nconst colorFillSelected = \"#f6ddf2\"\n\nconst easeFn = easeExpInOut\nconst height = 700\n\nconst isTouchDevice = () =>\n  \"ontouchstart\" in window || navigator.maxTouchPoints > 0\n\n// With this correction the text looks more aligned\nconst getX0CentroidCorrection = (x0: number) =>\n  x0 + (x0 > Math.PI ? -1 : 1) * 0.05\n\nconst getTextsTransform =\n  <ChartData>(arc: Arc<unknown, HierarchyNode<ChartData>>) =>\n  (node: HierarchyNode<ChartData>) => {\n    if (!node.depth) {\n      return \"\"\n    }\n\n    const centroid = arc.centroid({\n      ...node,\n      x0: getX0CentroidCorrection(node.x0),\n    })\n    const rotationDeg = (() => {\n      if (node.x0 <= Math.PI / 2 && node.x1 >= (Math.PI * 3) / 2) {\n        return 0\n      }\n\n      const rotation =\n        90 + ((node.x0 + (node.x1 - node.x0) / 2) * 180) / Math.PI\n\n      return rotation > 90 && rotation < 270 ? rotation - 180 : rotation\n    })()\n\n    return [\n      `rotate(${rotationDeg},${centroid[0]},${centroid[1]})`,\n      `translate(${centroid[0]},${centroid[1]})`,\n    ].join(\" \")\n  }\n\nconst getTextsOpacity = <ChartData>(node: HierarchyNode<ChartData>) => {\n  const arcLength = Math.abs(node.x0 - node.x1) * node.y1\n\n  // This number is obtained empirically to check small angles\n  if (arcLength < 25) {\n    return 0\n  }\n\n  if (node.x0 <= Math.PI / 2 && node.x1 >= (Math.PI * 3) / 2) {\n    return 1\n  }\n\n  const isAlmostVertical = Math.abs((node.x0 + node.x1) / 2 - Math.PI) < 0.2\n\n  return isAlmostVertical && node.depth !== 0 ? 0 : 1\n}\n\nconst getArc = <ChartData>() =>\n  arcD3<HierarchyNode<ChartData>>()\n    .startAngle((node) => node.x0)\n    .endAngle((node) => node.x1)\n    .innerRadius((node) => node.y0)\n    .outerRadius((node) => node.y1)\n    .padAngle(0.01)\n\nfunction moveToBottom<SVGType extends SVGElement>(this: SVGType) {\n  const selection = select(this)\n  const node = selection.node()!\n\n  node.parentNode!.prepend(node)\n}\n\ntype ChartConfig<ChartData> = Omit<\n  PartitionDataConfig<ChartData>,\n  \"getMaxRadius\"\n> & {\n  getColorOptions: (opts: {\n    depths: number[]\n    nodes: Array<Node<ChartData>>\n  }) => number[]\n  getNodeColorOption: (opts: { depth: number; node: Node<ChartData> }) => number\n  getNodeLabel: (node: Node<ChartData>) => string\n  getNodeTitle: (options: {\n    nodeData: Node<ChartData>\n    valueNum?: number\n  }) => string\n  rootElId: string\n}\n\ntype ChartElements = {\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgDrag: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}\n\nclass PartitionChart<ChartData> {\n  private readonly config: ChartConfig<ChartData>\n  private readonly elements: ChartElements\n  private readonly colorScale: ScaleOrdinal<number, string>\n  private readonly dataModule: PartitionData<ChartData>\n  private readonly selectors: {\n    path: string\n    text: string\n  }\n\n  private readonly state: {\n    drag: { x: number; y: number }\n    isClearingSelection: boolean\n  }\n\n  public constructor(config: ChartConfig<ChartData>) {\n    this.config = config\n\n    const { getHierarchySum, getNodeId, rootData } = config\n\n    this.dataModule = new PartitionData({\n      getHierarchySum,\n      getMaxRadius: () => this.getDimensions().radius,\n      getNodeId,\n      rootData,\n    })\n\n    const { rootElId } = config\n\n    const svg = select(`#${rootElId}`).append(\"svg\")\n    const svgDrag = svg.append(\"g\")\n    const svgG = svgDrag.append(\"g\")\n\n    new DragModule({\n      container: svg,\n      dragSurface: svgDrag,\n    })\n\n    this.state = {\n      drag: { x: 0, y: 0 },\n      isClearingSelection: false,\n    }\n\n    this.selectors = {\n      path: `path-${uuid().slice(0, 6)}`,\n      text: `text-${uuid().slice(0, 6)}`,\n    }\n\n    this.dataModule.setDescendants()\n\n    this.colorScale = scaleOrdinal<number, string>(\n      schemePastel1.concat(schemePastel2)\n    )\n\n    this.elements = {\n      svg,\n      svgDrag,\n      svgG,\n    }\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public update() {\n    this.dataModule.setDescendants()\n\n    this.renderDescendants()\n  }\n\n  public render() {\n    const { width } = this.getDimensions()\n    const {\n      elements: { svg, svgG },\n    } = this\n\n    svg.attr(\"width\", width).attr(\"height\", height)\n    svgG.attr(\"transform\", `translate(${width / 2},${height * 0.52})`)\n\n    this.renderDescendants()\n  }\n\n  private getDimensions() {\n    const {\n      config: { rootElId },\n    } = this\n    const { width } = (\n      document.getElementById(rootElId) as HTMLElement\n    ).getBoundingClientRect()\n    const chartWidth = Math.max(width, 700)\n    const radius = Math.min(chartWidth, height) / 2\n\n    return {\n      chartWidth,\n      radius,\n      width,\n    }\n  }\n\n  private renderDescendants() {\n    const {\n      config: { getColorOptions, getNodeId, getNodeLabel, getNodeTitle },\n      elements: { svgG },\n      selectors,\n    } = this\n    const usedDescendants = this.dataModule.getDescendants()\n\n    const depths = new Set<number>()\n\n    usedDescendants.forEach((node) => {\n      depths.add(node.depth)\n    })\n\n    this.colorScale.domain(\n      getColorOptions({\n        depths: Array.from(depths),\n        nodes: usedDescendants.map((node) => node.data),\n      })\n    )\n\n    const arc = getArc()\n\n    const textsTransform = getTextsTransform(arc)\n\n    const pathSel = svgG.selectAll<SVGPathElement, HierarchyNode<ChartData>>(\n      \"path\"\n    )\n    const pathInitialData = pathSel.data()\n\n    const path = pathSel.data(\n      usedDescendants,\n      (node) => `path-${getNodeId(node.data)}`\n    )\n\n    const usedDuration = this.state.isClearingSelection\n      ? 0\n      : TRANSITION_DURATION\n\n    this.state.isClearingSelection = false\n\n    const getShouldHighlightNode = (node: HierarchyNode<ChartData>) =>\n      !isTouchDevice() || node.depth === 0\n\n    type CommonSelection<ElementType extends SVGElement> = Selection<\n      ElementType,\n      HierarchyNode<ChartData>,\n      SVGGElement,\n      unknown\n    >\n\n    const cursorFn = <ElementType extends SVGElement>(\n      selection: CommonSelection<ElementType>\n    ) => {\n      selection.style(\"cursor\", (node) =>\n        getShouldHighlightNode(node) ? \"pointer\" : \"move\"\n      )\n    }\n\n    const pathCommon = (selection: CommonSelection<SVGPathElement>) => {\n      selection\n        .attr(ATTR_DATA_ID, (node) => getNodeId(node.data))\n        .style(\"fill\", this.fillColor)\n        .style(\"stroke\", this.getPathStrokeColor)\n        .call(cursorFn)\n    }\n\n    const pathEnter = path\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", selectors.path)\n      .style(\"stroke-width\", \"3px\")\n      .style(\"stroke-dasharray\", \"1,3\")\n      .attr(\"d\", arc)\n      .call(pathCommon)\n\n    const exitPaths = path.exit<HierarchyNode<ChartData>>()\n\n    exitPaths.each(moveToBottom)\n\n    exitPaths\n      .transition()\n      .duration(usedDuration)\n      .ease(easeFn)\n      .attrTween(\"d\", (node) => {\n        const initialNode = extractTweenObj(node)\n        const fn = interpolate(initialNode, {\n          ...initialNode,\n          x0: 0,\n          x1: 0,\n        })\n\n        return (t: number) => {\n          const tempNode = fn(t) as HierarchyNode<ChartData>\n\n          return arc(tempNode)!\n        }\n      })\n      .remove()\n\n    path\n      .call(pathCommon)\n      .transition()\n      .duration(usedDuration)\n      .ease(easeFn)\n      .attrTween(\n        \"d\",\n        getInterpolatorFn({\n          fn: arc,\n          getNodeId,\n          initialData: pathInitialData,\n          isText: false,\n        })\n      )\n\n    const initialTextsSel = svgG.selectAll<\n      SVGTextElement,\n      HierarchyNode<ChartData>\n    >(\"text\")\n    const textsInitialData = initialTextsSel.data()\n\n    const initialTexts = initialTextsSel.data(\n      usedDescendants,\n      (node) => `text-${getNodeId(node.data)}`\n    )\n\n    initialTexts.exit().remove()\n\n    const textCommon = (selection: CommonSelection<SVGTextElement>) => {\n      selection\n        .text((node: HierarchyNode<ChartData>) => {\n          const label = getNodeLabel(node.data)\n          const limit = 8\n\n          return label.length > limit ? `${label.slice(0, limit)}...` : label\n        })\n        .attr(ATTR_DATA_ID, (node) => getNodeId(node.data))\n        .call(cursorFn)\n    }\n\n    const textsEnter = initialTexts\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", selectors.text)\n      .style(\"fill\", \"#333\")\n      .style(\"cursor\", \"default\")\n      .style(\"font\", \"bold 12px Arial\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", textsTransform)\n      .style(\"opacity\", getTextsOpacity)\n      .call(textCommon)\n\n    // The texts need to be moved to the bottom before the paths\n    textsEnter.each(moveToBottom)\n    pathEnter.each(moveToBottom)\n\n    initialTexts\n      .call(textCommon)\n      .transition(\"movement\")\n      .duration(usedDuration)\n      .ease(easeFn)\n      .attrTween(\n        \"transform\",\n        getInterpolatorFn({\n          fn: textsTransform,\n          getNodeId,\n          initialData: textsInitialData,\n          isText: true,\n        })\n      )\n\n    initialTexts\n      .transition(\"opacity\")\n      .duration(usedDuration)\n      .ease(easeFn)\n      .style(\"opacity\", getTextsOpacity)\n\n    const updatedGroups = [pathEnter, textsEnter]\n\n    updatedGroups.forEach((set) => {\n      set.on(\"mouseover\", (...[, node]) => {\n        const nodeId = getNodeId(node.data)\n\n        if (getShouldHighlightNode(node)) {\n          svgG\n            .selectAll<SVGPathElement, HierarchyNode<ChartData>>(\n              `path[${ATTR_DATA_ID}=\"${nodeId}\"]`\n            )\n            .style(\"fill\", colorHover)\n\n          svgG\n            .select(`text[${ATTR_DATA_ID}=\"${nodeId}\"]`)\n            .style(\"fill\", \"white\")\n        }\n      })\n\n      set.on(\"mouseout\", (...[, node]) => {\n        const nodeId = getNodeId(node.data)\n\n        svgG\n          .selectAll<SVGPathElement, HierarchyNode<ChartData>>(\n            `path[${ATTR_DATA_ID}=\"${nodeId}\"]`\n          )\n          .style(\"fill\", this.fillColor)\n        svgG.select(`text[${ATTR_DATA_ID}=\"${nodeId}\"]`).style(\"fill\", \"#000\")\n      })\n\n      set.on(\"click\", (...[, node]) => {\n        const focusedPath = this.dataModule.getFocusedPathRef()\n        const nodeId = getNodeId(node.data)\n\n        if (!node.parent) {\n          this.dataModule.setFocusedPath([])\n          this.state.isClearingSelection = true\n        } else if (focusedPath.includes(nodeId)) {\n          const idIndex = focusedPath.indexOf(nodeId)\n\n          this.dataModule.setFocusedPath(focusedPath.slice(0, idIndex))\n        } else {\n          this.dataModule.setFocusedPathFromNode(node)\n        }\n\n        svgG\n          .selectAll<SVGPathElement, HierarchyNode<ChartData>>(\n            `path[${ATTR_DATA_ID}=\"${nodeId}\"]`\n          )\n          .style(\"fill\", this.fillColor)\n        svgG.select(`text[${ATTR_DATA_ID}=\"${nodeId}\"]`).style(\"fill\", null)\n\n        this.dataModule.setDescendants()\n        this.renderDescendants()\n      })\n\n      set.attr(\"title\", (node) =>\n        getNodeTitle({\n          nodeData: node.data,\n          valueNum: node.value,\n        })\n      )\n    })\n\n    if (!isTouchDevice()) {\n      $(`.${selectors.path}`).tooltip({\n        track: true,\n      })\n\n      $(`.${selectors.text}`).tooltip({\n        track: true,\n      })\n    }\n  }\n\n  private readonly getPathStrokeColor = (node: HierarchyNode<ChartData>) => {\n    const focusedPath = this.dataModule.getFocusedPathRef()\n    const {\n      config: { getNodeId },\n    } = this\n\n    if (focusedPath.includes(getNodeId(node.data))) {\n      return \"darkred\"\n    }\n\n    return colorDefaultStroke\n  }\n\n  private readonly fillColor = (node: HierarchyNode<ChartData>) => {\n    const focusedPath = this.dataModule.getFocusedPathRef()\n    const {\n      colorScale,\n      config: { getNodeColorOption, getNodeId },\n    } = this\n\n    if (focusedPath.includes(getNodeId(node.data))) {\n      return colorFillSelected\n    }\n\n    const nodeOption = getNodeColorOption({\n      depth: node.depth,\n      node: node.data,\n    })\n\n    return colorScale(nodeOption)\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nconst zTestGetArc = process.env.NODE_ENV === \"test\" ? getArc : null\nconst zTestGetTextsTransform =\n  process.env.NODE_ENV === \"test\" ? getTextsTransform : null\nconst zTestGetX0CentroidCorrection =\n  process.env.NODE_ENV === \"test\" ? getX0CentroidCorrection : null\nconst zTestGetTextsOpacity =\n  process.env.NODE_ENV === \"test\" ? getTextsOpacity : null\n\nexport type { Node }\n\nexport {\n  ChartConfig,\n  PartitionChart,\n  zTestGetArc,\n  zTestGetTextsOpacity,\n  zTestGetTextsTransform,\n  zTestGetX0CentroidCorrection,\n}\n","import { COLOR_METHOD, TYPE_FORM } from \"./ui-constants\"\n\nenum PartitionType {\n  count = \"count\",\n  size = \"size\",\n}\n\nenum ColorMethod {\n  depth = \"depth\",\n  id = \"id\",\n}\n\ntype FormState = {\n  colorMethod: ColorMethod\n  partitionType: PartitionType\n}\n\nconst colorMethodToLabel: { [key in ColorMethod]: string } = {\n  [ColorMethod.depth]: \"Node depth\",\n  [ColorMethod.id]: \"Node ID\",\n}\n\nconst setupControls = () => {\n  const formState: FormState = {\n    colorMethod: ColorMethod.id,\n    partitionType: PartitionType.count,\n  }\n\n  const formEl = document.getElementById(TYPE_FORM) as HTMLFormElement\n  const selectEl = document.getElementById(COLOR_METHOD) as HTMLSelectElement\n\n  Object.values(ColorMethod).forEach((...[colorValue]) => {\n    const option = document.createElement(\"option\")\n\n    option.setAttribute(\"value\", colorValue)\n    option.innerHTML = colorMethodToLabel[colorValue]\n\n    selectEl.appendChild(option)\n  })\n\n  // eslint-disable-next-line id-denylist\n  selectEl.value = formState.colorMethod\n\n  const getCurrentSelectedRadio = (): PartitionType => {\n    const selectedRadio = Array.from(\n      formEl.elements as unknown as HTMLInputElement[]\n    ).find((formElement: HTMLInputElement) => formElement.checked)\n\n    return selectedRadio!.value as PartitionType\n  }\n\n  const getCurrentSelectedOption = () => selectEl.value as ColorMethod\n\n  let handler = () => {}\n\n  formEl.addEventListener(\"change\", () => {\n    formState.partitionType = getCurrentSelectedRadio()\n    formState.colorMethod = getCurrentSelectedOption()\n\n    handler()\n  })\n\n  const onStateChangeHandler = (newHandler: () => void) => {\n    handler = newHandler\n  }\n\n  return {\n    formState,\n    onStateChangeHandler,\n  }\n}\n\nexport { ColorMethod, FormState, PartitionType, setupControls }\n","import { json } from \"d3\"\n\nimport { ChartConfig, Node } from \"./chart/partition-chart\"\nimport { ColorMethod, FormState, PartitionType } from \"./partition-controls\"\nimport { CONTAINER_ID } from \"./ui-constants\"\n\ntype DataBase = {\n  name: string\n  size?: number\n}\n\ntype DataNodeBase = Node<DataBase>\n\ntype DataNode = Node<\n  DataBase & {\n    id: number\n  }\n>\n\nconst fetchData = async (): Promise<DataNode> => {\n  const apiResult = (await json(\n    `${ROOT_PATH}data/d3js/partition/flare.json`\n  )) as DataNodeBase\n\n  let currentId = 0\n\n  const recursiveFn = (node: DataNodeBase): DataNode => {\n    currentId += 1\n\n    const id = currentId\n\n    const children = \"children\" in node ? node.children!.map(recursiveFn) : null\n\n    return {\n      ...node,\n      ...(children && {\n        children,\n      }),\n      id,\n    } as DataNode\n  }\n\n  return recursiveFn(apiResult)\n}\n\ntype Config = ChartConfig<DataNode>\n\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeTitle: Config[\"getNodeTitle\"] = ({ nodeData, valueNum }) =>\n  `Name: \"${nodeData.name}\"\\nSize: ${\n    typeof nodeData.size === \"number\"\n      ? nodeData.size.toLocaleString(\"en-GB\")\n      : \"-\"\n  }\\nValue: ${\n    typeof valueNum === \"number\" ? valueNum.toLocaleString(\"en-GB\") : \"-\"\n  }`\nconst getNodeId: Config[\"getNodeId\"] = (node) => node.id\n\nconst getChartConfig = ({\n  rootData,\n  state,\n}: {\n  rootData: DataNode\n  state: FormState\n}): Config => {\n  const allIds = new Set<number>()\n\n  const getIdsRecursive = (node: DataNode) => {\n    const { id } = node\n\n    allIds.add(id)\n\n    if (\"children\" in node) {\n      node.children?.forEach(getIdsRecursive)\n    }\n  }\n\n  getIdsRecursive(rootData)\n\n  const getHierarchySum: Config[\"getHierarchySum\"] = (node) =>\n    state.partitionType === PartitionType.count ? 1 : node.size ?? 0\n\n  const getColorOptions: Config[\"getColorOptions\"] = ({ depths }) =>\n    state.colorMethod === ColorMethod.depth ? depths : Array.from(allIds)\n\n  const getNodeColorOption: Config[\"getNodeColorOption\"] = ({ depth, node }) =>\n    state.colorMethod === ColorMethod.depth ? depth : node.id\n\n  return {\n    getColorOptions,\n    getHierarchySum,\n    getNodeColorOption,\n    getNodeId,\n    getNodeLabel,\n    getNodeTitle,\n    rootData,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { fetchData, getChartConfig }\n","import { PartitionChart } from \"./chart/partition-chart\"\nimport { fetchData, getChartConfig } from \"./partition-chart-config\"\nimport { setupControls } from \"./partition-controls\"\nimport { COLOR_METHOD, CONTAINER_ID, TYPE_FORM } from \"./ui-constants\"\n\nconst main = async () => {\n  const { formState, onStateChangeHandler } = setupControls()\n\n  const rootData = await fetchData()\n\n  const chartConfig = getChartConfig({\n    rootData,\n    state: formState,\n  })\n\n  const chart = new PartitionChart(chartConfig)\n\n  chart.render()\n\n  onStateChangeHandler(() => {\n    chart.update()\n  })\n}\n\nexport { CONTAINER_ID, TYPE_FORM, COLOR_METHOD }\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var colorSelect = \"partition-page-module--colorSelect--4faaa\";\nexport var form = \"partition-page-module--form--e20ba\";\nexport var label = \"partition-page-module--label--4f05c\";\nexport var radios = \"partition-page-module--radios--886a8\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  COLOR_METHOD,\n  CONTAINER_ID,\n  TYPE_FORM,\n} from \"@/demos/partition/partition\"\nimport * as styles from \"@/demos/partition/partition-page.module.css\"\n\nconst Partition = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form className={styles.form} id={TYPE_FORM}>\n      <span>\n        <span>Color Method: </span>\n        <select\n          className={`form-select ${styles.colorSelect}`}\n          id={COLOR_METHOD}\n        />\n      </span>\n      <div className={styles.radios}>\n        <label className={styles.label}>\n          <input\n            className=\"form-check-inpu\"\n            name=\"mode\"\n            type=\"radio\"\n            value=\"size\"\n          />{\" \"}\n          Size\n        </label>\n        <label className={styles.label}>\n          <input defaultChecked name=\"mode\" type=\"radio\" value=\"count\" /> Count\n        </label>\n      </div>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Partition\n"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","byteToHex","i","push","toString","substr","_nodeId","_clockseq","arr","offset","arguments","length","undefined","toLowerCase","TypeError","_lastMSecs","_lastNSecs","options","buf","b","Array","node","clockseq","seedBytes","random","msecs","Date","now","nsecs","dt","tl","tmh","n","CONTAINER_ID","TYPE_FORM","COLOR_METHOD","ATTR_DATA_ID","DragModule","elements","this","state","x","y","setupDrag","container","dragSurface","handler","dragEvent","dx","dy","attr","dragBehavior","dragD3","on","style","call","extractTweenObj","depth","x0","x1","y0","y1","getInterpolatorFn","fn","getNodeId","initialData","isText","finalNode","initialNode","find","data","finalTween","initialTween","initialTweenUpdated","interpolateFn","interpolate","t","transitientState","PartitionData","config","descendants","focusedPath","getDataHierarchy","setDescendants","getDescendants","getHierarchySum","rootData","maxRadius","getMaxRadius","getMaxDepthRecursive","children","Math","max","map","child","newNode","cloneRecursive","level","pathId","isValidPathId","childrenObj","filter","radius","rootNode","partitionD3","size","PI","circularPartition","hierarchy","sum","createDescendants","setFocusedPathFromNode","getFocusedPath","parent","concat","getFocusedPathRef","setFocusedPath","newFocusedPath","window","require","colorHover","easeFn","easeExpInOut","isTouchDevice","navigator","maxTouchPoints","getTextsOpacity","abs","moveToBottom","select","parentNode","prepend","PartitionType","ColorMethod","PartitionChart","getPathStrokeColor","dataModule","includes","fillColor","colorScale","getNodeColorOption","handleResize","render","getDimensions","rootElId","svg","append","svgDrag","svgG","drag","isClearingSelection","selectors","path","slice","text","scaleOrdinal","schemePastel1","schemePastel2","addEventListener","update","renderDescendants","width","document","getElementById","getBoundingClientRect","chartWidth","min","getColorOptions","getNodeLabel","getNodeTitle","usedDescendants","depths","Set","forEach","add","domain","from","nodes","arc","arcD3","startAngle","endAngle","innerRadius","outerRadius","padAngle","textsTransform","centroid","rotation","join","getTextsTransform","pathSel","selectAll","pathInitialData","usedDuration","getShouldHighlightNode","cursorFn","selection","pathCommon","pathEnter","enter","exitPaths","exit","each","transition","duration","ease","attrTween","tempNode","remove","initialTextsSel","textsInitialData","initialTexts","textCommon","label","textsEnter","set","nodeId","idIndex","indexOf","nodeData","valueNum","value","$","tooltip","track","colorMethodToLabel","id","setupControls","formState","colorMethod","partitionType","count","formEl","selectEl","Object","values","colorValue","option","createElement","setAttribute","innerHTML","appendChild","formElement","checked","onStateChangeHandler","newHandler","fetchData","json","ROOT_PATH","apiResult","currentId","recursiveFn","name","toLocaleString","getChartConfig","allIds","getIdsRecursive","main","chartConfig","chart","pageContext","className","styles","type","defaultChecked"],"sourceRoot":""}