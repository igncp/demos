{"version":3,"sources":["webpack://demos/./src/demos/population-circles/population-circles.module.css","webpack://demos/./src/demos/population-circles/population-circles-chart.ts","webpack://demos/./src/demos/population-circles/population-circles-chart-data.ts","webpack://demos/./src/demos/population-circles/population-circles.ts","webpack://demos/./src/pages/d3js/population-circles.tsx"],"names":["slider","circle","dropShadowBaseId","margin","height","renderChart","chartConfig","deviation","name","slope","width","document","getElementById","rootElId","getBoundingClientRect","lastPosition","k","x","y","color","scaleOrdinal","domain","colorDomain","range","schemeSet3","zoomBehavior","zoom","extent","on","zoomEvent","transition","select","this","duration","transform","attr","svg","append","join","call","html","header","text","svgContent","transitionChart","filteredData","getChartItems","hoverAnimations","structure","hierarchy","getEmptyItem","children","sum","getItemMetric","isSmall","getIsSmall","leaves","pack","size","padding","getHeaderText","chartItems","getDataKey","node","getItemId","data","leaf","selectAll","exit","remove","getTitle","getItemTitle","circleData","ease","easeCircleInOut","chartNode","enter","selection","styles","id","hoverAnimation","anime","complete","strokeWidth","targets","seek","onClick","generateColor","getStringForColor","generateDarkerColor","baseColor","chroma","darken","hex","setupLetter","letter","getItemLabel","style","r","toFixed","setupCircle","forwardData","circles","texts","easeSinInOut","$","tooltip","track","updateChart","formatPopulation","populationNum","Number","toLocaleString","undefined","maximumFractionDigits","minimumFractionDigits","typeNouns","females","males","total","getYearStr","dateStr","Date","getFullYear","createChartConfig","municipalities","state","map","municipality","populationRange","populationType","timeRangeIndex","itemsWithCount","filter","values","dataValues","count","valueToIdx","reduce","acc","val","idx","push","sortedDataValues","sort","municipalityAValue","municipalityBValue","percentiles","percentile","length","forEach","idx2","_municipality","date","year","populationTotal","populationText","totalNum","chartItem","valueItem","itemsName","hotkeys","window","open","qs","q","json","ROOT_PATH","changeEvent","target","value","change","populationValues","newValues","v","max","min","pageContext","links","main","scripts","label","radioIndex","className","key","defaultChecked","type","htmlFor"],"mappings":"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","file":"component---src-pages-d-3-js-population-circles-tsx-e4cbfc9149095e39b18b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport var radio = \"population-circles-module--radio--1S8Dr\";\nexport var slider = \"population-circles-module--slider--3hzyU\";\nexport var circle = \"population-circles-module--circle--Q63YD\";\nexport var header = \"population-circles-module--header--1mim1\";","import anime from \"animejs\"\nimport chroma from \"chroma-js\"\nimport {\n  BaseType,\n  D3ZoomEvent,\n  HierarchyCircularNode,\n  Selection,\n  Transition,\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  pack,\n  scaleOrdinal,\n  schemeSet3,\n  select,\n  zoom,\n} from \"d3\"\n\nimport * as styles from \"./population-circles.module.css\"\n\nconst dropShadowBaseId = \"dropShadowBase\"\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\nconst height = 400\n\nexport type ChartConfig<CircleData> = {\n  colorDomain: string[]\n  getChartItems: () => CircleData[]\n  getEmptyItem: () => CircleData\n  getHeaderText: (o: { chartItems: CircleData[] }) => string\n  getIsSmall: () => boolean\n  getItemId: (circleData: CircleData) => string\n  getItemLabel: (circleData: CircleData) => string\n  getItemMetric: (circleData: CircleData) => number\n  getItemTitle: (o: { circleData: CircleData }) => string\n  getStringForColor: (circleData: CircleData) => string\n  onClick: (m: CircleData) => void\n  rootElId: string\n}\n\ntype RenderChartReturn = {\n  updateChart: () => void\n}\n\ntype AddDropShadow = (o: {\n  deviation: number\n  name: string\n  slope: number\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}) => void\n\nconst addDropShadow: AddDropShadow = ({ deviation, name, slope, svg }) => {\n  svg.append(\"filter\").html(`\n<filter id=\"${name}\" height=\"130%\">\n  <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${deviation}\"/>\n  <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n  <feComponentTransfer>\n    <feFuncA type=\"linear\" slope=\"${slope}\"/>\n  </feComponentTransfer>\n  <feMerge>\n    <feMergeNode/>\n    <feMergeNode in=\"SourceGraphic\"/>\n  </feMerge>\n</filter>\n`)\n}\n\nexport const renderChart = <CircleData>(\n  chartConfig: ChartConfig<CircleData>\n): RenderChartReturn => {\n  type ChartNode = HierarchyCircularNode<CircleData>\n\n  const chartEl = document.getElementById(chartConfig.rootElId) as HTMLElement\n  const { width } = chartEl.getBoundingClientRect()\n\n  const lastPosition = { k: 1, x: 0, y: 0 }\n\n  // this zoom function is not working well in all directions\n  // eslint-disable-next-line max-params\n  const zoomed = function (\n    this: SVGSVGElement,\n    zoomEvent: D3ZoomEvent<SVGSVGElement, unknown>\n  ) {\n    const transition = select(this).transition().duration(150)\n    let {\n      transform: { x, y },\n    } = zoomEvent\n    const {\n      transform: { k },\n    } = zoomEvent\n\n    if (k !== lastPosition.k) {\n      x = lastPosition.x\n      y = lastPosition.y\n    }\n\n    transition.attr(\"transform\", `translate(${x}, ${y}) scale(${k})`)\n\n    lastPosition.k = k\n    lastPosition.x = x\n    lastPosition.y = y\n  }\n\n  const color = scaleOrdinal<string, string>()\n    .domain(chartConfig.colorDomain)\n    .range(schemeSet3)\n\n  const zoomBehavior = zoom<SVGSVGElement, unknown>()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const svg = select(`#${chartConfig.rootElId}`)\n    .append(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height + margin.top].join(\", \"))\n    .attr(\"font-size\", 10)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"text-anchor\", \"middle\")\n    .call(zoomBehavior)\n\n  addDropShadow({ deviation: 2, name: dropShadowBaseId, slope: 0.5, svg })\n\n  const header = svg\n    .append(\"text\")\n    .attr(\"class\", styles.header)\n    .text(\"\")\n    .attr(\"transform\", `translate(${width / 2}, 50)`)\n\n  const svgContent = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const transitionChart = () => {\n    const filteredData = chartConfig.getChartItems()\n    const hoverAnimations: { [k: string]: anime.AnimeInstance | null } = {}\n\n    const structure = hierarchy({\n      ...chartConfig.getEmptyItem(),\n      children: filteredData,\n    }).sum(chartConfig.getItemMetric)\n\n    const isSmall = chartConfig.getIsSmall()\n\n    const root = pack<CircleData>()\n      .size(isSmall ? [width / 2, height / 2] : [width, height])\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    header.text(\n      chartConfig.getHeaderText({\n        chartItems: filteredData,\n      })\n    )\n\n    const getDataKey = (node: unknown) =>\n      chartConfig.getItemId((node as HierarchyCircularNode<CircleData>).data)\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves, getDataKey)\n\n    leaf.exit().remove()\n\n    const getTitle = (node: HierarchyCircularNode<CircleData>) =>\n      chartConfig.getItemTitle({\n        circleData: node.data,\n      })\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (chartNode) => {\n        if (isSmall) {\n          return `translate(${chartNode.x + width / 4},${\n            chartNode.y + height / 4\n          })`\n        }\n\n        return `translate(${chartNode.x + 1},${chartNode.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\"transform\", (node) => `translate(${node.x + 1},${node.y + 1})`)\n      .on(\"mouseenter\", function (...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this)\n          .select(\".letter\")\n          .attr(\"filter\", `url(#${dropShadowBaseId})`)\n\n        const id = chartConfig.getItemId(node.data)\n\n        const hoverAnimation = anime({\n          complete: () => {\n            hoverAnimations[id] = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        hoverAnimations[id] = hoverAnimation\n      })\n      .on(\"mouseleave\", function (...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this).select(\".letter\").attr(\"filter\", null)\n\n        const id = chartConfig.getItemId(node.data)\n        const { [id]: hoverAnimation } = hoverAnimations\n\n        if (hoverAnimation) {\n          hoverAnimation.seek(0)\n          anime.remove(selection.node())\n          hoverAnimations[id] = null\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (...[, node]) => {\n        chartConfig.onClick(node.data)\n      })\n\n    const generateColor = (node: HierarchyCircularNode<CircleData>) =>\n      color(chartConfig.getStringForColor(node.data))\n\n    const generateDarkerColor = (node: ChartNode) => {\n      const baseColor = generateColor(node)\n\n      return chroma(baseColor).darken(1.5).hex()\n    }\n\n    type ChartTransition = Transition<BaseType, ChartNode, BaseType, ChartNode>\n\n    const setupLetter = (\n      letter:\n        | ChartTransition\n        | Selection<SVGTextElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const letterSelection = letter.text((node) =>\n        chartConfig.getItemLabel(node.data)\n      ) as ChartTransition\n\n      letterSelection\n        .style(\"font-size\", (node) => `${node.r.toFixed(0)}px`)\n        .attr(\"dy\", (node) => node.r / 3)\n        .attr(\"fill\", generateDarkerColor)\n    }\n\n    const setupCircle = (\n      circle:\n        | ChartTransition\n        | Selection<SVGCircleElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const elem = circle.attr(\"r\", (node) => node.r!) as ChartTransition\n\n      elem.attr(\"fill\", generateColor).attr(\"stroke\", generateDarkerColor)\n    }\n\n    setupCircle(enter.append(\"circle\").attr(\"class\", styles.circle))\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const forwardData = (node: ChartNode) => node\n\n    const circles = leaf\n      .selectAll(`.${styles.circle}`)\n      .data(forwardData, getDataKey)\n    const texts = leaf.selectAll(\".letter\").data(forwardData, getDataKey)\n\n    setupCircle(circles.transition().duration(1000).ease(easeSinInOut))\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  transitionChart()\n\n  return {\n    updateChart: transitionChart,\n  }\n}\n","import { json } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\nimport { ChartConfig } from \"./population-circles-chart\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\nexport type Municipality = {\n  name: string\n  values: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n}\n\ntype PopulationType = keyof Municipality[\"values\"]\n\ntype State = {\n  populationRange: [number, number]\n  populationType: PopulationType\n  timeRangeIndex: number\n}\n\nexport const createState = (): State => ({\n  populationRange: [0, 1],\n  populationType: \"total\",\n  timeRangeIndex: 0,\n})\n\nexport const fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown) as Promise<Municipality[]>\n\nconst formatPopulation = (populationNum: number) =>\n  Number(populationNum.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\nconst typeNouns: Record<string, string> = {\n  females: \"females\",\n  males: \"males\",\n  total: \"people\",\n}\n\nconst getYearStr = (dateStr: string) => new Date(dateStr).getFullYear()\n\nexport const createChartConfig = (\n  municipalities: Municipality[],\n  state: State\n): ChartConfig<Municipality> => {\n  type Config = ChartConfig<Municipality>\n\n  const colorDomain = municipalities.map((municipality) => municipality.name)\n  const getStringForColor = (municipality: Municipality) => municipality.name\n\n  const getEmptyItem = (): Municipality => ({\n    name: \"\",\n    values: {\n      females: [],\n      males: [],\n      total: [],\n    },\n  })\n\n  const getItemMetric: Config[\"getItemMetric\"] = (\n    municipality: Municipality\n  ) => {\n    if (!(municipality.values as unknown)) {\n      return 1\n    }\n\n    const {\n      values: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = municipality\n\n    return !(valueItem as unknown) ? 0 : valueItem.count\n  }\n\n  const getChartItems: Config[\"getChartItems\"] = () => {\n    const { populationRange, populationType, timeRangeIndex } = state\n    const itemsWithCount = municipalities.filter((municipality) => {\n      const {\n        values: {\n          [populationType]: { [timeRangeIndex]: valueItem },\n        },\n      } = municipality\n\n      return !!(valueItem as unknown)\n    })\n\n    const dataValues = itemsWithCount.map((municipality) => {\n      const {\n        values: {\n          [populationType]: { [timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return dataItem.count\n    })\n\n    const valueToIdx = dataValues.reduce((acc, val, idx) => {\n      acc[val] = acc[val] ?? []\n      acc[val]!.push(idx)\n\n      return acc\n    }, {} as Record<string, number[] | undefined>)\n\n    const sortedDataValues = dataValues.sort(\n      (municipalityAValue, municipalityBValue) =>\n        municipalityAValue - municipalityBValue\n    )\n\n    const percentiles = sortedDataValues.reduce((acc, val, idx) => {\n      const percentile = idx / sortedDataValues.length\n      const { [val]: unsortedIndexes } = valueToIdx\n\n      unsortedIndexes!.forEach((idx2: number) => {\n        acc[idx2] = percentile\n      })\n\n      return acc\n    }, [] as number[])\n\n    const filteredData = itemsWithCount.filter((_municipality, idx) => {\n      const { [idx]: percentile } = percentiles\n\n      return (\n        typeof percentile === \"number\" &&\n        percentile >= populationRange[0] &&\n        percentile <= populationRange[1]\n      )\n    })\n\n    return filteredData\n  }\n\n  const getHeaderText: Config[\"getHeaderText\"] = ({ chartItems }) => {\n    const {\n      values: {\n        [state.populationType]: {\n          [state.timeRangeIndex]: { date },\n        },\n      },\n    } = chartItems[0]\n\n    const year = getYearStr(date)\n\n    const populationTotal = chartItems.reduce(\n      (acc, circleData) =>\n        acc +\n        circleData.values[state.populationType][state.timeRangeIndex].count,\n      0\n    )\n\n    const populationText = `${formatPopulation(populationTotal)} ${\n      typeNouns[state.populationType]\n    }`\n\n    const { length: totalNum } = chartItems.filter(\n      (chartItem) =>\n        chartItem.values[state.populationType].length >=\n        state.timeRangeIndex + 1\n    )\n\n    return `Population in Malaga: ${year} - ${populationText}${\n      state.populationRange[0] === 0 && state.populationRange[1] === 1\n        ? \"\"\n        : ` - From ${(state.populationRange[0] * 100).toFixed(\n            0\n          )} percentile to ${(state.populationRange[1] * 100).toFixed(\n            0\n          )} percentile`\n    } - ${totalNum} municipalities`\n  }\n\n  const getItemId: Config[\"getItemId\"] = (municipality) => municipality.name\n\n  const getItemTitle: Config[\"getItemTitle\"] = ({ circleData }) => {\n    const {\n      values: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = circleData\n\n    if (!valueItem as unknown) {\n      return \"\"\n    }\n\n    const { [state.populationType]: itemsName } = typeNouns\n\n    return `${circleData.name} - ${formatPopulation(\n      valueItem.count\n    )} ${itemsName} - ${getYearStr(valueItem.date)}`\n  }\n\n  const getItemLabel: Config[\"getItemLabel\"] = (municipality) =>\n    municipality.name[0]!\n\n  const getIsSmall = () => state.populationType !== \"total\"\n\n  const onClick: Config[\"onClick\"] = (municipality) => {\n    if (!hotkeys.isPressed(\"control\")) {\n      return\n    }\n\n    window.open(\n      `https://www.google.com/search?${qs.stringify({\n        q: `Malaga ${municipality.name}`,\n      })}`\n    )\n  }\n\n  return {\n    colorDomain,\n    getChartItems,\n    getEmptyItem,\n    getHeaderText,\n    getIsSmall,\n    getItemId,\n    getItemLabel,\n    getItemMetric,\n    getItemTitle,\n    getStringForColor,\n    onClick,\n    rootElId: \"chart\",\n  }\n}\n","import { select } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\n\nimport { renderChart } from \"./population-circles-chart\"\nimport {\n  Municipality,\n  createChartConfig,\n  createState,\n  fetchData,\n} from \"./population-circles-chart-data\"\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const state = createState()\n  const chartConfig = createChartConfig(municipalities, state)\n\n  const { updateChart } = renderChart<Municipality>(chartConfig)\n\n  select(\"form\").on(\"change\", (changeEvent) => {\n    state.populationType = changeEvent.target.value\n    updateChart()\n  })\n\n  $(\".population-slider\").slider({\n    change: (...[, { values: populationValues }]) => {\n      const newValues = (populationValues as [number, number]).map(\n        (v) => v / 100\n      ) as [number, number]\n\n      state.populationRange = newValues\n      updateChart()\n    },\n    range: true,\n    values: [0, 100], // eslint-disable-line id-denylist\n  })\n\n  const max = municipalities[0].values.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (...[, { value: timeRangeIndex }]) => {\n      state.timeRangeIndex = timeRangeIndex as number\n      updateChart()\n    },\n    max,\n    min: 0,\n    value: 0, // eslint-disable-line id-denylist\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map((...[{ id, label }, radioIndex]) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default PopulationCircles\n"],"sourceRoot":""}