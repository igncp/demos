{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./src/demos/_utils/browserRaphael.ts","webpack://demos/./src/demos/moving-line/moving-line.ts","webpack://demos/./src/demos/moving-line/moving-line.module.css","webpack://demos/./src/pages/raphael/moving-line.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","Raphael","window","require","fetchData","fetch","ROOT_PATH","response","json","data","renderChart","graphData","rootElId","advanceGraph","current","charts","length","newData","newPath","upperLimit","parseInt","upper","lowerLimit","lower","scaleFactor","yOffset","points","i","xOffset","xDelta","point","animate","cy","node","childNodes","remove","attr","line","path","animateChart","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","paper","createPathString","xPos","yPos","circle","className","baseVal","drawPoints","setInterval","initLineGraph","pageContext","main","id"],"mappings":"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","file":"component---src-pages-raphael-moving-line-tsx-a621c85bc9cc0747ed98.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const Raphael = typeof window === \"undefined\" ? null : require(\"raphael\")\n\nexport default Raphael\n","import { RaphaelElement, RaphaelPaper, RaphaelPath } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./moving-line.module.css\"\n\ntype Data = {\n  charts: Array<{\n    lower: string\n    points: Array<{\n      point: RaphaelElement\n      value: number\n    }>\n    upper: string\n  }>\n  current: number\n  line: RaphaelPath\n  paper: RaphaelPaper\n  xDelta: number\n  xOffset: number\n  yOffset: number\n}\n\nconst fetchData = async (): Promise<Data> => {\n  const response = await fetch(`${ROOT_PATH}data/raphael/moving-line/data.json`)\n  const data = await response.json()\n\n  return data\n}\n\nconst height = 300\n\ntype RenderChartOpts = { graphData: Data; rootElId: string }\n\nconst renderChart = ({ graphData, rootElId }: RenderChartOpts) => {\n  const createPathString = () => {\n    const {\n      charts: {\n        [graphData.current]: { points },\n      },\n    } = graphData\n\n    let path = `M ${graphData.xOffset} ${graphData.yOffset - points[0].value}`\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      path += \" L \"\n      path += `${graphData.xOffset + i * graphData.xDelta} `\n      path += graphData.yOffset - points[i].value\n      i += 1\n    }\n\n    return path\n  }\n\n  const drawPoints = function () {\n    const radius = 6\n    const { points } = graphData.charts[0]\n\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      const xPos = graphData.xOffset + i * graphData.xDelta\n      const { yOffset: yPos } = graphData\n\n      const circle = graphData.paper.circle(xPos, yPos, radius)\n\n      circle.node.className.baseVal = styles.point\n      circle.attr(\"title\", `Value: ${0}`)\n      points[i].point = circle\n      i += 1\n    }\n  }\n\n  const animateChart = function () {\n    const {\n      charts: { [graphData.current]: newData },\n    } = graphData\n    let newPath = \"\"\n\n    const upperLimit = parseInt(newData.upper) || 1\n    const lowerLimit = parseInt(newData.lower) || 0\n    const scaleFactor = graphData.yOffset / (upperLimit - lowerLimit)\n\n    const { points } = graphData.charts[0]\n\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      if (i === 0) {\n        newPath += \"M \"\n        newPath += `${graphData.xOffset} `\n        newPath += `${\n          graphData.yOffset -\n          (newData.points[i].value - lowerLimit) * scaleFactor\n        } `\n      } else {\n        newPath += \"L \"\n        newPath += `${graphData.xOffset + i * graphData.xDelta} `\n        newPath +=\n          graphData.yOffset -\n          (newData.points[i].value - lowerLimit) * scaleFactor\n      }\n\n      points[i].point.animate(\n        {\n          cy:\n            graphData.yOffset -\n            (newData.points[i].value - lowerLimit) * scaleFactor,\n        },\n        800,\n        \"ease-in-out\"\n      )\n      points[i].point.node.childNodes[0].remove()\n      points[i].point.attr(\"title\", `Value: ${newData.points[i].value}`)\n      i += 1\n    }\n\n    graphData.line.animate(\n      {\n        path: newPath,\n      },\n      800,\n      \"ease-in-out\"\n    )\n  }\n\n  const advanceGraph = function () {\n    if (graphData.current < graphData.charts.length - 1) {\n      graphData.current += 1\n    } else {\n      graphData.current = 1\n    }\n\n    animateChart()\n  }\n\n  const initLineGraph = function () {\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.movingLineChart)\n\n    const { width } = rootEl.getBoundingClientRect()\n    const paper = Raphael(rootElId, width, height)\n\n    graphData.paper = paper\n\n    const path = createPathString()\n\n    const line = paper.path(path)\n\n    graphData.line = line\n    drawPoints()\n\n    setInterval(advanceGraph, 3000)\n  }\n\n  initLineGraph()\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({\n    graphData: data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var movingLineChart = \"moving-line-module--movingLineChart--1kCq_\";\nexport var point = \"moving-line-module--point--zxXJ-\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/moving-line/moving-line\"\n\nconst CircularArcs = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n"],"sourceRoot":""}