{"version":3,"file":"component---src-pages-d-3-js-vectors-tsx-5f7b12811a6d1ad48ca6.js","mappings":"kLAIW,EAAO,8BCSZA,EAAe,QA6FfC,EACU,EADVA,EAEgB,GAYhBC,EAA2B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACpCC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MAETC,EAASC,SAASC,eAAeN,GAEvCI,EAAOG,UAAUC,ID5HO,uCC8HxB,IAAQC,EAAUL,EAAOM,wBAAjBD,MACFE,GAAMC,EAAAA,EAAAA,IAAO,IAAIZ,GACpBa,OAAO,OACPC,KAAK,QAASL,GACdK,KAAK,SAlBK,MAvCE,SACfH,GAEAA,EACGE,OAAO,YACPA,OAAO,cACPC,KAAK,KAAM,aACXA,KAAK,UAAW,cAChBA,KAAK,OAAQ,GACbA,KAAK,cAAe,GACpBA,KAAK,eAAgB,GACrBA,KAAK,SAAU,QACfD,OAAO,YACPC,KAAK,IAAK,kBACVA,KAAK,OAAQ,QAEhBH,EACGE,OAAO,YACPA,OAAO,cACPC,KAAK,KAAM,eACXA,KAAK,UAAW,cAChBA,KAAK,OAAQ,GACbA,KAAK,cAAe,GACpBA,KAAK,eAAgB,GACrBA,KAAK,SAAU,QACfD,OAAO,YACPC,KAAK,IAAK,mBACVA,KAAK,OAAQ,QAgChBC,CAASJ,GAGT,IAAIK,EAAa,IAAIC,WAAW,GAoC1BC,GAAaC,EAAAA,EAAAA,KAAgBhB,GAChCiB,MAAM,UAAUC,EAAAA,EAAAA,OAAgBC,UAAU,KAC1CF,MAAM,UAAUG,EAAAA,EAAAA,KAAYd,EAAQ,EAAGe,MACvCJ,MAAM,QAAQK,EAAAA,EAAAA,OAAYvB,MAAMA,GAAOwB,SAAS,MAChDC,GAAG,QATS,WA7BK,IACZC,GAAAA,EAAWjB,EACdkB,UADc,IACsCC,GACpDC,KAAK7B,IAGL8B,QACAnB,OAAuB,QACvBoB,MAAML,GACNd,KAAK,KAAK,SAACoB,GACV,IAAMC,EAASD,EAAKE,OAAOC,EAAKH,EAAKI,OAAOD,EACtCE,EAASL,EAAKE,OAAOI,EAAKN,EAAKI,OAAOE,EACtCC,EAAOC,KAAKC,KAAKR,EAASA,EAASI,EAASA,GAC5CK,EAAQT,EAASM,EACjBI,EAAQN,EAASE,EACjBK,EAAgBZ,EAAKa,KAAO,GAAK,GACjCC,EAAgBd,EAAKe,MAAQ,GAAK,GAMxC,MAAM,KALUf,EAAKI,OAAOD,EAAKS,EAAgBF,GAKjD,KAJgBV,EAAKI,OAAOE,EAAKM,EAAgBD,GAIjD,KAHgBX,EAAKE,OAAOC,EAAKW,EAAgBJ,GAGjD,KAFgBV,EAAKE,OAAOI,EAAKQ,EAAgBH,MAIlD/B,KAAK,QAAYgB,EAAAA,oCAEpBF,EAASsB,OAAOC,SAKhBC,OASIC,EAAc,WAAoD,IAAD,wEAA9CC,EAA8C,KAAnCC,EAAmC,KAChED,EAAUE,QACbtC,EAAWuC,YAAY,IAAKC,UAG9BH,EAAKI,GAAKJ,EAAKlB,EACfkB,EAAKK,GAAKL,EAAKf,GAGXqB,EAAU,WAAoD,IAAD,wEAA9CP,EAA8C,KAAnCC,EAAmC,KACjEA,EAAKI,GAAKL,EAAUjB,EACpBkB,EAAKK,GAAKN,EAAUd,GAGhBsB,EAAY,WAAoD,IAAD,wEAA9CR,EAA8C,KAAnCC,EAAmC,KAC9DD,EAAUE,QACbtC,EAAWuC,YAAY,GAGzBF,EAAKI,GAAK,KACVJ,EAAKK,GAAK,MAGNR,EAAc,WAClB,IAAMW,EAAWpD,EACdkB,UAAkD,UAClDE,KAAK5B,GACF6D,EAAWrD,EACdkB,UAAgD,QAChDE,KAAK5B,GAER4D,EACG/B,QACAnB,OAAO,UACPoB,MAAM8B,GACNjD,KAAK,MAAM,SAACyC,GAAD,OAAUA,EAAKlB,KAC1BvB,KAAK,MAAM,SAACyC,GAAD,OAAUA,EAAKf,KAC1B1B,KAAK,KAAK,kBAAMhB,KAChBgB,KAAK,OAAQ,QACbmD,MAAK,YACJrD,EAAAA,EAAAA,IAAkDsD,MAC/CvC,GAAG,aAAa,WAAmC,IAAD,wEAA3B4B,EAA2B,MACjD3C,EAAAA,EAAAA,IAAO,cAAc2C,EAAKY,OAASC,MAAM,UAAW,MAErDzC,GAAG,cAAc,WAAmC,IAAD,wEAA3B4B,EAA2B,MAClD3C,EAAAA,EAAAA,IAAO,cAAc2C,EAAKY,OAASC,MACjC,UACAtE,SAIPuE,MACCC,EAAAA,EAAAA,OACG3C,GAAG,QAAS0B,GACZ1B,GAAG,OAAQkC,GACXlC,GAAG,MAAOmC,IAGjBE,EACGhC,QACAnB,OAAO,QACPoB,MAAM+B,GACNO,MAAK,SAAChB,GAAD,OAAUA,EAAKiB,MACpB1D,KAAK,KAAK,SAACyC,GAAD,OAAUA,EAAKlB,KACzBvB,KAAK,KAAK,SAACyC,GAAD,OAAUA,EAAKf,KACzB1B,KAAK,QD1OI,6BC4OZiD,EAASb,OAAOC,SAChBa,EAASd,OAAOC,UAGlBxC,EACGkB,UADH,IACiBC,GACdC,KAAK7B,GACL8B,QACAnB,OAAO,YACPC,KAAK,QAASgB,GACdhB,KAAK,aAAc,aACnBA,KAAK,MAAM,uFAAO2D,EAAP,mBAAiDA,KA+C/D9D,EACGgB,GAAG,aAtCe,SAAC+C,GAGpB,GAFA/D,EAAIgE,QDzQY,iCCyQW,IAEvBD,EAAWE,QAAf,CAIA,IAEMC,EAFcH,EAAWtC,OAEP1B,wBAClB2B,EAAIqC,EAAWI,QAAUD,EAAI9B,KAC7BP,EAAIkC,EAAWK,QAAUF,EAAIG,IAEnChE,GAAc,EAEd,IAAMuC,EAAO,CACXiB,GAAIS,OAAOC,aAAalE,GACxBmD,MAAOhE,EAAMgF,OACbC,WAAW,EACXC,GAAI,EACJC,GAAI,EACJjD,EAAAA,EACAG,EAAAA,GAGFrC,EAAMoF,KAAKhC,GAEXrC,EAAWf,MAAMA,GACjBe,EAAWsE,MAAM,IAAK9B,cAWrB/B,GAAG,aARe,WACnB8D,QAAQC,IAAI,mBAQX/D,GAAG,WALa,eAOnBgE,OAAOC,iBAAiB,SA9CV,WACZH,QAAQC,IAAI,YA8CdC,OAAOC,iBAAiB,WAnDR,WACdH,QAAQC,IAAI,eAkEhB,EAba,WACX,IAlRMvF,EAkRAF,EArPC,CACLC,MAhBY,CACZ,CACE6C,MAAM,EACNE,OAAO,EACPX,QAlBEnC,EAAQ,CACZ,CACEqE,GAAI,IACJY,WAAW,GAEb,CACEZ,GAAI,IACJY,WAAW,GAEb,CACEZ,GAAI,IACJY,WAAW,KAOG,GACdhD,OAAQjC,EAAM,IAEhB,CACE4C,MAAM,EACNE,OAAO,EACPX,OAAQnC,EAAM,GACdiC,OAAQjC,EAAM,KAMhBA,MAAAA,GA0PF,OALAJ,EAAY,CACVC,SAAUH,EACVI,YAAAA,IAGK4F,QAAQC,WClTjB,EANgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACd,gBAAC,IAAD,CAAMC,KAAMA,EAAMD,YAAaA,GAC7B,uBAAKvB,GAAI3E","sources":["webpack://demos/./src/demos/vectors/vectors.module.css","webpack://demos/./src/demos/vectors/vectors.ts","webpack://demos/./src/pages/d3js/vectors.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var vectorsChart = \"vectors-module--vectorsChart--2a3f-\";\nexport var active = \"vectors-module--active--Oo1QL\";\nexport var ctrl = \"vectors-module--ctrl--1L0W3\";\nexport var link = \"vectors-module--link--gZdMO\";\nexport var selected = \"vectors-module--selected--31Evy\";\nexport var dragline = \"vectors-module--dragline--3KmwN\";\nexport var hidden = \"vectors-module--hidden--2N0M8\";\nexport var node = \"vectors-module--node--3_GOA\";\nexport var id = \"vectors-module--id--12nlj\";","import {\n  Selection,\n  SimulationNodeDatum,\n  drag,\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./vectors.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\n// missing:\n// - connect nodes\n// - drag node\n// - keys handling\n// old one is in ./vectors-old/vectors-old.js, remove when completed\n\ntype Node = SimulationNodeDatum & {\n  id: string\n  reflexive: boolean\n}\n\ntype Link = {\n  left: boolean\n  right: boolean\n  source: Node\n  target: Node\n}\n\ntype VectorsData = {\n  links: Link[]\n  nodes: Node[]\n}\n\nconst getInitialData = (): VectorsData => {\n  const nodes = [\n    {\n      id: \"A\",\n      reflexive: false,\n    },\n    {\n      id: \"B\",\n      reflexive: false,\n    },\n    {\n      id: \"C\",\n      reflexive: false,\n    },\n  ]\n  const links = [\n    {\n      left: false,\n      right: true,\n      source: nodes[0],\n      target: nodes[1],\n    },\n    {\n      left: false,\n      right: true,\n      source: nodes[1],\n      target: nodes[2],\n    },\n  ]\n\n  return {\n    links,\n    nodes,\n  }\n}\n\nconst setupSVG = (\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n) => {\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"end-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 6)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\n    .attr(\"fill\", \"#000\")\n\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"start-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 4)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M10,-5L0,0L10,5\")\n    .attr(\"fill\", \"#000\")\n}\n\ntype CustomDragEvent = DragEvent & { active: boolean }\n\nconst settings = {\n  circleRadius: 5,\n  defaultTextOpacity: 0.5,\n  strength: -5000,\n  textDY: 5,\n}\n\nconst height = 600\n\ntype RenderGraph = (chartConfig: {\n  rootElId: string\n  vectorsData: VectorsData\n}) => void\n\nconst renderGraph: RenderGraph = ({ rootElId, vectorsData }) => {\n  const { links, nodes } = vectorsData\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.vectorsChart)\n\n  const { width } = rootEl.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  setupSVG(svg)\n\n  // @TODO\n  let lastNodeId = \"C\".charCodeAt(0)\n\n  const updateLinks = () => {\n    const linksEls = svg\n      .selectAll<SVGPathElement, VectorsData[\"links\"]>(`.${styles.link}`)\n      .data(links)\n\n    linksEls\n      .enter()\n      .append<SVGPathElement>(\"path\")\n      .merge(linksEls)\n      .attr(\"d\", (link) => {\n        const deltaX = link.target.x! - link.source.x!\n        const deltaY = link.target.y! - link.source.y!\n        const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const normX = deltaX / dist\n        const normY = deltaY / dist\n        const sourcePadding = link.left ? 17 : 12\n        const targetPadding = link.right ? 17 : 12\n        const sourceX = link.source.x! + sourcePadding * normX\n        const sourceY = link.source.y! + sourcePadding * normY\n        const targetX = link.target.x! - targetPadding * normX\n        const targetY = link.target.y! - targetPadding * normY\n\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`\n      })\n      .attr(\"class\", `${styles.link} ${styles.dragline}`)\n\n    linksEls.exit().remove()\n  }\n\n  const ticked = () => {\n    updateLinks()\n    updateNodes() // eslint-disable-line @typescript-eslint/no-use-before-define\n  }\n\n  const simulation = forceSimulation(nodes)\n    .force(\"charge\", forceManyBody().strength(-50))\n    .force(\"center\", forceCenter(width / 2, height / 2))\n    .force(\"link\", forceLink().links(links).distance(100))\n    .on(\"tick\", ticked)\n\n  const dragstarted = (...[dragEvent, node]: [CustomDragEvent, Node]) => {\n    if (!dragEvent.active) {\n      simulation.alphaTarget(0.3).restart()\n    }\n\n    node.fx = node.x\n    node.fy = node.y\n  }\n\n  const dragged = (...[dragEvent, node]: [CustomDragEvent, Node]) => {\n    node.fx = dragEvent.x\n    node.fy = dragEvent.y\n  }\n\n  const dragended = (...[dragEvent, node]: [CustomDragEvent, Node]) => {\n    if (!dragEvent.active) {\n      simulation.alphaTarget(0)\n    }\n\n    node.fx = null\n    node.fy = null\n  }\n\n  const updateNodes = () => {\n    const nodesEls = svg\n      .selectAll<SVGCircleElement, VectorsData[\"nodes\"]>(\"circle\")\n      .data(nodes)\n    const textsEls = svg\n      .selectAll<SVGTextElement, VectorsData[\"nodes\"]>(\"text\")\n      .data(nodes)\n\n    nodesEls\n      .enter()\n      .append(\"circle\")\n      .merge(nodesEls)\n      .attr(\"cx\", (node) => node.x!)\n      .attr(\"cy\", (node) => node.y!)\n      .attr(\"r\", () => settings.circleRadius)\n      .attr(\"fill\", \"#fff\")\n      .each(function setupMouseHandlers() {\n        select<SVGCircleElement, VectorsData[\"nodes\"][0]>(this)\n          .on(\"mouseover\", (...[, node]: [unknown, Node]) => {\n            select(`#node-text-${node.index}`).style(\"opacity\", 1)\n          })\n          .on(\"mouseleave\", (...[, node]: [unknown, Node]) => {\n            select(`#node-text-${node.index}`).style(\n              \"opacity\",\n              settings.defaultTextOpacity\n            )\n          })\n      })\n      .call(\n        drag<SVGCircleElement, VectorsData[\"nodes\"][0]>()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      )\n\n    textsEls\n      .enter()\n      .append(\"text\")\n      .merge(textsEls)\n      .text((node) => node.id)\n      .attr(\"x\", (node) => node.x!)\n      .attr(\"y\", (node) => node.y!)\n      .attr(\"class\", styles.id)\n\n    nodesEls.exit().remove()\n    textsEls.exit().remove()\n  }\n\n  svg\n    .selectAll(`.${styles.link}`)\n    .data(links)\n    .enter()\n    .append(\"svg:path\")\n    .attr(\"class\", styles.link)\n    .attr(\"marker-end\", \"url(#end)\")\n    .attr(\"id\", (...[, linkIndex]: [unknown, number]) => `link-${linkIndex}`)\n\n  const keydown = () => {\n    console.log(\"keydown\") // eslint-disable-line no-console\n  }\n\n  const keyup = () => {\n    console.log(\"keyup\") // eslint-disable-line no-console\n  }\n\n  const mousedownSVG = (mouseEvent: MouseEvent) => {\n    svg.classed(styles.active, true)\n\n    if (mouseEvent.ctrlKey) {\n      return\n    }\n\n    const eventTarget = mouseEvent.target as HTMLElement\n\n    const dim = eventTarget.getBoundingClientRect()\n    const x = mouseEvent.clientX - dim.left\n    const y = mouseEvent.clientY - dim.top\n\n    lastNodeId += 1\n\n    const node = {\n      id: String.fromCharCode(lastNodeId),\n      index: nodes.length, // eslint-disable-line id-denylist\n      reflexive: false,\n      vx: 0,\n      vy: 0,\n      x,\n      y,\n    }\n\n    nodes.push(node)\n\n    simulation.nodes(nodes)\n    simulation.alpha(0.5).restart()\n  }\n\n  const mousemoveSVG = () => {\n    console.log(\"mousemoveSVG\") // eslint-disable-line no-console\n  }\n\n  const mouseupSVG = () => {}\n\n  svg\n    .on(\"mousedown\", mousedownSVG)\n    .on(\"mousemove\", mousemoveSVG)\n    .on(\"mouseup\", mouseupSVG)\n\n  window.addEventListener(\"keyup\", keyup)\n  window.addEventListener(\"keydown\", keydown)\n}\n\nconst main = () => {\n  const vectorsData = getInitialData()\n\n  renderGraph({\n    rootElId: CONTAINER_ID,\n    vectorsData,\n  })\n\n  return Promise.resolve()\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/vectors/vectors\"\n\nconst Vectors = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Vectors\n"],"names":["CONTAINER_ID","settings","renderGraph","rootElId","vectorsData","links","nodes","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","svg","select","append","attr","setupSVG","lastNodeId","charCodeAt","simulation","forceSimulation","force","forceManyBody","strength","forceCenter","height","forceLink","distance","on","linksEls","selectAll","styles","data","enter","merge","link","deltaX","target","x","source","deltaY","y","dist","Math","sqrt","normX","normY","sourcePadding","left","targetPadding","right","exit","remove","updateNodes","dragstarted","dragEvent","node","active","alphaTarget","restart","fx","fy","dragged","dragended","nodesEls","textsEls","each","this","index","style","call","drag","text","id","linkIndex","mouseEvent","classed","ctrlKey","dim","clientX","clientY","top","String","fromCharCode","length","reflexive","vx","vy","push","alpha","console","log","window","addEventListener","Promise","resolve","pageContext","main"],"sourceRoot":""}