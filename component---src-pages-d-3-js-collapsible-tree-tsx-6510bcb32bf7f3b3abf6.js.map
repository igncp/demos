{"version":3,"file":"component---src-pages-d-3-js-collapsible-tree-tsx-6510bcb32bf7f3b3abf6.js","mappings":"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","sources":["webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.module.css","webpack://demos/./src/pages/d3js/collapsible-tree.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import {\n  HierarchyNode,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  hierarchy,\n  json,\n  linkHorizontal,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport * as styles from \"./collapsible-tree.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype DataNode = {\n  _children: Array<HierarchyPointNode<DataNode>> | undefined\n  children: DataNode[]\n  id: number\n  name: string\n  x: number\n  x0: number\n  y: number\n  y0: number\n}\ntype HierarchyDataNode = HierarchyNode<DataNode>\ntype TreeNode = HierarchyPointNode<DataNode>\ntype TreeLink = HierarchyPointLink<DataNode>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst fetchData = async (): Promise<DataNode> =>\n  json(`${ROOT_PATH}data/d3js/collapsible-tree/data.json`) as Promise<DataNode>\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\ntype RenderChart = (o: { rootData: DataNode; rootElId: string }) => void\n\nconst renderChart: RenderChart = ({ rootData, rootElId }) => {\n  const root = hierarchy<DataNode>(rootData)\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  root.data.x0 = height / 2\n  root.data.y0 = 0\n\n  const tree = treeD3<DataNode>().nodeSize([20, 100])\n\n  const rootTree = tree(root)\n\n  rootTree\n    .descendants()\n    .forEach((...[treeNode, treeNodeIndex]: [TreeNode, number]) => {\n      treeNode.data.id = treeNodeIndex\n      treeNode.data._children = treeNode.children\n\n      if (treeNode.depth) {\n        treeNode.children = undefined\n      }\n    })\n\n  const diagonal = linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((diagonalNode) => diagonalNode.y)\n    .y((diagonalNode) => diagonalNode.x)\n\n  const svg = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${height / 2})`)\n\n  const gLink = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svg\n    .append(\"g\")\n    .attr(\"cursor\", \"pointer\")\n    .attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(root)\n\n    let left = root\n    let right = root\n\n    root.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) {\n        left = node\n      }\n\n      if (node.data.x > right.data.x) {\n        right = node\n      }\n    })\n\n    const node = gNode\n      .selectAll<SVGGElement, TreeNode>(\"g\")\n      .data(nodes, (treeNode) => treeNode.data.id)\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (...[, treeNode]) => {\n        treeNode.children = treeNode.children\n          ? undefined\n          : treeNode.data._children\n\n        update(treeNode)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 2.5)\n      .attr(\"fill\", (treeNode) => (treeNode.data._children ? \"#555\" : \"#999\"))\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", (treeNode) => (treeNode.data._children ? -6 : 6))\n      .attr(\"text-anchor\", (treeNode) =>\n        treeNode.data._children ? \"end\" : \"start\"\n      )\n      .text((treeNode) => treeNode.data.name)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter)\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", (treeNode) => `translate(${treeNode.y},${treeNode.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (treeLink) => treeLink.target.data.id)\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const o = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    link.merge(linkEnter).transition().duration(duration).attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"d\", () => {\n        const o = { x: source.x, y: source.y }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    rootTree.eachBefore((treeNode) => {\n      treeNode.data.x0 = treeNode.x\n      treeNode.data.y0 = treeNode.y\n    })\n  }\n\n  update(rootTree)\n}\n\nconst main = async () => {\n  const rootElId = CONTAINER_ID\n\n  const rootData = await fetchData()\n\n  renderChart({\n    rootData,\n    rootElId,\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var collapsibleTreeChart = \"collapsible-tree-module--collapsibleTreeChart--39sg1\";\nexport var node = \"collapsible-tree-module--node--3s-yN\";\nexport var link = \"collapsible-tree-module--link--tyAR_\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CONTAINER_ID","fetchData","json","ROOT_PATH","margin","duration","height","renderChart","rootData","rootElId","root","hierarchy","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","data","x0","y0","tree","treeD3","nodeSize","rootTree","descendants","forEach","treeNode","treeNodeIndex","id","_children","children","depth","undefined","diagonal","linkHorizontal","x","diagonalNode","y","svg","select","append","attr","gLink","gNode","update","source","nodes","reverse","links","left","right","eachBefore","node","selectAll","nodeEnter","enter","on","text","name","clone","lower","merge","transition","exit","remove","link","treeLink","target","linkEnter","o","pageContext","main","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}