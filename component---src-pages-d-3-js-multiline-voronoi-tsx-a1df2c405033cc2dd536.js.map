{"version":3,"file":"component---src-pages-d-3-js-multiline-voronoi-tsx-a1df2c405033cc2dd536.js","mappings":"wNAEWA,EAAO,wCACP,EAAS,0CACTC,EAAY,6CAEZ,EAAU,2CAEVC,EAAc,+CCanBC,EAAe,QACfC,EAAkB,eAkBlBC,EAAY,QAEZC,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGIC,EACQ,uBADRA,EAEU,SAACC,GAAD,OAA+BA,EAAWC,SAASC,OAAnD,MAFVH,EAGU,SAACC,GACb,IAAMG,EACJL,EAAWE,EAAWG,KAAKC,YADnB,OAEHJ,EAAWG,KAAKE,cAEvB,MAAM,KAAkC,IAA5BL,EAAWM,gBAAsBC,QAAQ,GAArD,OAA8DJ,GAI5DK,EAAS,mCAAG,mGACVC,GAAcC,EAAAA,EAAAA,KAAWb,GACzBc,GAAaC,EAAAA,EAAAA,KAAUf,GAFb,UAISgB,EAAAA,EAAAA,KACpBC,+CALW,cAIVC,EAJU,OAQVC,EAAiBC,OAAOC,KAAKH,EAAU,IAC1CI,KAAI,SAACC,GAAD,OAAOT,EAAWS,MACtBC,OAAOC,QAEJC,EAAiBR,EAAUI,KAAI,SAACK,GACpC,IAAMC,EAAOD,EAAYC,KACtBC,QAAQ,sCAAuC,IAC/CxB,OAEH,MAAO,CACLyB,QAASX,EAAOG,KAAI,SAAChB,GACnB,IAAMyB,EAAUnB,EAAYN,GACgB0B,EAAcL,EAAjDI,GACHtB,EAAyBgB,OAAOO,GAAa,IAEnD,MAAO,CACL5B,SAAUwB,EACVtB,KAAAA,EACAG,eAAAA,MAGJmB,KAAAA,MA7BY,kBAiCT,CAAEF,OAAAA,EAAQP,OAAAA,IAjCD,2CAAH,qDAoCTc,EACI,GADJA,EAEE,GAFFA,EAGG,GAHHA,EAIC,GAmCDC,EAA2B,SAAC,GAAkC,IAAhCR,EAA+B,EAA/BA,OAAQP,EAAuB,EAAvBA,OAAQgB,EAAe,EAAfA,SAC5CC,GAAQC,EAAAA,EAAAA,KAAaC,EAAAA,KAErBC,EAGF,CACFC,aAAa,EACbC,aAAc,MAGVC,EAASC,SAASC,eAAeT,GAEvCO,EAAOG,UAAUC,ID5JgB,0DC8JjC,IAAMC,EACJL,EAAOM,wBAAwBD,MAAQd,EAAcA,EAEjDgB,EAAS,IAAMhB,EAAaA,EAE5BiB,GAASC,EAAAA,EAAAA,MAAYC,MAAM,CAAC,EAAGL,IAC/BM,GAASC,EAAAA,EAAAA,OAAcF,MAAM,CAACH,EAAQ,IAEtCM,EAAmB,SAACpD,GAAD,OAA4B+C,EAAO/C,EAAWG,OACjEkD,EAAmB,SAACrD,GAAD,OACvBkD,EAAOlD,EAAWM,iBAEdgD,EAAyD,GAEzDC,GAAMC,EAAAA,EAAAA,IAAO,IAAIxB,GACpByB,OAAO,OACPC,KAAK,QAASd,EAAQd,EAAcA,GACpC4B,KAAK,SAAUZ,EAAShB,EAAaA,GACrC2B,OAAO,KACPC,KAAK,YALI,aAKsB5B,EALtB,IAKqCA,EALrC,KAOZiB,EAAOY,QAAOC,EAAAA,EAAAA,KAAa5C,IAC3BkC,EACGS,OAAO,CACN,GACAE,EAAAA,EAAAA,KAAItC,GAAQ,SAACuC,GAAD,OACVD,EAAAA,EAAAA,KAAIC,EAAKnC,SAAS,SAAC3B,GAAD,OAA4BA,EAAWM,uBAG5DyD,OAEHR,EACGE,OAAO,KACPC,KAAK,QAAYM,EAFpB,YAGGN,KAAK,YAHR,eAGoCZ,EAHpC,KAIGmB,MAAKC,EAAAA,EAAAA,KAAWnB,IAEnBQ,EACGE,OAAO,KACPC,KAAK,QAAYM,EAFpB,YAGGC,MAAKE,EAAAA,EAAAA,KAASjB,GAAQkB,MAAM,GAAI,MAChCX,OAAO,QACPC,KAAK,IAAK,IACVA,KAAK,KAAM,SACXW,MAAM,cAAe,QACrBC,KAAKvE,GAER,IAAMwE,EAAQhB,EACXE,OAAO,KACPC,KAAK,YAAa,wBAClBA,KAAK,QD5MS,2CCmHD,SAChBH,GAEA,IACMlC,EADOkC,EAAIE,OAAO,QACJA,OAAO,UAAUC,KAAK,KAAM,eAEhDrC,EACGoC,OAAO,kBACPC,KAAK,KAAM,eACXA,KAAK,eAAgB,GAExBrC,EAAOoC,OAAO,YAAYC,KAAK,KAAM,GAAGA,KAAK,KAAM,GACnDrC,EACGoC,OAAO,uBACPA,OAAO,WACPC,KAAK,QAAS,KACdA,KAAK,OAAQ,UAEhB,IAAMc,EAAUnD,EAAOoC,OAAO,WAE9Be,EAAQf,OAAO,eACfe,EAAQf,OAAO,eAAeC,KAAK,KAAM,iBAsEzCe,CAAUlB,GAEV,IAAMmB,GAAOC,EAAAA,EAAAA,OAAqBC,EAAExB,GAAkByB,EAAExB,GAElDyB,EAAgB,SAACC,GACrBxB,EACGE,OAAO,KACPC,KAAK,QAASM,GACdgB,UAAU,QACVC,KAAKF,GACLG,QACAzB,OAAO,QACPC,KAAK,KAAK,SAAsBI,GAG/B,OAFAR,EAAeQ,EAAKrC,MAAQ0D,KAErBT,EAAKZ,EAAKnC,YAElB0C,MAAM,UAAU,uFAAOe,EAAP,YAAsBnD,EAAMmD,EAAUC,eACtDhB,MAAM,UAAU,iBAAM,uBAEzBiB,EAAgBP,IAGZO,EAAkB,SAACP,GA+CvBR,EAAMd,OAAO,UAAUC,KAAK,IAAK,KACjCa,EAAMd,OAAO,QAAQC,KAAK,QAAS,SAASA,KAAK,KAAM,IACvDa,EAAMd,OAAO,QAAQC,KAAK,QAAS,SAASA,KAAK,KAAM,IAEvD,IAAM6B,EAAkBR,EAAWS,QACjC,WAAqB,IAAD,wEAAfC,EAAe,KAAV3B,EAAU,KAKlB,OAJAA,EAAKnC,QAAQ+D,SAAQ,SAAC1F,GACpByF,EAAIE,KAAK3F,MAGJyF,IAET,IAGIG,EAAUC,EAAAA,EAAAA,KACdN,EACAnC,EACAC,GACAuC,QAAQ,EACP9D,GACAA,EACDc,EAAQd,EACRgB,EAAShB,IAGXM,EAAME,aAAeiB,EAAIE,OAAO,KAAKC,KAAK,QAASM,GAEnD5B,EAAME,aACH0C,UAAU,QACVC,KAAKM,GACLL,QACAzB,OAAO,QACPC,KAAK,KAAK,uFAAO0B,EAAP,YAAsBQ,EAAQE,WAAWV,MACnDW,GAAG,aAhFY,WAA+C,IAAD,wEAAvC/F,EAAuC,KAC/BgG,EAAa1C,EAAnCtD,EAAWC,WAEpBuD,EAAAA,EAAAA,IAAOwC,GAAUC,QAAQjC,GAAkB,GACzCgC,EAASE,WAA2BC,YAAYH,GAElDzB,EAAMb,KACJ,YADF,aAEeN,EAAiBpD,GAFhC,IAE+CqD,EAC3CrD,GAHJ,KAOAuE,EAAMf,OAAO,UAAUc,KAAKvE,EAAmBC,IAC/CuE,EAAMf,OAAO,UAAUc,KAAKvE,EAAmBC,OAmE9C+F,GAAG,YAhEW,WAA+C,IAAD,wEAAvC/F,EAAuC,KAC9BgG,EAAa1C,EAAnCtD,EAAWC,UAIpB,OAFAuD,EAAAA,EAAAA,IAAOwC,GAAUC,QAAQjC,GAAkB,GAEpCO,EAAMb,KAAK,YAAa,2BA4D9BqC,GAAG,SAzDU,WAA+C,IAAD,wEAAvC/F,EAAuC,KAC5DoC,EAAMC,aAAeD,EAAMC,aAE3B2C,EAAAA,EAAAA,KAAU,IAAIhB,GAAiBoC,UAC/BpB,EAAAA,EAAAA,KAAU,IAAIhB,GAAkBoC,SAEhC,IAAMC,EACAjE,EAAMC,YAKD,CAJMd,EAAO+E,MAClB,SAACC,GAAD,OAAOA,EAAE9E,OAASzB,EAAWC,aAM1BsB,EAGTuD,EAAcuB,OA4ClB,OAFAvB,EAAcvD,GAEP,CACLiF,WAAY,SAACC,GACXrE,EAAME,aAAc2D,QD7TD,+CC6T6BQ,MAKhDC,EAAI,mCAAG,uGACL1E,EAAWrC,EADN,SAGsBa,IAHtB,gBAGHe,EAHG,EAGHA,OAAQP,EAHL,EAGKA,OAHL,EAKYe,EAAY,CACjCR,OAAAA,EACAP,OAAAA,EACAgB,SAAAA,IAHMwE,EALG,EAKHA,WAMFG,EAAOnE,SAASC,eAAeuB,GACvBxB,SAASC,eAAeT,GAEhCmE,YAAYQ,IAElBnD,EAAAA,EAAAA,IAAO,iBACJoD,SAAS,YAAY,GACrBb,GAAG,UAAU,SAACc,GACbL,EAAYK,EAAWC,OAA4BL,UAAW,MAnBvD,4CAAH,qDAyBV,IC5UA,EAVyB,SAAC,GAAD,IAAGM,EAAH,EAAGA,YAAH,OACvB,gBAAC,IAAD,CAAML,KAAMA,EAAMK,YAAaA,GAC7B,wBAAMC,GAAIhD,GACR,yBAAOgD,GAAIpH,EAAiBqH,KAAK,aAAc,IAC/C,yBAAOC,QAAStH,GAAhB,uBAEF,uBAAKoH,GAAIrH","sources":["webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.module.css","webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.ts","webpack://demos/./src/pages/d3js/multiline-voronoi.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var multilineVoronoiChart = \"multiline-voronoi-module--multilineVoronoiChart--706ac\";\nexport var axis = \"multiline-voronoi-module--axis--73b38\";\nexport var cities = \"multiline-voronoi-module--cities--20a16\";\nexport var cityHover = \"multiline-voronoi-module--cityHover--07ec8\";\nexport var focus = \"multiline-voronoi-module--focus--c97ba\";\nexport var voronoi = \"multiline-voronoi-module--voronoi--c0339\";\nexport var voronoiShow = \"multiline-voronoi-module--voronoiShow--cb86f\";\nexport var formVoronoi = \"multiline-voronoi-module--formVoronoi--b33e2\";","import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  line as lineD3,\n  max,\n  scaleLinear,\n  scaleOrdinal,\n  scaleTime,\n  schemePastel2,\n  select,\n  selectAll,\n  timeFormat,\n  timeParse,\n  tsv,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./multiline-voronoi.module.css\"\n\nconst CONTAINER_ID = \"chart\"\nconst SHOW_VORONOI_ID = \"show-voronoi\"\n\ntype InitialDataItem = {\n  [monthKey: string]: string\n  name: string\n}\n\ntype CityMetric = {\n  cityName: string\n  date: Date\n  employmentRate: number\n}\n\ntype City = {\n  metrics: CityMetric[]\n  name: string\n}\n\nconst formatStr = \"%Y-%m\"\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nconst texts = {\n  chartTitle: \"US Unemployment Rate\",\n  tooltipPart1: (cityMetric: CityMetric) => `${cityMetric.cityName.trim()}: `,\n  tooltipPart2: (cityMetric: CityMetric) => {\n    const date = `${\n      monthNames[cityMetric.date.getMonth()]\n    } of ${cityMetric.date.getFullYear()}`\n\n    return ` ${(cityMetric.employmentRate * 100).toFixed(2)}% - ${date}`\n  },\n}\n\nconst fetchData = async () => {\n  const monthFormat = timeFormat(formatStr)\n  const monthParse = timeParse(formatStr)\n\n  const dataItems = (await tsv(\n    `${ROOT_PATH}data/d3js/multiline-voronoi/data.tsv`\n  )) as unknown as InitialDataItem[]\n\n  const months: Date[] = Object.keys(dataItems[0])\n    .map((v) => monthParse(v)!)\n    .filter(Number)\n\n  const cities: City[] = dataItems.map((initialCity: InitialDataItem) => {\n    const name = initialCity.name\n      .replace(/(msa|necta div|met necta|met div)$/i, \"\")\n      .trim()\n\n    return {\n      metrics: months.map((date: Date) => {\n        const itemKey = monthFormat(date)\n        const { [itemKey as keyof InitialDataItem]: itemValue } = initialCity\n        const employmentRate: number = Number(itemValue) / 100\n\n        return {\n          cityName: name,\n          date,\n          employmentRate,\n        }\n      }),\n      name,\n    }\n  })\n\n  return { cities, months }\n}\n\nconst margin = {\n  bottom: 70,\n  left: 80,\n  right: 70,\n  top: 60,\n}\n\ntype RenderChart = (chartConfig: {\n  cities: City[]\n  months: Date[]\n  rootElId: string\n}) => {\n  setVoronoi: (v: boolean) => void\n}\n\nconst addFilter = (\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", \"drop-shadow\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 1)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \"1\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst renderChart: RenderChart = ({ cities, months, rootElId }) => {\n  const color = scaleOrdinal(schemePastel2)\n\n  const state: {\n    clickToggle: boolean\n    voronoiGroup: Selection<SVGGElement, unknown, HTMLElement, unknown> | null\n  } = {\n    clickToggle: false,\n    voronoiGroup: null,\n  }\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.multilineVoronoiChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const height = 500 - margin.top - margin.bottom\n\n  const xScale = scaleTime().range([0, width])\n  const yScale = scaleLinear().range([height, 0])\n\n  const lineXTransformer = (cityMetric: CityMetric) => xScale(cityMetric.date)\n  const lineYTransformer = (cityMetric: CityMetric) =>\n    yScale(cityMetric.employmentRate)\n\n  const cityNameToLine: { [cityName: string]: SVGPathElement } = {}\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  xScale.domain(extent<Date>(months) as [Date, Date])\n  yScale\n    .domain([\n      0,\n      max(cities, (city: City) =>\n        max(city.metrics, (cityMetric: CityMetric) => cityMetric.employmentRate)\n      ) as number,\n    ])\n    .nice()\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.axis} axis--x`)\n    .attr(\"transform\", `translate(0,${height})`)\n    .call(axisBottom(xScale))\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.axis} axis--y`)\n    .call(axisLeft(yScale).ticks(10, \"%\"))\n    .append(\"text\")\n    .attr(\"x\", 20)\n    .attr(\"dy\", \".32em\")\n    .style(\"font-weight\", \"bold\")\n    .text(texts.chartTitle)\n\n  const focus = svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(-100,-100)\")\n    .attr(\"class\", styles.focus)\n\n  addFilter(svg)\n\n  const line = lineD3<CityMetric>().x(lineXTransformer).y(lineYTransformer)\n\n  const generateLines = (usedCities: City[]) => {\n    svg\n      .append(\"g\")\n      .attr(\"class\", styles.cities)\n      .selectAll(\"path\")\n      .data(usedCities)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", function generateLine(city: City) {\n        cityNameToLine[city.name] = this\n\n        return line(city.metrics)\n      })\n      .style(\"stroke\", (...[, cityIndex]) => color(cityIndex.toString()))\n      .style(\"filter\", () => \"url(#drop-shadow)\")\n\n    generateVoronoi(usedCities) // eslint-disable-line @typescript-eslint/no-use-before-define\n  }\n\n  const generateVoronoi = (usedCities: City[]) => {\n    const mouseover = (...[, cityMetric]: [unknown, CityMetric]) => {\n      const { [cityMetric.cityName]: linePath } = cityNameToLine\n\n      select(linePath).classed(styles.cityHover, true)\n      ;(linePath.parentNode as SVGGElement).appendChild(linePath)\n\n      focus.attr(\n        \"transform\",\n        `translate(${lineXTransformer(cityMetric)},${lineYTransformer(\n          cityMetric\n        )})`\n      )\n\n      focus.select(\".text1\").text(texts.tooltipPart1(cityMetric))\n      focus.select(\".text2\").text(texts.tooltipPart2(cityMetric))\n    }\n\n    const mouseout = (...[, cityMetric]: [unknown, CityMetric]) => {\n      const { [cityMetric.cityName]: linePath } = cityNameToLine\n\n      select(linePath).classed(styles.cityHover, false)\n\n      return focus.attr(\"transform\", \"translate(-100,-100)\")\n    }\n\n    const clicked = (...[, cityMetric]: [unknown, CityMetric]) => {\n      state.clickToggle = !state.clickToggle\n\n      selectAll(`.${styles.cities}`).remove()\n      selectAll(`.${styles.voronoi}`).remove()\n\n      const inputData: City[] = (() => {\n        if (state.clickToggle) {\n          const city = cities.find(\n            (c) => c.name === cityMetric.cityName\n          ) as City\n\n          return [city]\n        }\n\n        return cities\n      })()\n\n      generateLines(inputData)\n    }\n\n    focus.append(\"circle\").attr(\"r\", 3.5)\n    focus.append(\"text\").attr(\"class\", \"text1\").attr(\"y\", -30)\n    focus.append(\"text\").attr(\"class\", \"text2\").attr(\"y\", -10)\n\n    const flatCityMetrics = usedCities.reduce<CityMetric[]>(\n      (...[acc, city]) => {\n        city.metrics.forEach((cityMetric) => {\n          acc.push(cityMetric)\n        })\n\n        return acc\n      },\n      []\n    )\n\n    const voronoi = Delaunay.from(\n      flatCityMetrics,\n      lineXTransformer,\n      lineYTransformer\n    ).voronoi([\n      -margin.left,\n      -margin.top,\n      width + margin.right,\n      height + margin.bottom,\n    ])\n\n    state.voronoiGroup = svg.append(\"g\").attr(\"class\", styles.voronoi)\n\n    state.voronoiGroup\n      .selectAll(\"path\")\n      .data(flatCityMetrics)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (...[, cityIndex]) => voronoi.renderCell(cityIndex))\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseout\", mouseout)\n      .on(\"click\", clicked)\n  }\n\n  generateLines(cities)\n\n  return {\n    setVoronoi: (checked: boolean) => {\n      state.voronoiGroup!.classed(styles.voronoiShow, checked)\n    },\n  }\n}\n\nconst main = async () => {\n  const rootElId = CONTAINER_ID\n\n  const { cities, months } = await fetchData()\n\n  const { setVoronoi } = renderChart({\n    cities,\n    months,\n    rootElId,\n  })\n\n  const form = document.getElementById(styles.formVoronoi) as HTMLElement\n  const chart = document.getElementById(rootElId) as HTMLElement\n\n  chart.appendChild(form)\n\n  select(`#${SHOW_VORONOI_ID}`)\n    .property(\"disabled\", false)\n    .on(\"change\", (mouseEvent: MouseEvent) => {\n      setVoronoi((mouseEvent.target as HTMLInputElement).checked || false)\n    })\n}\n\nexport { CONTAINER_ID, SHOW_VORONOI_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  SHOW_VORONOI_ID,\n} from \"@/demos/multiline-voronoi/multiline-voronoi\"\nimport * as styles from \"@/demos/multiline-voronoi/multiline-voronoi.module.css\"\n\nconst MultilineVoronoi = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form id={styles.formVoronoi}>\n      <input id={SHOW_VORONOI_ID} type=\"checkbox\" />{\" \"}\n      <label htmlFor={SHOW_VORONOI_ID}>Show Voronoi lines</label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MultilineVoronoi\n"],"names":["axis","cityHover","formVoronoi","CONTAINER_ID","SHOW_VORONOI_ID","formatStr","monthNames","texts","cityMetric","cityName","trim","date","getMonth","getFullYear","employmentRate","toFixed","fetchData","monthFormat","timeFormat","monthParse","timeParse","tsv","ROOT_PATH","dataItems","months","Object","keys","map","v","filter","Number","cities","initialCity","name","replace","metrics","itemKey","itemValue","margin","renderChart","rootElId","color","scaleOrdinal","schemePastel2","state","clickToggle","voronoiGroup","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","height","xScale","scaleTime","range","yScale","scaleLinear","lineXTransformer","lineYTransformer","cityNameToLine","svg","select","append","attr","domain","extent","max","city","nice","styles","call","axisBottom","axisLeft","ticks","style","text","focus","feMerge","addFilter","line","lineD3","x","y","generateLines","usedCities","selectAll","data","enter","this","cityIndex","toString","generateVoronoi","flatCityMetrics","reduce","acc","forEach","push","voronoi","Delaunay","renderCell","on","linePath","classed","parentNode","appendChild","remove","inputData","find","c","setVoronoi","checked","main","form","property","mouseEvent","target","pageContext","id","type","htmlFor"],"sourceRoot":""}