{"version":3,"sources":["webpack://demos/./src/demos/moving-line/moving-line.js","webpack://demos/./src/pages/raphael/moving-line.js"],"names":["Raphael","window","require","$","ajax","ROOT_PATH","done","graphData","advanceGraph","current","charts","length","animateChart","drawPoints","data","points","i","xPos","xOffset","xDelta","yPos","yOffset","circle","paper","node","className","baseVal","attr","point","newData","newPath","upperLimit","parseInt","upper","lowerLimit","lower","scaleFactor","value","animate","cy","childNodes","remove","line","path","createPathString","width","setInterval","initLineGraph","demoInfo","pageContext","main","id"],"mappings":"wKAAMA,EAA4B,oBAAXC,OAAyB,KAAOC,EAAQ,MA4H/D,EA1Ha,WACXC,EAAEC,KAAQC,6CAA+CC,MAAK,SAACC,GAC7D,IAiBMC,EAAe,WAOnB,OANID,EAAUE,QAAUF,EAAUG,OAAOC,OAAS,EAChDJ,EAAUE,UAEVF,EAAUE,QAAU,EAGfG,EAAaL,EAAWA,EAAUG,OAAOH,EAAUE,WAGtDI,EAAa,SAAUC,GAQ3B,IAPA,IACQC,EAAWD,EAAKJ,OAAO,GAAvBK,OAEJC,EAAI,EAEAL,EAAWI,EAAXJ,OAEDK,EAAIL,GAAQ,CACjB,IAAMM,EAAOH,EAAKI,QAAUF,EAAIF,EAAKK,OAC/BC,EAAON,EAAKO,QAEZC,EAASR,EAAKS,MAAMD,OAAOL,EAAMG,EAX1B,GAabE,EAAOE,KAAKC,UAAUC,QAAU,QAChCJ,EAAOK,KAAK,QAAZ,YACAZ,EAAOC,GAAGY,MAAQN,EAClBN,MAIEJ,EAAe,SAAUE,EAAMe,GAanC,IAZA,IAAIC,EAAU,GAERC,EAAaC,SAASH,EAAQI,QAAU,EACxCC,EAAaF,SAASH,EAAQM,QAAU,EACxCC,EAActB,EAAKO,SAAWU,EAAaG,GAEzCnB,EAAWD,EAAKJ,OAAO,GAAvBK,OAEJC,EAAI,EAEAL,EAAWI,EAAXJ,OAEDK,EAAIL,GACC,IAANK,GACFc,GAAW,KACXA,GAAchB,EAAKI,QAAZ,IACPY,GACEhB,EAAKO,SAAWQ,EAAQd,OAAOC,GAAGqB,MAAQH,GAAcE,EADnD,MAIPN,GAAW,KACXA,GAAchB,EAAKI,QAAUF,EAAIF,EAAKK,OAA/B,IACPW,GACEhB,EAAKO,SAAWQ,EAAQd,OAAOC,GAAGqB,MAAQH,GAAcE,GAG5DrB,EAAOC,GAAGY,MAAMU,QACd,CACEC,GACEzB,EAAKO,SACJQ,EAAQd,OAAOC,GAAGqB,MAAQH,GAAcE,GAE7C,IACA,eAEFrB,EAAOC,GAAGY,MAAMJ,KAAKgB,WAAW,GAAGC,SACnC1B,EAAOC,GAAGY,MAAMD,KAAK,QAArB,UAAwCE,EAAQd,OAAOC,GAAGqB,OAC1DrB,IAGF,OAAOF,EAAK4B,KAAKJ,QACf,CACEK,KAAMb,GAER,IACA,gBAIEc,EAAmB,SAAU9B,GAQjC,IAPA,IAAQC,EAAWD,EAAKJ,OAAOI,EAAKL,SAA5BM,OAEJ4B,EAAI,KAAQ7B,EAAKI,QAAb,KAAwBJ,EAAKO,QAAUN,EAAO,GAAGsB,OACrDrB,EAAI,EAEAL,EAAWI,EAAXJ,OAEDK,EAAIL,GACTgC,GAAQ,MACRA,GAAW7B,EAAKI,QAAUF,EAAIF,EAAKK,OAA/B,IACJwB,GAAQ7B,EAAKO,QAAUN,EAAOC,GAAGqB,MACjCrB,IAGF,OAAO2B,IAjHa,WACpB,IAAME,EAAQ1C,EAAE,UAAU0C,QAEpBtB,EAAQvB,EAAQ,QAAS6C,EADhB,KAGftC,EAAUgB,MAAQA,EAElB,IAAMoB,EAAOC,EAAiBrC,GAExBmC,EAAOnB,EAAMoB,KAAKA,GAExBpC,EAAUmC,KAAOA,EACjB7B,EAAWN,GAEXuC,YAAYtC,EAAc,KAsG5BuC,OC3GJ,EANqB,SAAC,GAAD,IAAkBC,EAAlB,EAAGC,YAAeD,SAAlB,OACnB,gBAAC,IAAD,CAAMA,SAAUA,EAAUE,KAAMA,GAC9B,uBAAKzB,UAAU,oBAAoB0B,GAAG","file":"component---src-pages-raphael-moving-line-js-2845ca09dcd85f27d3e2.js","sourcesContent":["const Raphael = typeof window === \"undefined\" ? null : require(\"raphael\")\n\nconst main = () => {\n  $.ajax(`${ROOT_PATH}data/raphael/moving-line/data.json`).done((graphData) => {\n    const initLineGraph = function () {\n      const width = $(\"#chart\").width()\n      const height = 300\n      const paper = Raphael(\"chart\", width, height)\n\n      graphData.paper = paper\n\n      const path = createPathString(graphData)\n\n      const line = paper.path(path)\n\n      graphData.line = line\n      drawPoints(graphData)\n\n      setInterval(advanceGraph, 3000)\n    }\n\n    const advanceGraph = function () {\n      if (graphData.current < graphData.charts.length - 1) {\n        graphData.current++\n      } else {\n        graphData.current = 1\n      }\n\n      return animateChart(graphData, graphData.charts[graphData.current])\n    }\n\n    const drawPoints = function (data) {\n      const radius = 6\n      const { points } = data.charts[0]\n\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        const xPos = data.xOffset + i * data.xDelta\n        const yPos = data.yOffset\n\n        const circle = data.paper.circle(xPos, yPos, radius)\n\n        circle.node.className.baseVal = \"point\"\n        circle.attr(\"title\", `Value: ${0}`)\n        points[i].point = circle\n        i++\n      }\n    }\n\n    const animateChart = function (data, newData) {\n      let newPath = \"\"\n\n      const upperLimit = parseInt(newData.upper) || 1\n      const lowerLimit = parseInt(newData.lower) || 0\n      const scaleFactor = data.yOffset / (upperLimit - lowerLimit)\n\n      const { points } = data.charts[0]\n\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        if (i === 0) {\n          newPath += \"M \"\n          newPath += `${data.xOffset} `\n          newPath += `${\n            data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor\n          } `\n        } else {\n          newPath += \"L \"\n          newPath += `${data.xOffset + i * data.xDelta} `\n          newPath +=\n            data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor\n        }\n\n        points[i].point.animate(\n          {\n            cy:\n              data.yOffset -\n              (newData.points[i].value - lowerLimit) * scaleFactor,\n          },\n          800,\n          \"ease-in-out\"\n        )\n        points[i].point.node.childNodes[0].remove()\n        points[i].point.attr(\"title\", `Value: ${newData.points[i].value}`)\n        i++\n      }\n\n      return data.line.animate(\n        {\n          path: newPath,\n        },\n        800,\n        \"ease-in-out\"\n      )\n    }\n\n    const createPathString = function (data) {\n      const { points } = data.charts[data.current]\n\n      let path = `M ${data.xOffset} ${data.yOffset - points[0].value}`\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        path += \" L \"\n        path += `${data.xOffset + i * data.xDelta} `\n        path += data.yOffset - points[i].value\n        i++\n      }\n\n      return path\n    }\n\n    initLineGraph()\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/moving-line/moving-line\"\nimport \"@/demos/moving-line/moving-line.styl\"\n\nconst CircularArcs = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"moving-line-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n"],"sourceRoot":""}