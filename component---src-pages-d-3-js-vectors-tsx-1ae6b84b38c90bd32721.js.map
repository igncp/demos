{"version":3,"sources":["webpack://demos/./src/demos/vectors/vectors.module.css","webpack://demos/./src/demos/vectors/vectors.ts","webpack://demos/./src/pages/d3js/vectors.tsx"],"names":["settings","renderGraph","data","rootElId","links","nodes","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","svg","select","append","attr","setupSVG","lastNodeId","charCodeAt","simulation","forceSimulation","force","forceManyBody","strength","forceCenter","height","forceLink","distance","on","linksEls","selectAll","styles","enter","merge","d","deltaX","target","x","source","deltaY","y","dist","Math","sqrt","normX","normY","sourcePadding","left","targetPadding","right","exit","remove","updateNodes","dragstarted","event","active","alphaTarget","restart","fx","fy","dragged","dragended","nodesEls","textsEls","each","this","_ev","index","style","call","drag","text","id","mousedownLink","mousedownNode","mouseupNode","_d","i","evt","classed","ctrlKey","dim","clientX","clientY","top","node","String","fromCharCode","length","reflexive","vx","vy","push","alpha","console","log","window","addEventListener","Promise","resolve","pageContext","main","scripts"],"mappings":"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","file":"component---src-pages-d-3-js-vectors-tsx-1ae6b84b38c90bd32721.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport var vectorsChart = \"vectors-module--vectorsChart--2a3f-\";\nexport var active = \"vectors-module--active--Oo1QL\";\nexport var ctrl = \"vectors-module--ctrl--1L0W3\";\nexport var link = \"vectors-module--link--gZdMO\";\nexport var selected = \"vectors-module--selected--31Evy\";\nexport var dragline = \"vectors-module--dragline--3KmwN\";\nexport var hidden = \"vectors-module--hidden--2N0M8\";\nexport var node = \"vectors-module--node--3_GOA\";\nexport var id = \"vectors-module--id--12nlj\";","import {\n  Selection,\n  SimulationNodeDatum,\n  drag,\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./vectors.module.css\"\n\n// missing:\n// - connect nodes\n// - drag node\n// - keys handling\n// old one is in ./vectors-old/vectors-old.js, remove when completed\n\ntype Node = SimulationNodeDatum & {\n  id: string\n  reflexive: boolean\n}\n\ntype Link = {\n  left: boolean\n  right: boolean\n  source: Node\n  target: Node\n}\n\ntype Data = {\n  links: Link[]\n  nodes: Node[]\n}\n\nconst getInitialData = (): Data => {\n  const nodes = [\n    {\n      id: \"A\",\n      reflexive: false,\n    },\n    {\n      id: \"B\",\n      reflexive: false,\n    },\n    {\n      id: \"C\",\n      reflexive: false,\n    },\n  ]\n  const links = [\n    {\n      left: false,\n      right: true,\n      source: nodes[0],\n      target: nodes[1],\n    },\n    {\n      left: false,\n      right: true,\n      source: nodes[1],\n      target: nodes[2],\n    },\n  ]\n\n  return {\n    links,\n    nodes,\n  }\n}\n\nconst setupSVG = (\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n) => {\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"end-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 6)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\n    .attr(\"fill\", \"#000\")\n\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"start-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 4)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M10,-5L0,0L10,5\")\n    .attr(\"fill\", \"#000\")\n}\n\ntype CustomDragEvent = DragEvent & { active: boolean }\n\nconst settings = {\n  circleRadius: 5,\n  defaultTextOpacity: 0.5,\n  strength: -5000,\n  textDY: 5,\n}\n\nconst height = 600\n\ntype RenderGraph = (o: { data: Data; rootElId: string }) => void\n\nconst renderGraph: RenderGraph = ({ data, rootElId }) => {\n  const { links, nodes } = data\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.vectorsChart)\n\n  const { width } = rootEl.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  setupSVG(svg)\n\n  // @TODO\n  let lastNodeId = \"C\".charCodeAt(0)\n\n  const updateLinks = () => {\n    const linksEls = svg\n      .selectAll<SVGPathElement, Data[\"links\"]>(`.${styles.link}`)\n      .data(links)\n\n    linksEls\n      .enter()\n      .append<SVGPathElement>(\"path\")\n      .merge(linksEls)\n      .attr(\"d\", (d) => {\n        const deltaX = d.target.x! - d.source.x!\n        const deltaY = d.target.y! - d.source.y!\n        const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const normX = deltaX / dist\n        const normY = deltaY / dist\n        const sourcePadding = d.left ? 17 : 12\n        const targetPadding = d.right ? 17 : 12\n        const sourceX = d.source.x! + sourcePadding * normX\n        const sourceY = d.source.y! + sourcePadding * normY\n        const targetX = d.target.x! - targetPadding * normX\n        const targetY = d.target.y! - targetPadding * normY\n\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`\n      })\n      .attr(\"class\", `${styles.link} ${styles.dragline}`)\n\n    linksEls.exit().remove()\n  }\n\n  const ticked = () => {\n    updateLinks()\n    updateNodes() // eslint-disable-line @typescript-eslint/no-use-before-define\n  }\n\n  const simulation = forceSimulation(nodes)\n    .force(\"charge\", forceManyBody().strength(-50))\n    .force(\"center\", forceCenter(width / 2, height / 2))\n    .force(\"link\", forceLink().links(links).distance(100))\n    .on(\"tick\", ticked)\n\n  const dragstarted = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) {\n      simulation.alphaTarget(0.3).restart()\n    }\n\n    d.fx = d.x\n    d.fy = d.y\n  }\n\n  const dragged = (event: CustomDragEvent, d: Node) => {\n    d.fx = event.x\n    d.fy = event.y\n  }\n\n  const dragended = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) {\n      simulation.alphaTarget(0)\n    }\n\n    d.fx = null\n    d.fy = null\n  }\n\n  const updateNodes = () => {\n    const nodesEls = svg\n      .selectAll<SVGCircleElement, Data[\"nodes\"]>(\"circle\")\n      .data(nodes)\n    const textsEls = svg\n      .selectAll<SVGTextElement, Data[\"nodes\"]>(\"text\")\n      .data(nodes)\n\n    nodesEls\n      .enter()\n      .append(\"circle\")\n      .merge(nodesEls)\n      .attr(\"cx\", (d) => d.x!)\n      .attr(\"cy\", (d) => d.y!)\n      .attr(\"r\", () => settings.circleRadius)\n      .attr(\"fill\", \"#fff\")\n      .each(function () {\n        select<SVGCircleElement, Data[\"nodes\"][0]>(this)\n          .on(\"mouseover\", (_ev, d) => {\n            select(`#node-text-${d.index}`).style(\"opacity\", 1)\n          })\n          .on(\"mouseleave\", (_ev, d) => {\n            select(`#node-text-${d.index}`).style(\n              \"opacity\",\n              settings.defaultTextOpacity\n            )\n          })\n      })\n      .call(\n        drag<SVGCircleElement, Data[\"nodes\"][0]>()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      )\n\n    textsEls\n      .enter()\n      .append(\"text\")\n      .merge(textsEls)\n      .text((d) => d.id)\n      .attr(\"x\", (d) => d.x!)\n      .attr(\"y\", (d) => d.y!)\n      .attr(\"class\", styles.id)\n\n    nodesEls.exit().remove()\n    textsEls.exit().remove()\n  }\n\n  let mousedownLink: any = null\n  let mousedownNode: any = null\n  let mouseupNode: any = null\n\n  const resetMouseVars = () => {\n    mousedownNode = null\n    mouseupNode = null\n    mousedownLink = null\n  }\n\n  svg\n    .selectAll(`.${styles.link}`)\n    .data(links)\n    .enter()\n    .append(\"svg:path\")\n    .attr(\"class\", styles.link)\n    .attr(\"marker-end\", \"url(#end)\")\n    .attr(\"id\", (_d, i) => `link-${i}`)\n\n  const keydown = function () {\n    console.log(\"keydown\") // eslint-disable-line no-console\n  }\n\n  const keyup = function () {\n    console.log(\"keyup\") // eslint-disable-line no-console\n  }\n\n  const mousedownSVG = (evt: any) => {\n    svg.classed(styles.active, true)\n\n    if (evt.ctrlKey || mousedownNode || mousedownLink) {\n      return\n    }\n\n    const { target: e } = evt\n\n    const dim = e.getBoundingClientRect()\n    const x = evt.clientX - dim.left\n    const y = evt.clientY - dim.top\n\n    lastNodeId += 1\n\n    const node = {\n      id: String.fromCharCode(lastNodeId),\n      index: nodes.length,\n      reflexive: false,\n      vx: 0,\n      vy: 0,\n      x,\n      y,\n    }\n\n    nodes.push(node)\n\n    simulation.nodes(nodes)\n    simulation.alpha(0.5).restart()\n  }\n\n  const mousemoveSVG = () => {\n    console.log(\"mousemoveSVG\") // eslint-disable-line no-console\n  }\n\n  const mouseupSVG = () => {\n    console.log(\"mouseupSVG\", mouseupNode) // eslint-disable-line no-console\n    resetMouseVars()\n  }\n\n  svg\n    .on(\"mousedown\", mousedownSVG)\n    .on(\"mousemove\", mousemoveSVG)\n    .on(\"mouseup\", mouseupSVG)\n\n  window.addEventListener(\"keyup\", keyup)\n  window.addEventListener(\"keydown\", keydown)\n}\n\nconst main = () => {\n  const data = getInitialData()\n\n  renderGraph({\n    data,\n    rootElId: \"chart\",\n  })\n\n  return Promise.resolve()\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/vectors/vectors\"\n\nconst Vectors = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/d3/d3.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Vectors\n"],"sourceRoot":""}