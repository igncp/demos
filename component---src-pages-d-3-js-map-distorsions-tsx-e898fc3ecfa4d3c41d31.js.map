{"version":3,"file":"component---src-pages-d-3-js-map-distorsions-tsx-e898fc3ecfa4d3c41d31.js","mappings":"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","sources":["webpack://demos/./src/demos/map-distorsions/lines-chart-drag.ts","webpack://demos/./src/demos/map-distorsions/map-distorsions.module.css","webpack://demos/./src/demos/map-distorsions/lines-chart.ts","webpack://demos/./src/demos/map-distorsions/chart-config.ts","webpack://demos/./src/demos/map-distorsions/ui-constants.ts","webpack://demos/./src/demos/map-distorsions/map-distorsions.ts","webpack://demos/./src/pages/d3js/map-distorsions.tsx"],"sourcesContent":["import { D3DragEvent, Selection, drag as dragD3 } from \"d3\"\n\nclass DragModule<DragDatum> {\n  private readonly elements: {\n    chart: Selection<SVGGElement, DragDatum, HTMLElement, unknown>\n    dragArea: Selection<SVGGElement, DragDatum, HTMLElement, unknown>\n    svg: Selection<SVGSVGElement, DragDatum, HTMLElement, unknown>\n  }\n\n  private readonly state: {\n    dragX: number\n    marginLeft: number\n    width: number\n  } = {\n    dragX: 0,\n    marginLeft: 0,\n    width: 0,\n  }\n\n  public constructor({\n    chart,\n    dragArea,\n    svg,\n  }: DragModule<DragDatum>[\"elements\"]) {\n    this.elements = {\n      chart,\n      dragArea,\n      svg,\n    }\n  }\n\n  public setDimensions({\n    marginLeft,\n    width,\n  }: {\n    marginLeft: number\n    width: number\n  }) {\n    this.state.width = width\n    this.state.marginLeft = marginLeft\n  }\n\n  public refresh() {\n    const {\n      elements: { svg },\n    } = this\n\n    const diffWidth = this.getDragDiffWidth()\n\n    svg.style(\"cursor\", diffWidth > 0 ? \"move\" : \"default\")\n  }\n\n  public reset() {\n    this.refresh()\n\n    const {\n      elements: { svg },\n    } = this\n\n    this.state.dragX = 0\n\n    const handler = (\n      dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>\n    ) => {\n      this.state.dragX += dragEvent.dx\n\n      const diffWidth = this.getDragDiffWidth()\n\n      if (diffWidth > 0) {\n        this.state.dragX = Math.min(this.state.dragX, 0)\n        this.state.dragX = Math.max(this.state.dragX, -diffWidth)\n      } else {\n        this.state.dragX = 0\n      }\n\n      this.updateDrag()\n    }\n\n    const dragBehavior = dragD3<SVGSVGElement, DragDatum>().on(\"drag\", handler)\n\n    this.updateDrag()\n\n    svg.call(dragBehavior).on(\"drag\", handler)\n  }\n\n  private updateDrag() {\n    this.elements.dragArea.attr(\"transform\", `translate(${this.state.dragX},0)`)\n  }\n\n  private getDragDiffWidth() {\n    const {\n      elements: { chart },\n      state: { marginLeft, width: currentWidth },\n    } = this\n\n    const comparedWidth = currentWidth - marginLeft\n\n    const { width: svgGWidth } = chart.node()!.getClientRects()[0]\n\n    return svgGWidth - comparedWidth\n  }\n}\n\nexport { DragModule }\n","// extracted by mini-css-extract-plugin\nexport var mapDistorsionsChart = \"map-distorsions-module--mapDistorsionsChart--5416d\";\nexport var background = \"map-distorsions-module--background--bd031\";\nexport var foreground = \"map-distorsions-module--foreground--c78ab\";\nexport var axis = \"map-distorsions-module--axis--cd688\";\nexport var title = \"map-distorsions-module--title--9d8e9\";\nexport var label = \"map-distorsions-module--label--b1604\";\nexport var inactive = \"map-distorsions-module--inactive--dc4a0\";\nexport var active = \"map-distorsions-module--active--8e5d5\";","import {\n  Selection,\n  axisLeft,\n  extent,\n  line as lineD3,\n  range,\n  scaleLinear,\n  scalePoint,\n  select,\n} from \"d3\"\nimport $ from \"jquery\"\nimport \"jquery-ui/themes/base/all.css\"\n\nimport { DragModule } from \"./lines-chart-drag\"\nimport * as styles from \"./map-distorsions.module.css\"\n\nif (typeof window !== \"undefined\") {\n  require(\"jquery-ui/ui/widgets/tooltip\")\n}\n\ntype LineItemBase = { [dimension: string]: string }\n\nconst maxNameLength = 20\nconst getShortName = (name: string) =>\n  name.length > maxNameLength ? `${name.slice(0, maxNameLength)}...` : name\n\nconst margin = {\n  bottom: 20,\n  left: 200,\n  right: 40,\n  top: 90,\n}\nconst height = 750 - margin.top - margin.bottom\nconst axisYOffset = -9\n\nconst moveToFront = function appendOnEnd(this: SVGElement) {\n  const parentNode = this.parentNode as HTMLElement\n\n  parentNode.appendChild(this)\n}\n\nconst colors = [\"#7C7CC9\", \"#429742\", \"#63BD28\", \"#D14141\"]\n\nenum DimensionType {\n  Number = \"number\",\n  String = \"string\",\n}\n\ntype Dimension = {\n  name: string\n  scale: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  type: DimensionType\n}\n\nconst filterColor = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n  filter\n    .append(\"feOffset\")\n    .attr(\"dx\", 0.5)\n    .attr(\"dy\", 0.5)\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"result\", \"offOut\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"offOut\")\n    .attr(\"result\", \"blurOut\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter\n    .append(\"feBlend\")\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"in2\", \"blurOut\")\n    .attr(\"mode\", \"normal\")\n\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n}\n\nconst colorsScale = <P extends number>(domain: [number, number]) => {\n  const c = scaleLinear().domain(domain).range([0, 1])\n  const colorScale = scaleLinear<string>()\n    .domain(range(0, 1, 1.0 / colors.length))\n    .range(\n      window.location.search.includes(\"e2e_test=true\")\n        ? colors.map(() => \"#ccc\")\n        : colors\n    )\n\n  return (color: P) => colorScale(c(color))\n}\n\ntype ChartConfig<LineItem extends LineItemBase> = {\n  chartSmallTitle: string\n  chartTitle: string\n  dimensions: Dimension[]\n  getTooltipText: (lineItem: LineItem) => string\n  lines: LineItem[]\n  onLineClick: (clickEvent: unknown, lineItem: LineItem) => void\n  rootElId: string\n}\n\ntype ChartElements = {\n  background: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  dragArea: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  foreground: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  title: Selection<SVGTextElement, unknown, HTMLElement, unknown>\n}\n\nclass LinesChart<LineItem extends LineItemBase> {\n  private readonly config: ChartConfig<LineItem>\n  private readonly elements: ChartElements\n  private readonly dragModule: DragModule<unknown>\n\n  public constructor(config: ChartConfig<LineItem>) {\n    this.config = config\n\n    const { rootElId } = config\n\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.mapDistorsionsChart)\n\n    const svg = select(`#${rootElId}`).append(\"svg\")\n    const dragArea = svg.append(\"g\")\n    const svgG = dragArea.append(\"g\")\n    const title = svgG.append(\"text\")\n    const background = svgG.append(\"g\")\n    const foreground = svgG.append(\"g\")\n\n    this.elements = {\n      background,\n      dragArea,\n      foreground,\n      svg,\n      svgG,\n      title,\n    }\n\n    filterColor({ deviation: 2, id: \"lines\", slope: 0.4, svg: svgG })\n\n    this.dragModule = new DragModule({\n      chart: svgG,\n      dragArea,\n      svg,\n    })\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n\n  private render() {\n    const {\n      config: {\n        chartSmallTitle,\n        chartTitle,\n        dimensions,\n        getTooltipText,\n        lines,\n        onLineClick,\n        rootElId,\n      },\n    } = this\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n    const deviceMemory =\n      (navigator as unknown as { deviceMemory?: number }).deviceMemory ?? 0\n\n    rootEl.classList.add(styles.mapDistorsionsChart)\n\n    const width = Math.max(\n      700,\n      rootEl.getBoundingClientRect().width - margin.left - margin.right\n    )\n\n    const isSmallScreen = width < 500\n\n    this.dragModule.setDimensions({\n      marginLeft: margin.left,\n      width,\n    })\n\n    const {\n      elements: { background, foreground, svg, svgG, title },\n    } = this\n\n    svg\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n    svgG.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    title\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${width / 2},-60)`)\n      .style(\"font-weight\", \"bold\")\n      .text(isSmallScreen ? chartSmallTitle : chartTitle)\n\n    const x = scalePoint()\n      .domain(dimensions.map((dimension) => dimension.name))\n      .range([0, width])\n\n    const line = lineD3().defined((lineData) => !isNaN(lineData[1]))\n\n    const dimensionSelection = svgG\n      .selectAll(\".dimension\")\n      .data(dimensions)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"dimension\")\n\n    svgG\n      .selectAll<SVGGElement, Dimension>(\".dimension\")\n      .attr(\"transform\", (dimension) => `translate(${x(dimension.name)})`)\n\n    const colorFn = colorsScale([0, lines.length - 1])\n\n    dimensions.forEach((dimItem) =>\n      dimItem.scale.range([0, height]).domain(\n        dimItem.type === DimensionType.Number\n          ? extent(\n              lines,\n              (lineItem: LineItem) => +lineItem[dimItem.name as keyof LineItem]\n            )\n          : lines\n              .map((lineItem: LineItem) => {\n                const { [dimItem.name as keyof LineItem]: name } = lineItem\n\n                return getShortName(name)\n              })\n              .sort()\n      )\n    )\n\n    const draw = (lineItem: LineItem) => {\n      const allPoints: Array<[number, number]> = dimensions.map((dimItem) => {\n        const { [dimItem.name as keyof LineItem]: dimensionValue } = lineItem\n\n        return [\n          x(dimItem.name) as number,\n          dimItem.scale(\n            typeof dimensionValue === \"string\"\n              ? getShortName(dimensionValue)\n              : dimensionValue\n          ),\n        ]\n      })\n\n      return line(allPoints)\n    }\n\n    background\n      .attr(\"class\", styles.background)\n      .selectAll(\"path\")\n      .data<LineItem>(lines)\n      .enter()\n      .append(\"path\")\n\n    background\n      .selectAll<SVGPathElement, LineItem>(\"path\")\n      .attr(\"d\", draw)\n      .style(\"cursor\", \"pointer\")\n      .attr(\"title\", getTooltipText)\n      .on(\"click\", onLineClick)\n\n    foreground\n      .attr(\"class\", styles.foreground)\n      .selectAll(\"path\")\n      .data(lines)\n      .enter()\n      .append(\"path\")\n      .attr(\"data-title\", getTooltipText)\n\n    foreground.selectAll<SVGPathElement, LineItem>(\"path\").attr(\"d\", draw)\n\n    dimensionSelection\n      .append(\"g\")\n      .attr(\"class\", styles.axis)\n      .each(function setupVerticalAxis(dimensionItem) {\n        const yAxis = axisLeft(dimensionItem.scale)\n\n        return select(this).call(yAxis)\n      })\n      .append(\"text\")\n      .attr(\"class\", styles.title)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"y\", axisYOffset)\n      .text((dimensionItem) => dimensionItem.name)\n\n    svgG\n      .select(`.${styles.axis}`)\n      .selectAll<SVGElement, LineItem>(`text:not(.${styles.title})`)\n      .attr(\"class\", styles.label)\n      .data(lines, (lineItem: LineItem) => lineItem.name)\n      .style(\"fill\", (...[, lineItemIndex]: [unknown, number]) =>\n        colorFn(lineItemIndex)\n      )\n\n    const linesSelection = svgG.selectAll<SVGElement, LineItem>(\n      `.${styles.axis} text,.${styles.background} path,.${styles.foreground} path`\n    )\n\n    const mouseover = (...[, overLineItem]: [unknown, LineItem]) => {\n      svgG.selectAll(`.${styles.foreground} path`).style(\"filter\", \"none\")\n      svgG.classed(styles.active, true)\n      linesSelection.classed(\n        styles.inactive,\n        (otherLineItem: LineItem) => otherLineItem.name !== overLineItem.name\n      )\n\n      linesSelection\n        .filter(\n          (otherLineItem: LineItem) => otherLineItem.name === overLineItem.name\n        )\n        .each(moveToFront)\n    }\n\n    const shadowFilter = deviceMemory >= 8 ? \"url(#drop-shadow-lines)\" : false\n\n    const mouseout = () => {\n      svgG.selectAll(`.${styles.foreground} path`).style(\"filter\", shadowFilter)\n      svgG.classed(styles.active, false)\n      linesSelection.classed(styles.inactive, false)\n    }\n\n    svgG\n      .selectAll(`.${styles.foreground} path`)\n      .style(\"filter\", shadowFilter)\n      .style(\"stroke\", (...[, lineItemIndex]) => colorFn(lineItemIndex))\n\n    linesSelection.on(\"mouseover\", mouseover).on(\"mouseout\", mouseout)\n\n    $(`.${styles.background} path, .${styles.foreground} path`).tooltip({\n      track: true,\n    })\n\n    this.dragModule.reset()\n  }\n}\n\nexport { ChartConfig, Dimension, DimensionType, LinesChart }\n","import { scaleLinear, scalePoint, scaleSqrt, tsv } from \"d3\"\nimport qs from \"query-string\"\n\nimport { ChartConfig, Dimension, DimensionType } from \"./lines-chart\"\nimport { CONTAINER_ID } from \"./ui-constants\"\n\ntype ProjectionItem = {\n  \"Acc. 40º 150%\": string\n  \"Angular\": string\n  \"Areal\": string\n  \"Scale\": string\n  \"name\": string\n}\n\ntype Config = ChartConfig<ProjectionItem>\n\nconst fetchData = () =>\n  tsv(`${ROOT_PATH}data/d3js/map-distorsions/data.tsv`) as unknown as Promise<\n    ProjectionItem[]\n  >\n\nenum DimensionName {\n  Acc40 = \"Acc. 40º 150%\",\n  Angular = \"Angular\",\n  Areal = \"Areal\",\n  Scale = \"Scale\",\n}\n\nconst getTooltipText: Config[\"getTooltipText\"] = (\n  projectionItem: ProjectionItem\n) => {\n  const dimensionsNames = [\n    DimensionName.Acc40,\n    DimensionName.Scale,\n    DimensionName.Areal,\n    DimensionName.Angular,\n  ] as Array<keyof ProjectionItem>\n  const valuesWithDimension = dimensionsNames.map(\n    (dimensionName) =>\n      `${Number(projectionItem[dimensionName]).toFixed(2)} (${dimensionName})`\n  )\n\n  return `${projectionItem.name}: ${valuesWithDimension.join(\", \")}`\n}\n\nconst chartTitle =\n  \"Comparison of 41 map projections by four different types of distortion. Lower is better.\"\n\nconst chartSmallTitle = \"Lower is better.\"\n\nconst onLineClick: Config[\"onLineClick\"] = (...[, projectionItem]) => {\n  window.open(\n    `https://www.google.com/search?${qs.stringify({\n      q: `${projectionItem.name} map projection`,\n      tbm: \"isch\", // Google Images\n    })}`\n  )\n}\n\nconst dimensions: Dimension[] = [\n  {\n    name: \"name\",\n    scale: scalePoint(),\n    type: DimensionType.String,\n  },\n  {\n    name: DimensionName.Acc40,\n    scale: scaleLinear(),\n    type: DimensionType.Number,\n  },\n  {\n    name: DimensionName.Scale,\n    scale: scaleLinear(),\n    type: DimensionType.Number,\n  },\n  {\n    name: DimensionName.Areal,\n    scale: scaleSqrt(),\n    type: DimensionType.Number,\n  },\n  {\n    name: DimensionName.Angular,\n    scale: scaleLinear(),\n    type: DimensionType.Number,\n  },\n]\n\nconst getChartConfig = async (): Promise<Config> => {\n  const mapsDistorsions = (await fetchData()).sort(\n    (...[{ name: nameA }, { name: nameB }]) => {\n      if (nameA === nameB) {\n        return 0\n      }\n\n      return nameA < nameB ? -1 : 1\n    }\n  )\n  const rootElId = CONTAINER_ID\n\n  return {\n    chartSmallTitle,\n    chartTitle,\n    dimensions,\n    getTooltipText,\n    lines: mapsDistorsions,\n    onLineClick,\n    rootElId,\n  }\n}\n\nexport { getChartConfig }\n","const CONTAINER_ID = \"chart\"\n\nexport { CONTAINER_ID }\n","import { getChartConfig } from \"./chart-config\"\nimport { LinesChart } from \"./lines-chart\"\nimport { CONTAINER_ID } from \"./ui-constants\"\n\nconst main = async () => {\n  const chartConfig = await getChartConfig()\n\n  new LinesChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/map-distorsions/map-distorsions\"\n\nconst MapDistorsions = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MapDistorsions\n"],"names":["DragModule","chart","dragArea","svg","state","dragX","marginLeft","width","this","elements","setDimensions","refresh","diffWidth","getDragDiffWidth","style","reset","handler","dragEvent","dx","Math","min","max","updateDrag","dragBehavior","dragD3","on","call","attr","comparedWidth","node","getClientRects","mapDistorsionsChart","axis","inactive","active","window","require","DimensionType","getShortName","name","length","slice","margin","height","moveToFront","parentNode","appendChild","colors","DimensionName","LinesChart","config","handleResize","render","rootElId","document","getElementById","classList","add","styles","deviation","id","slope","filter","select","append","svgG","title","background","foreground","dragModule","addEventListener","chartSmallTitle","chartTitle","dimensions","getTooltipText","lines","onLineClick","rootEl","deviceMemory","navigator","getBoundingClientRect","isSmallScreen","text","x","scalePoint","domain","map","dimension","range","line","lineD3","defined","lineData","isNaN","dimensionSelection","selectAll","data","enter","c","colorScale","colorFn","scaleLinear","location","search","includes","color","forEach","dimItem","scale","type","Number","extent","lineItem","sort","draw","allPoints","dimensionValue","each","dimensionItem","yAxis","axisLeft","lineItemIndex","linesSelection","shadowFilter","overLineItem","classed","otherLineItem","$","tooltip","track","CONTAINER_ID","projectionItem","valuesWithDimension","Acc40","Scale","Areal","Angular","dimensionName","toFixed","join","open","qs","q","tbm","String","scaleSqrt","getChartConfig","tsv","ROOT_PATH","mapsDistorsions","nameA","nameB","main","chartConfig","pageContext"],"sourceRoot":""}