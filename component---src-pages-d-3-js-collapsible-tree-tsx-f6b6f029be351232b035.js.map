{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/pages/d3js/collapsible-tree.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","fetchData","d3","ROOT_PATH","data","margin","height","renderChart","rootElId","rootData","root","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","x0","y0","tree","nodeSize","rootTree","descendants","forEach","d","i","id","_children","children","depth","diagonal","x","y","svg","append","attr","gLink","gNode","update","source","nodes","reverse","links","left","right","eachBefore","node","toggleFn","dispatch","transition","duration","tween","window","ResizeObserver","selectAll","nodeEnter","enter","on","_event","text","name","clone","lower","merge","exit","remove","link","target","linkEnter","o","demoInfo","pageContext","main"],"mappings":"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","file":"component---src-pages-d-3-js-collapsible-tree-tsx-f6b6f029be351232b035.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import * as d3 from \"d3\"\n\ntype DataNode = {\n  _children: TreeNode[] | undefined\n  children: DataNode[]\n  id: number\n  name: string\n  x0: number\n  x: number\n  y0: number\n  y: number\n}\ntype HierarchyDataNode = d3.HierarchyNode<DataNode>\ntype TreeNode = d3.HierarchyPointNode<DataNode>\ntype TreeLink = d3.HierarchyPointLink<DataNode>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst fetchData = async (): Promise<DataNode> => {\n  const data = (await d3.json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as DataNode\n\n  return data\n}\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\ntype RenderChart = (o: { rootElId: string; rootData: DataNode }) => void\n\nconst renderChart: RenderChart = ({ rootElId, rootData }) => {\n  const root = d3.hierarchy<DataNode>(rootData)\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"collapsible-tree-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  root.data.x0 = height / 2\n  root.data.y0 = 0\n\n  const tree = d3.tree<DataNode>().nodeSize([20, 100])\n\n  const rootTree = tree(root)\n\n  rootTree.descendants().forEach((d: TreeNode, i: number) => {\n    d.data.id = i\n    d.data._children = d.children\n\n    if (d.depth) {\n      d.children = undefined\n    }\n  })\n\n  const diagonal = d3\n    .linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((d: DiagonalNode) => d.y)\n    .y((d: DiagonalNode) => d.x)\n\n  const svg = d3\n    .select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${height / 2})`)\n\n  const gLink = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svg\n    .append(\"g\")\n    .attr(\"cursor\", \"pointer\")\n    .attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(root)\n\n    let left = root\n    let right = root\n\n    root.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) left = node\n      if (node.data.x > right.data.x) right = node\n    })\n\n    const toggleFn = () => {\n      svg.dispatch(\"toggle\")\n    }\n\n    const transition = svg\n      .transition()\n      .duration(duration)\n      .tween(\"resize\", window.ResizeObserver ? null : ((() => toggleFn) as any))\n\n    const node = gNode\n      .selectAll<SVGElement, TreeNode>(\"g\")\n      .data(nodes, (d: TreeNode) => d.data.id)\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (_event, d: TreeNode) => {\n        d.children = d.children ? undefined : d.data._children\n\n        update(d)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 2.5)\n      .attr(\"fill\", (d: TreeNode) => (d.data._children ? \"#555\" : \"#999\"))\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", (d: TreeNode) => (d.data._children ? -6 : 6))\n      .attr(\"text-anchor\", (d: TreeNode) =>\n        d.data._children ? \"end\" : \"start\"\n      )\n      .text((d: TreeNode) => d.data.name)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter as any)\n      .transition(transition as any)\n      .attr(\"transform\", (d: TreeNode) => `translate(${d.y},${d.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (d: TreeLink) => d.target.data.id)\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const o = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    link\n      .merge(linkEnter as any)\n      .transition(transition as any)\n      .attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"d\", () => {\n        const o = { x: source.x, y: source.y }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    rootTree.eachBefore((d: TreeNode) => {\n      d.data.x0 = d.x\n      d.data.y0 = d.y\n    })\n  }\n\n  update(rootTree)\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n\n  const rootData = await fetchData()\n\n  renderChart({\n    rootData,\n    rootElId,\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/collapsible-tree/collapsible-tree\"\n\nimport \"@/demos/collapsible-tree/collapsible-tree.styl\"\n\nconst CollapsibleTree = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CollapsibleTree\n"],"sourceRoot":""}