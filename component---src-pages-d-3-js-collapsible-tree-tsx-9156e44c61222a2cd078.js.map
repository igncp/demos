{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.module.css","webpack://demos/./src/pages/d3js/collapsible-tree.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","fetchData","json","ROOT_PATH","data","margin","height","renderChart","rootData","rootElId","root","hierarchy","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","x0","y0","tree","treeD3","nodeSize","rootTree","descendants","forEach","d","i","id","_children","children","depth","diagonal","linkHorizontal","x","y","svg","select","append","attr","gLink","gNode","update","source","nodes","reverse","links","left","right","eachBefore","node","toggleFn","dispatch","transition","duration","tween","window","ResizeObserver","selectAll","nodeEnter","enter","on","_event","text","name","clone","lower","merge","exit","remove","link","target","linkEnter","o","pageContext","main"],"mappings":"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","file":"component---src-pages-d-3-js-collapsible-tree-tsx-9156e44c61222a2cd078.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import {\n  HierarchyNode,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  hierarchy,\n  json,\n  linkHorizontal,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport * as styles from \"./collapsible-tree.module.css\"\n\ntype DataNode = {\n  _children: TreeNode[] | undefined\n  children: DataNode[]\n  id: number\n  name: string\n  x: number\n  x0: number\n  y: number\n  y0: number\n}\ntype HierarchyDataNode = HierarchyNode<DataNode>\ntype TreeNode = HierarchyPointNode<DataNode>\ntype TreeLink = HierarchyPointLink<DataNode>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst fetchData = async (): Promise<DataNode> => {\n  const data = (await json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as DataNode\n\n  return data\n}\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\ntype RenderChart = (o: { rootData: DataNode; rootElId: string }) => void\n\nconst renderChart: RenderChart = ({ rootData, rootElId }) => {\n  const root = hierarchy<DataNode>(rootData)\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  root.data.x0 = height / 2\n  root.data.y0 = 0\n\n  const tree = treeD3<DataNode>().nodeSize([20, 100])\n\n  const rootTree = tree(root)\n\n  rootTree.descendants().forEach((d: TreeNode, i: number) => {\n    d.data.id = i\n    d.data._children = d.children\n\n    if (d.depth) {\n      d.children = undefined\n    }\n  })\n\n  const diagonal = linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((d: DiagonalNode) => d.y)\n    .y((d: DiagonalNode) => d.x)\n\n  const svg = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${height / 2})`)\n\n  const gLink = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svg\n    .append(\"g\")\n    .attr(\"cursor\", \"pointer\")\n    .attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(root)\n\n    let left = root\n    let right = root\n\n    root.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) left = node\n      if (node.data.x > right.data.x) right = node\n    })\n\n    const toggleFn = () => {\n      svg.dispatch(\"toggle\")\n    }\n\n    const transition = svg\n      .transition()\n      .duration(duration)\n      .tween(\n        \"resize\",\n        (window.ResizeObserver as unknown) ? null : ((() => toggleFn) as any)\n      )\n\n    const node = gNode\n      .selectAll<SVGElement, TreeNode>(\"g\")\n      .data(nodes, (d: TreeNode) => d.data.id)\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (_event, d: TreeNode) => {\n        d.children = d.children ? undefined : d.data._children\n\n        update(d)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 2.5)\n      .attr(\"fill\", (d: TreeNode) => (d.data._children ? \"#555\" : \"#999\"))\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", (d: TreeNode) => (d.data._children ? -6 : 6))\n      .attr(\"text-anchor\", (d: TreeNode) =>\n        d.data._children ? \"end\" : \"start\"\n      )\n      .text((d: TreeNode) => d.data.name)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter as any)\n      .transition(transition as any)\n      .attr(\"transform\", (d: TreeNode) => `translate(${d.y},${d.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (d: TreeLink) => d.target.data.id)\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const o = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    link\n      .merge(linkEnter as any)\n      .transition(transition as any)\n      .attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"d\", () => {\n        const o = { x: source.x, y: source.y }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    rootTree.eachBefore((d: TreeNode) => {\n      d.data.x0 = d.x\n      d.data.y0 = d.y\n    })\n  }\n\n  update(rootTree)\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n\n  const rootData = await fetchData()\n\n  renderChart({\n    rootData,\n    rootElId,\n  })\n}\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var collapsibleTreeChart = \"collapsible-tree-module--collapsibleTreeChart--39sg1\";\nexport var node = \"collapsible-tree-module--node--3s-yN\";\nexport var link = \"collapsible-tree-module--link--tyAR_\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CollapsibleTree\n"],"sourceRoot":""}