{"version":3,"file":"component---src-pages-d-3-js-map-distorsions-tsx-4c243d50b59e02cea3aa.js","mappings":"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","sources":["webpack://demos/./src/demos/map-distorsions/map-distorsions.ts","webpack://demos/./src/demos/map-distorsions/map-distorsions.module.css","webpack://demos/./src/pages/d3js/map-distorsions.tsx"],"sourcesContent":["import {\n  Selection,\n  axisLeft,\n  extent,\n  line as lineD3,\n  range,\n  scaleLinear,\n  scalePoint,\n  scaleSqrt,\n  select,\n  tsv,\n} from \"d3\"\nimport qs from \"query-string\"\n\nimport * as styles from \"./map-distorsions.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype ProjectionItem = {\n  \"Acc. 40ยบ 150%\": string\n  \"Angular\": string\n  \"Areal\": string\n  \"Scale\": string\n  \"name\": string\n}\n\nconst fetchData = () =>\n  tsv(`${ROOT_PATH}data/d3js/map-distorsions/data.tsv`) as unknown as Promise<\n    ProjectionItem[]\n  >\n\nconst maxNameLength = 20\nconst getShortName = (name: string) =>\n  name.length > maxNameLength ? `${name.slice(0, maxNameLength)}...` : name\n\nconst margin = {\n  bottom: 20,\n  left: 200,\n  right: 40,\n  top: 90,\n}\nconst height = 750 - margin.top - margin.bottom\nconst axisYOffset = -9\n\nconst colors = [\"#7C7CC9\", \"#429742\", \"#63BD28\", \"#D14141\"]\n\nconst texts = {\n  title:\n    \"Comparison of 41 map projections by four different types of distortion. Lower is better.\",\n}\n\ntype RenderChart = (chartConfig: {\n  mapsDistorsions: ProjectionItem[]\n  rootElId: string\n}) => void\n\nenum DimensionName {\n  Acc40 = \"Acc. 40ยบ 150%\",\n  Angular = \"Angular\",\n  Areal = \"Areal\",\n  Scale = \"Scale\",\n}\n\nenum DimensionType {\n  Number = \"number\",\n  String = \"string\",\n}\n\nconst tooltipText = (projectionItem: ProjectionItem) => {\n  const dimensionsNames = [\n    DimensionName.Acc40,\n    DimensionName.Scale,\n    DimensionName.Areal,\n    DimensionName.Angular,\n  ] as Array<keyof ProjectionItem>\n  const valuesWithDimension = dimensionsNames.map(\n    (dimensionName) =>\n      `${Number(projectionItem[dimensionName]).toFixed(2)} (${dimensionName})`\n  )\n\n  return `${projectionItem.name}: ${valuesWithDimension.join(\", \")}`\n}\n\ntype Dimension = {\n  name: DimensionName | \"name\"\n  scale: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  type: DimensionType\n}\n\nconst filterColor = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n  filter\n    .append(\"feOffset\")\n    .attr(\"dx\", 0.5)\n    .attr(\"dy\", 0.5)\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"result\", \"offOut\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"offOut\")\n    .attr(\"result\", \"blurOut\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter\n    .append(\"feBlend\")\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"in2\", \"blurOut\")\n    .attr(\"mode\", \"normal\")\n\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n}\n\nconst colorsScale = <P extends number>(domain: [number, number]) => {\n  const c = scaleLinear().domain(domain).range([0, 1])\n  const colorScale = scaleLinear<string>()\n    .domain(range(0, 1, 1.0 / colors.length))\n    .range(colors)\n\n  return (color: P) => colorScale(c(color))\n}\n\nconst renderChart: RenderChart = ({ mapsDistorsions, rootElId }) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.mapDistorsionsChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const dimensions: Dimension[] = [\n    {\n      name: \"name\",\n      scale: scalePoint().range([0, height]),\n      type: DimensionType.String,\n    },\n    {\n      name: DimensionName.Acc40,\n      scale: scaleLinear().range([0, height]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Scale,\n      scale: scaleLinear().range([height, 0]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Areal,\n      scale: scaleSqrt().range([height, 0]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Angular,\n      scale: scaleLinear().range([height, 0]),\n      type: DimensionType.Number,\n    },\n  ]\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  svg\n    .append(\"text\")\n    .attr(\"class\", \"chart-title\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"transform\", `translate(${width / 2},-60)`)\n    .text(texts.title)\n    .style(\"font-weight\", \"bold\")\n\n  const x = scalePoint()\n    .domain(dimensions.map((dimension) => dimension.name))\n    .range([0, width])\n\n  const line = lineD3().defined((lineData) => !isNaN(lineData[1]))\n\n  const dimensionSelection = svg\n    .selectAll(\".dimension\")\n    .data(dimensions)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"dimension\")\n    .attr(\"transform\", (dimension) => `translate(${x(dimension.name)})`)\n\n  filterColor({ deviation: 2, id: \"lines\", slope: 0.4, svg })\n\n  const sortedData: ProjectionItem[] = mapsDistorsions\n    .slice(0)\n    .sort((...[{ name: nameA }, { name: nameB }]) => {\n      if (nameA === nameB) {\n        return 0\n      }\n\n      return nameA < nameB ? -1 : 1\n    })\n\n  const colorFn = colorsScale([0, sortedData.length - 1])\n\n  dimensions.forEach((dimItem: Dimension) =>\n    dimItem.scale.domain(\n      dimItem.type === DimensionType.Number\n        ? extent(\n            sortedData,\n            (projection: ProjectionItem) =>\n              +projection[dimItem.name as keyof ProjectionItem]\n          )\n        : sortedData\n            .map((projection: ProjectionItem) => {\n              const { [dimItem.name as keyof ProjectionItem]: name } =\n                projection\n\n              return getShortName(name)\n            })\n            .sort()\n    )\n  )\n\n  const draw = (projectionItem: ProjectionItem) => {\n    const allPoints: Array<[number, number]> = dimensions.map((dimItem) => {\n      const { [dimItem.name as keyof ProjectionItem]: projectionValue } =\n        projectionItem\n\n      return [\n        x(dimItem.name) as number,\n        dimItem.scale(\n          typeof projectionValue === \"string\"\n            ? getShortName(projectionValue)\n            : projectionValue\n        ),\n      ]\n    })\n\n    return line(allPoints)\n  }\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", styles.background)\n    .selectAll(\"path\")\n    .data<ProjectionItem>(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .style(\"cursor\", \"pointer\")\n    .attr(\"title\", tooltipText)\n    .on(\"click\", (...[, projectionItem]) => {\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          q: `${projectionItem.name} map projection`,\n          tbm: \"isch\", // Google Images\n        })}`\n      )\n    })\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", styles.foreground)\n    .selectAll(\"path\")\n    .data(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .attr(\"data-title\", tooltipText)\n\n  dimensionSelection\n    .append(\"g\")\n    .attr(\"class\", styles.axis)\n    .each(function setupVerticalAxis(dimensionItem: Dimension) {\n      const yAxis = axisLeft(dimensionItem.scale)\n\n      return select(this).call(yAxis)\n    })\n    .append(\"text\")\n    .attr(\"class\", styles.title)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"y\", axisYOffset)\n    .text((dimensionItem) => dimensionItem.name)\n\n  svg\n    .select(`.${styles.axis}`)\n    .selectAll<SVGElement, ProjectionItem>(`text:not(.${styles.title})`)\n    .attr(\"class\", styles.label)\n    .data(sortedData, (projectionItem: ProjectionItem) => projectionItem.name)\n    .style(\"fill\", (...[, projectionIndex]: [unknown, number]) =>\n      colorFn(projectionIndex)\n    )\n\n  const moveToFront = function appendOnEnd(this: SVGElement) {\n    const parentNode = this.parentNode as HTMLElement\n\n    parentNode.appendChild(this)\n  }\n\n  const projection = svg.selectAll<SVGElement, ProjectionItem>(\n    `.${styles.axis} text,.${styles.background} path,.${styles.foreground} path`\n  )\n\n  const mouseover = (...[, overProjection]: [unknown, ProjectionItem]) => {\n    svg.selectAll(`.${styles.foreground} path`).style(\"filter\", \"none\")\n    svg.classed(styles.active, true)\n    projection.classed(\n      styles.inactive,\n      (otherProjection: ProjectionItem) =>\n        otherProjection.name !== overProjection.name\n    )\n\n    projection\n      .filter(\n        (otherProjection: ProjectionItem) =>\n          otherProjection.name === overProjection.name\n      )\n      .each(moveToFront)\n  }\n\n  const mouseout = () => {\n    svg\n      .selectAll(`.${styles.foreground} path`)\n      .style(\"filter\", \"url(#drop-shadow-lines)\")\n    svg.classed(styles.active, false)\n    projection.classed(styles.inactive, false)\n  }\n\n  svg\n    .selectAll(`.${styles.foreground} path`)\n    .style(\"filter\", \"url(#drop-shadow-lines)\")\n    .style(\"stroke\", (...[, projectionItemIndex]) =>\n      colorFn(projectionItemIndex)\n    )\n\n  projection.on(\"mouseover\", mouseover).on(\"mouseout\", mouseout)\n\n  $(`.${styles.background} path, .${styles.foreground} path`).tooltip({\n    track: true,\n  })\n}\n\nconst main = async () => {\n  const mapsDistorsions = await fetchData()\n  const rootElId = CONTAINER_ID\n\n  renderChart({ mapsDistorsions, rootElId })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var mapDistorsionsChart = \"map-distorsions-module--mapDistorsionsChart--5416d\";\nexport var background = \"map-distorsions-module--background--bd031\";\nexport var foreground = \"map-distorsions-module--foreground--c78ab\";\nexport var axis = \"map-distorsions-module--axis--cd688\";\nexport var title = \"map-distorsions-module--title--9d8e9\";\nexport var label = \"map-distorsions-module--label--b1604\";\nexport var inactive = \"map-distorsions-module--inactive--dc4a0\";\nexport var active = \"map-distorsions-module--active--8e5d5\";","import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/map-distorsions/map-distorsions\"\n\nconst MapDistorsions = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MapDistorsions\n"],"names":["DimensionName","DimensionType","background","foreground","axis","title","inactive","active","CONTAINER_ID","getShortName","name","length","slice","margin","height","colors","texts","tooltipText","projectionItem","valuesWithDimension","Acc40","Scale","Areal","Angular","map","dimensionName","Number","toFixed","join","renderChart","mapsDistorsions","rootElId","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","dimensions","scale","scalePoint","range","type","String","scaleLinear","scaleSqrt","svg","select","append","attr","text","style","deviation","id","slope","filter","x","domain","dimension","line","lineD3","defined","lineData","isNaN","dimensionSelection","selectAll","data","enter","c","colorScale","sortedData","sort","nameA","nameB","colorFn","color","forEach","dimItem","extent","projection","draw","allPoints","projectionValue","styles","on","window","open","qs","q","tbm","each","dimensionItem","yAxis","axisLeft","this","call","projectionIndex","moveToFront","parentNode","appendChild","projectionItemIndex","overProjection","classed","otherProjection","$","tooltip","track","main","tsv","ROOT_PATH","pageContext","links","JQUERYUI","scripts"],"sourceRoot":""}