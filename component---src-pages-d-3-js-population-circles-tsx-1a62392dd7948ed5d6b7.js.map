{"version":3,"file":"component---src-pages-d-3-js-population-circles-tsx-1a62392dd7948ed5d6b7.js","mappings":"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","sources":["webpack://demos/./src/demos/population-circles/population-circles.module.css","webpack://demos/./src/demos/population-circles/population-circles-chart.ts","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://demos/./src/demos/population-circles/ui-constants.ts","webpack://demos/./src/demos/population-circles/population-circles-chart-data.ts","webpack://demos/./src/demos/population-circles/population-circles.ts","webpack://demos/./src/pages/d3js/population-circles.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var radio = \"population-circles-module--radio--d7ab8\";\nexport var slider = \"population-circles-module--slider--4b739\";\nexport var circle = \"population-circles-module--circle--25c38\";\nexport var header = \"population-circles-module--header--396bb\";","import anime from \"animejs\"\nimport chroma from \"chroma-js\"\nimport {\n  BaseType,\n  D3ZoomEvent,\n  HierarchyCircularNode,\n  Selection,\n  Transition,\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  pack,\n  scaleOrdinal,\n  schemeSet3,\n  select,\n  zoom,\n} from \"d3\"\nimport $ from \"jquery\"\nimport \"jquery-ui/themes/base/all.css\"\n\nimport * as styles from \"./population-circles.module.css\"\n\nif (typeof window !== \"undefined\") {\n  require(\"jquery-ui/ui/widgets/tooltip\")\n}\n\nconst dropShadowBaseId = \"dropShadowBase\"\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\nconst height = 400\n\ntype ChartConfig<CircleData> = {\n  colorDomain: string[]\n  getChartItems: () => CircleData[]\n  getEmptyItem: () => CircleData\n  getHeaderText: (options: { chartItems: CircleData[] }) => string\n  getIsSmall: () => boolean\n  getItemId: (circleData: CircleData) => string\n  getItemLabel: (circleData: CircleData) => string\n  getItemMetric: (circleData: CircleData) => number\n  getItemTitle: (options: { circleData: CircleData }) => string\n  getStringForColor: (circleData: CircleData) => string\n  onClick: (m: CircleData) => void\n  rootElId: string\n}\n\ntype AddDropShadow = (options: {\n  deviation: number\n  name: string\n  slope: number\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}) => void\n\nconst addDropShadow: AddDropShadow = ({ deviation, name, slope, svg }) => {\n  svg.append(\"filter\").html(`\n<filter id=\"${name}\" height=\"130%\">\n  <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${deviation}\"/>\n  <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n  <feComponentTransfer>\n    <feFuncA type=\"linear\" slope=\"${slope}\"/>\n  </feComponentTransfer>\n  <feMerge>\n    <feMergeNode/>\n    <feMergeNode in=\"SourceGraphic\"/>\n  </feMerge>\n</filter>\n`)\n}\n\ntype ChartElements = {\n  header: Selection<SVGTextElement, unknown, HTMLElement, unknown>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgContent: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}\n\nclass CirclesChart<CircleData> {\n  private readonly config: ChartConfig<CircleData>\n  private readonly elements: ChartElements\n\n  public constructor(chartConfig: ChartConfig<CircleData>) {\n    this.config = chartConfig\n\n    const svg = select(`#${chartConfig.rootElId}`)\n      .append(\"svg\")\n      .attr(\"font-size\", 10)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"text-anchor\", \"middle\")\n\n    addDropShadow({ deviation: 2, name: dropShadowBaseId, slope: 0.5, svg })\n\n    const header = svg.append(\"text\").attr(\"class\", styles.header).text(\"\")\n\n    const svgContent = svg.append(\"g\")\n\n    this.elements = {\n      header,\n      svg,\n      svgContent,\n    }\n\n    this.setupZoom()\n    this.update()\n  }\n\n  public update() {\n    type ChartNode = HierarchyCircularNode<CircleData>\n\n    const { config: chartConfig, elements } = this\n    const width = this.getWidth()\n\n    const { header, svgContent } = elements\n    const filteredData = chartConfig.getChartItems()\n    const hoverAnimations: { [k: string]: anime.AnimeInstance | null } = {}\n\n    elements.svg.attr(\"viewBox\", [0, 0, width, height + margin.top].join(\", \"))\n    elements.header.attr(\"transform\", `translate(${width / 2}, 50)`)\n    elements.svgContent.attr(\n      \"transform\",\n      `translate(${margin.left}, ${margin.top})`\n    )\n\n    const structure = hierarchy({\n      ...chartConfig.getEmptyItem(),\n      children: filteredData,\n    }).sum(chartConfig.getItemMetric)\n\n    const isSmall = chartConfig.getIsSmall()\n\n    const root = pack<CircleData>()\n      .size(isSmall ? [width / 2, height / 2] : [width, height])\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    header.text(\n      chartConfig.getHeaderText({\n        chartItems: filteredData,\n      })\n    )\n\n    const getDataKey = (node: unknown) =>\n      chartConfig.getItemId((node as HierarchyCircularNode<CircleData>).data)\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves, getDataKey)\n\n    leaf.exit().remove()\n\n    const getTitle = (node: HierarchyCircularNode<CircleData>) =>\n      chartConfig.getItemTitle({\n        circleData: node.data,\n      })\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (chartNode) => {\n        if (isSmall) {\n          return `translate(${chartNode.x + width / 4},${\n            chartNode.y + height / 4\n          })`\n        }\n\n        return `translate(${chartNode.x + 1},${chartNode.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\"transform\", (node) => `translate(${node.x + 1},${node.y + 1})`)\n      .on(\"mouseenter\", function onMouseEnter(...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this)\n          .select(\".letter\")\n          .attr(\"filter\", `url(#${dropShadowBaseId})`)\n\n        const id = chartConfig.getItemId(node.data)\n\n        const hoverAnimation = anime({\n          complete: () => {\n            hoverAnimations[id] = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        hoverAnimations[id] = hoverAnimation\n      })\n      .on(\"mouseleave\", function onMouseLeave(...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this).select(\".letter\").attr(\"filter\", null)\n\n        const id = chartConfig.getItemId(node.data)\n        const { [id]: hoverAnimation } = hoverAnimations\n\n        if (hoverAnimation) {\n          hoverAnimation.seek(0)\n          anime.remove(selection.node())\n          hoverAnimations[id] = null\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (...[, node]) => {\n        chartConfig.onClick(node.data)\n      })\n\n    const color = scaleOrdinal<string, string>()\n      .domain(chartConfig.colorDomain)\n      .range(schemeSet3)\n\n    const generateColor = (node: HierarchyCircularNode<CircleData>) =>\n      color(chartConfig.getStringForColor(node.data))\n\n    const generateDarkerColor = (node: ChartNode) => {\n      const baseColor = generateColor(node)\n\n      return chroma(baseColor).darken(1.5).hex()\n    }\n\n    type ChartTransition = Transition<BaseType, ChartNode, BaseType, ChartNode>\n\n    const setupLetter = (\n      letter:\n        | ChartTransition\n        | Selection<SVGTextElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const letterSelection = letter.text((node) =>\n        chartConfig.getItemLabel(node.data)\n      ) as ChartTransition\n\n      letterSelection\n        .style(\"font-size\", (node) => `${node.r.toFixed(0)}px`)\n        .attr(\"dy\", (node) => node.r / 3)\n        .attr(\"fill\", generateDarkerColor)\n    }\n\n    const setupCircle = (\n      circle:\n        | ChartTransition\n        | Selection<SVGCircleElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const elem = circle.attr(\"r\", (node) => node.r) as ChartTransition\n\n      elem.attr(\"fill\", generateColor).attr(\"stroke\", generateDarkerColor)\n    }\n\n    setupCircle(enter.append(\"circle\").attr(\"class\", styles.circle))\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const forwardData = (node: ChartNode) => node\n\n    const circles = leaf\n      .selectAll(`.${styles.circle}`)\n      .data(forwardData, getDataKey)\n    const texts = leaf.selectAll(\".letter\").data(forwardData, getDataKey)\n\n    setupCircle(circles.transition().duration(1000).ease(easeSinInOut))\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  private getWidth() {\n    const { config: chartConfig } = this\n    const chartEl = document.getElementById(chartConfig.rootElId) as HTMLElement\n    const { width } = chartEl.getBoundingClientRect()\n\n    return width\n  }\n\n  private setupZoom() {\n    const {\n      elements: { svg },\n    } = this\n    const width = this.getWidth()\n    const lastPosition = { k: 1, x: 0, y: 0 }\n\n    // this zoom function is not working well in all directions\n    // eslint-disable-next-line max-params\n    function zoomed(\n      this: SVGSVGElement,\n      zoomEvent: D3ZoomEvent<SVGSVGElement, unknown>\n    ) {\n      const transition = select(this).transition().duration(150)\n      let {\n        transform: { x, y },\n      } = zoomEvent\n      const {\n        transform: { k },\n      } = zoomEvent\n\n      if (k !== lastPosition.k) {\n        x = lastPosition.x\n        y = lastPosition.y\n      }\n\n      transition.attr(\"transform\", `translate(${x}, ${y}) scale(${k})`)\n\n      lastPosition.k = k\n      lastPosition.x = x\n      lastPosition.y = y\n    }\n\n    const zoomBehavior = zoom<SVGSVGElement, unknown>()\n      .extent([\n        [0, 0],\n        [width / 2, height / 2],\n      ])\n      .on(\"end\", zoomed)\n\n    svg.call(zoomBehavior)\n  }\n}\n\nexport { ChartConfig, CirclesChart }\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","const CONTAINER_ID = \"chart\"\n\nexport { CONTAINER_ID }\n","import { json } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\nimport { ChartConfig } from \"./population-circles-chart\"\nimport { CONTAINER_ID } from \"./ui-constants\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\ntype Municipality = {\n  metrics: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n  name: string\n}\n\ntype PopulationType = keyof Municipality[\"metrics\"]\n\ntype State = {\n  populationRange: [number, number]\n  populationType: PopulationType\n  timeRangeIndex: number\n}\n\nconst createState = (): State => ({\n  populationRange: [0, 1],\n  populationType: \"total\",\n  timeRangeIndex: 0,\n})\n\nconst fetchData = async () => {\n  type OriginalMunicipality = {\n    [key in keyof Omit<Municipality, \"metrics\">]: Municipality[key]\n  } & {\n    values: Municipality[\"metrics\"] // eslint-disable-line id-denylist\n  }\n\n  const originalMunicipalities = (await (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown)) as OriginalMunicipality[]\n\n  /* eslint-disable id-denylist */\n  return originalMunicipalities.map(({ values, ...otherProps }) => ({\n    ...otherProps,\n    metrics: values,\n  }))\n  /* eslint-enable id-denylist */\n}\n\nconst formatPopulation = (populationNum: number) =>\n  Number(populationNum.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\nconst typeNouns: Record<string, string> = {\n  females: \"females\",\n  males: \"males\",\n  total: \"people\",\n}\n\nconst getYearStr = (dateStr: string) => new Date(dateStr).getFullYear()\n\nconst createChartConfig = ({\n  municipalities,\n  state,\n}: {\n  municipalities: Municipality[]\n  state: State\n}): ChartConfig<Municipality> => {\n  type Config = ChartConfig<Municipality>\n\n  const colorDomain = municipalities.map((municipality) => municipality.name)\n  const getStringForColor = (municipality: Municipality) => municipality.name\n\n  const getEmptyItem = (): Municipality => ({\n    metrics: {\n      females: [],\n      males: [],\n      total: [],\n    },\n    name: \"\",\n  })\n\n  const getItemMetric: Config[\"getItemMetric\"] = (\n    municipality: Municipality\n  ) => {\n    if (!(municipality.metrics as unknown)) {\n      return 1\n    }\n\n    const {\n      metrics: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = municipality\n\n    return !(valueItem as unknown) ? 0 : valueItem.count\n  }\n\n  const getChartItems: Config[\"getChartItems\"] = () => {\n    const { populationRange, populationType, timeRangeIndex } = state\n    const itemsWithCount = municipalities.filter((municipality) => {\n      const {\n        metrics: {\n          [populationType]: { [timeRangeIndex]: valueItem },\n        },\n      } = municipality\n\n      return !!(valueItem as unknown)\n    })\n\n    const dataValues = itemsWithCount.map((municipality) => {\n      const {\n        metrics: {\n          [populationType]: { [timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return dataItem.count\n    })\n\n    const valueToIdx = dataValues.reduce<Record<string, number[] | undefined>>(\n      (...[acc, valueItem, valueIndex]) => {\n        acc[valueItem] = acc[valueIndex] ?? []\n        acc[valueItem]!.push(valueIndex)\n\n        return acc\n      },\n      {}\n    )\n\n    const sortedDataValues = dataValues.sort(\n      (...[municipalityAValue, municipalityBValue]) =>\n        municipalityAValue - municipalityBValue\n    )\n\n    const percentiles = sortedDataValues.reduce<number[]>(\n      (...[percentilesAcc, valueItem, valueIndex]) => {\n        const percentile = valueIndex / sortedDataValues.length\n        const { [valueItem]: unsortedIndexes } = valueToIdx\n\n        unsortedIndexes!.forEach((unsortedValueIndex: number) => {\n          percentilesAcc[unsortedValueIndex] = percentile\n        })\n\n        return percentilesAcc\n      },\n      []\n    )\n\n    return itemsWithCount.filter((...[, percentileIndex]) => {\n      const { [percentileIndex]: percentile } = percentiles\n\n      return (\n        typeof percentile === \"number\" &&\n        percentile >= populationRange[0] &&\n        percentile <= populationRange[1]\n      )\n    })\n  }\n\n  const getHeaderText: Config[\"getHeaderText\"] = ({ chartItems }) => {\n    const {\n      metrics: {\n        [state.populationType]: {\n          [state.timeRangeIndex]: { date },\n        },\n      },\n    } = chartItems[0]\n\n    const year = getYearStr(date)\n\n    const populationTotal = chartItems.reduce(\n      (...[acc, circleData]) =>\n        acc +\n        circleData.metrics[state.populationType][state.timeRangeIndex].count,\n      0\n    )\n\n    const populationText = `${formatPopulation(populationTotal)} ${\n      typeNouns[state.populationType]\n    }`\n\n    const { length: totalNum } = chartItems.filter(\n      (chartItem) =>\n        chartItem.metrics[state.populationType].length >=\n        state.timeRangeIndex + 1\n    )\n\n    return `Population in Malaga: ${year} - ${populationText}${\n      state.populationRange[0] === 0 && state.populationRange[1] === 1\n        ? \"\"\n        : ` - From ${(state.populationRange[0] * 100).toFixed(\n            0\n          )} percentile to ${(state.populationRange[1] * 100).toFixed(\n            0\n          )} percentile`\n    } - ${totalNum} municipalities`\n  }\n\n  const getItemId: Config[\"getItemId\"] = (municipality) => municipality.name\n\n  const getItemTitle: Config[\"getItemTitle\"] = ({ circleData }) => {\n    const {\n      metrics: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = circleData\n\n    if (!valueItem as unknown) {\n      return \"\"\n    }\n\n    const { [state.populationType]: itemsName } = typeNouns\n\n    return `${circleData.name} - ${formatPopulation(\n      valueItem.count\n    )} ${itemsName} - ${getYearStr(valueItem.date)}`\n  }\n\n  const getItemLabel: Config[\"getItemLabel\"] = (municipality) =>\n    municipality.name[0]!\n\n  const getIsSmall = () => state.populationType !== \"total\"\n\n  const onClick: Config[\"onClick\"] = (municipality) => {\n    if (!hotkeys.isPressed(\"control\")) {\n      return\n    }\n\n    window.open(\n      `https://www.google.com/search?${qs.stringify({\n        q: `Malaga ${municipality.name}`,\n      })}`\n    )\n  }\n\n  return {\n    colorDomain,\n    getChartItems,\n    getEmptyItem,\n    getHeaderText,\n    getIsSmall,\n    getItemId,\n    getItemLabel,\n    getItemMetric,\n    getItemTitle,\n    getStringForColor,\n    onClick,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { createChartConfig, createState, fetchData }\n","import { select } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\nimport $ from \"jquery\"\nimport \"jquery-ui/themes/base/all.css\"\n\nimport { CirclesChart } from \"./population-circles-chart\"\nimport {\n  createChartConfig,\n  createState,\n  fetchData,\n} from \"./population-circles-chart-data\"\nimport { CONTAINER_ID } from \"./ui-constants\"\n\nif (typeof window !== \"undefined\") {\n  require(\"jquery-ui/ui/widgets/slider\")\n}\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const state = createState()\n  const chartConfig = createChartConfig({ municipalities, state })\n\n  const chart = new CirclesChart(chartConfig)\n\n  select(\"form\").on(\n    \"change\",\n    // eslint-disable-next-line id-denylist\n    (changeEvent: { target: { value: typeof state[\"populationType\"] } }) => {\n      state.populationType = changeEvent.target.value\n      chart.update()\n    }\n  )\n\n  $(\".population-slider\").slider({\n    change: (...[, { values: populationValues }]) => {\n      const newValues = (populationValues as [number, number]).map(\n        (v) => v / 100\n      ) as [number, number]\n\n      state.populationRange = newValues\n      chart.update()\n    },\n    range: true,\n    values: [0, 100], // eslint-disable-line id-denylist\n  })\n\n  const max = municipalities[0].metrics.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (...[, { value: timeRangeIndex }]) => {\n      state.timeRangeIndex = timeRangeIndex as number\n      chart.update()\n    },\n    max,\n    min: 0,\n    value: 0, // eslint-disable-line id-denylist\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n} from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map((...[{ id, label }, radioIndex]) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default PopulationCircles\n"],"names":["slider","circle","window","require","dropShadowBaseId","margin","height","CirclesChart","chartConfig","this","config","deviation","name","slope","svg","select","rootElId","append","attr","html","header","text","svgContent","elements","setupZoom","update","width","getWidth","filteredData","getChartItems","hoverAnimations","join","structure","hierarchy","getEmptyItem","children","sum","getItemMetric","isSmall","getIsSmall","leaves","pack","size","padding","getHeaderText","chartItems","getDataKey","node","getItemId","data","leaf","selectAll","exit","remove","getTitle","getItemTitle","circleData","transition","duration","ease","easeCircleInOut","chartNode","x","y","enter","on","selection","styles","id","hoverAnimation","anime","complete","strokeWidth","targets","seek","onClick","color","scaleOrdinal","domain","colorDomain","range","schemeSet3","generateColor","getStringForColor","generateDarkerColor","baseColor","chroma","darken","hex","setupLetter","letter","getItemLabel","style","r","toFixed","setupCircle","forwardData","circles","texts","easeSinInOut","$","tooltip","track","document","getElementById","getBoundingClientRect","lastPosition","k","zoomBehavior","zoom","extent","zoomEvent","transform","call","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","CONTAINER_ID","fetchData","json","ROOT_PATH","originalMunicipalities","map","values","otherProps","metrics","formatPopulation","populationNum","Number","toLocaleString","undefined","maximumFractionDigits","minimumFractionDigits","typeNouns","females","males","total","getYearStr","dateStr","Date","getFullYear","createChartConfig","municipalities","state","municipality","populationRange","populationType","timeRangeIndex","itemsWithCount","filter","dataValues","count","valueToIdx","reduce","acc","valueItem","valueIndex","push","sortedDataValues","sort","municipalityAValue","municipalityBValue","percentiles","percentilesAcc","percentile","unsortedIndexes","forEach","unsortedValueIndex","percentileIndex","date","year","populationTotal","populationText","totalNum","chartItem","itemsName","hotkeys","open","qs","q","main","chart","changeEvent","value","change","populationValues","newValues","v","max","min","pageContext","label","radioIndex","className","defaultChecked","type","htmlFor"],"sourceRoot":""}