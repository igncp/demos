{"version":3,"sources":["webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.module.css","webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.ts","webpack://demos/./src/pages/d3js/multiline-voronoi.tsx"],"names":["axis","cityHover","formatStr","texts","cityMetric","cityName","trim","date","monthNames","getMonth","getFullYear","value","toFixed","fetchData","monthFormat","timeFormat","monthParse","timeParse","tsv","ROOT_PATH","dataItems","months","Object","keys","map","v","filter","Number","cities","initialCity","name","replace","metrics","itemKey","itemValue","margin","renderChart","rootElId","color","scaleOrdinal","schemePastel2","state","clickToggle","voronoiGroup","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","height","xScale","scaleTime","range","yScale","scaleLinear","lineXTransformer","lineYTransformer","cityNameToLine","svg","select","append","attr","domain","extent","max","city","nice","styles","call","axisBottom","axisLeft","ticks","style","text","addFilter","line","lineD3","x","y","generateVoronoi","usedCities","focus","flatCityMetrics","reduce","acc","forEach","push","voronoi","Delaunay","selectAll","data","enter","_cityMetric","index","renderCell","on","_e","linePath","classed","parentNode","appendChild","d","remove","inputData","find","c","generateLines","this","_city","toString","setVoronoi","checked","feMerge","form","property","e","target","pageContext","main","id","type","htmlFor"],"mappings":"yNAEWA,EAAO,wCAEPC,EAAY,6CCiCjBC,EAAY,QAEZC,EACQ,uBADRA,EAEU,SAACC,GAAD,OAA+BA,EAAWC,SAASC,OAAnD,MAFVH,EAGU,SAACC,GACb,IAAMG,EACJC,EAAWJ,EAAWG,KAAKE,YADnB,OAEHL,EAAWG,KAAKG,cAEvB,MAAM,KAAyB,IAAnBN,EAAWO,OAAaC,QAAQ,GAA5C,OAAqDL,GAInDM,EAAS,mCAAG,mGACVC,GAAcC,SAAWb,GACzBc,GAAaC,SAAUf,GAFb,UAIUgB,SACrBC,+CALW,cAIVC,EAJU,OAQVC,EAAiBC,OAAOC,KAAKH,EAAU,IAC1CI,KAAI,SAACC,GAAD,OAAOT,EAAWS,MACtBC,OAAOC,QAEJC,EAAiBR,EAAUI,KAAI,SAACK,GACpC,IAAMC,EAAOD,EAAYC,KACtBC,QAAQ,sCAAuC,IAC/CzB,OAEH,MAAO,CACL0B,QAASX,EAAOG,KAAI,SAACjB,GACnB,IAAM0B,EAAUnB,EAAYP,GACgB2B,EAAcL,EAAjDI,GACHtB,EAAgBgB,OAAOO,GAAa,IAE1C,MAAO,CACL7B,SAAUyB,EACVvB,OACAI,YAGJmB,WA7BY,kBAiCT,CAAEF,SAAQP,WAjCD,2CAAH,qDAoCTb,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGI2B,EACI,GADJA,EAEE,GAFFA,EAGG,GAHHA,EAIC,GAWDC,EAA2B,SAAC,GAAkC,IAAhCR,EAA+B,EAA/BA,OAAQP,EAAuB,EAAvBA,OAAQgB,EAAe,EAAfA,SAC5CC,GAAQC,SAAaC,OAErBC,EAGF,CACFC,aAAa,EACbC,aAAc,MAGVC,EAASC,SAASC,eAAeT,GAEvCO,EAAOG,UAAUC,IDjIgB,0DCmIjC,IAAMC,EACJL,EAAOM,wBAAwBD,MAAQd,EAAcA,EAEjDgB,EAAS,IAAMhB,EAAaA,EAE5BiB,GAASC,UAAYC,MAAM,CAAC,EAAGL,IAC/BM,GAASC,WAAcF,MAAM,CAACH,EAAQ,IAEtCM,EAAmB,SAACrD,GAAD,OAA4BgD,EAAOhD,EAAWG,OACjEmD,EAAmB,SAACtD,GAAD,OAA4BmD,EAAOnD,EAAWO,QAEjEgD,EAAyD,GAEzDC,GAAMC,QAAO,IAAIxB,GACpByB,OAAO,OACPC,KAAK,QAASd,EAAQd,EAAcA,GACpC4B,KAAK,SAAUZ,EAAShB,EAAaA,GACrC2B,OAAO,KACPC,KAAK,YALI,aAKsB5B,EALtB,IAKqCA,EALrC,KAOZiB,EAAOY,QAAOC,SAAa5C,IAC3BkC,EACGS,OAAO,CACN,GACAE,SAAItC,GAAQ,SAACuC,GAAD,OACVD,SAAIC,EAAKnC,SAAS,SAAC5B,GAAD,OAA4BA,EAAWO,cAG5DyD,OAEHR,EACGE,OAAO,KACPC,KAAK,QAAYM,EAFpB,YAGGN,KAAK,YAHR,eAGoCZ,EAHpC,KAIGmB,MAAKC,SAAWnB,IAEnBQ,EACGE,OAAO,KACPC,KAAK,QAAYM,EAFpB,YAGGC,MAAKE,SAASjB,GAAQkB,MAAM,GAAI,MAChCX,OAAO,QACPC,KAAK,IAAK,IACVA,KAAK,KAAM,SACXW,MAAM,cAAe,QACrBC,KAAKxE,GAERyE,EAAUhB,GAEV,IAAMiB,GAAOC,WAAqBC,EAAEtB,GAAkBuB,EAAEtB,GAElDuB,EAAkB,SAACC,GACvB,IA6CMC,EAAQvB,EACXE,OAAO,KACPC,KAAK,YAAa,wBAClBA,KAAK,QDlOO,0CCoOfoB,EAAMrB,OAAO,UAAUC,KAAK,IAAK,KACjCoB,EAAMrB,OAAO,QAAQC,KAAK,QAAS,SAASA,KAAK,KAAM,IACvDoB,EAAMrB,OAAO,QAAQC,KAAK,QAAS,SAASA,KAAK,KAAM,IAEvD,IAAMqB,EAAkBF,EAAWG,QAAO,SAACC,EAAKnB,GAK9C,OAJAA,EAAKnC,QAAQuD,SAAQ,SAACnF,GACpBkF,EAAIE,KAAKpF,MAGJkF,IACN,IAEGG,EAAUC,SACdN,EACA3B,EACAC,GACA+B,QAAQ,EACPtD,GACAA,EACDc,EAAQd,EACRgB,EAAShB,IAGXM,EAAME,aAAeiB,EAAIE,OAAO,KAAKC,KAAK,QD1PzB,4CC4PjBtB,EAAME,aACHgD,UAAU,QACVC,KAAKR,GACLS,QACA/B,OAAO,QACPC,KAAK,KAAK,SAAC+B,EAAyBC,GAA1B,OAAoCN,EAAQO,WAAWD,MACjEE,GAAG,aAjFY,SAACC,EAAa9F,GAC9B,IAA+B+F,EAAaxC,EAAnCvD,EAAWC,WAEpBwD,QAAOsC,GAAUC,QAAQ/B,GAAkB,GACzC8B,EAASE,WAA2BC,YAAYH,GAElDhB,EAAMpB,KACJ,YADF,aAEeN,EAAiBrD,GAFhC,IAE+CsD,EAC3CtD,GAHJ,KAOA+E,EAAMtB,OAAO,UAAUc,KAAKxE,EAAmBC,IAC/C+E,EAAMtB,OAAO,UAAUc,KAAKxE,EAAmBC,OAoE9C6F,GAAG,YAjEW,SAACC,EAAaK,GAC7B,IAAsBJ,EAAaxC,EAA1B4C,EAAElG,UAIX,OAFAwD,QAAOsC,GAAUC,QAAQ/B,GAAkB,GAEpCc,EAAMpB,KAAK,YAAa,2BA6D9BkC,GAAG,SA1DU,SAACC,EAAaK,GAC5B9D,EAAMC,aAAeD,EAAMC,aAE3BiD,SAAU,WAAWa,UACrBb,SAAU,YAAYa,UACtBb,SAAU,UAAUa,SAEpB,IAAMC,EACAhE,EAAMC,YAGD,CAFMd,EAAO8E,MAAK,SAACC,GAAD,OAAOA,EAAE7E,OAASyE,EAAElG,aAKxCuB,EAGTgF,EAAcH,OA4CZG,EAAgB,SAAC1B,GACrBtB,EACGE,OAAO,KACPC,KAAK,QD7QQ,2CC8Qb4B,UAAU,QACVC,KAAKV,GACLW,QACA/B,OAAO,QACPC,KAAK,KAAK,SAAUI,GAGnB,OAFAR,EAAeQ,EAAKrC,MAAQ+E,KAErBhC,EAAKV,EAAKnC,YAElB0C,MAAM,UAAU,SAACoC,EAAOf,GAAR,OAAkBzD,EAAMyD,EAAMgB,eAC9CrC,MAAM,UAAU,iBAAM,uBAEzBO,EAAgBC,IAKlB,OAFA0B,EAAchF,GAEP,CACLoF,WAAY,SAACC,GACXxE,EAAME,aAAcyD,QD7RD,+CC6R6Ba,MAKhDrC,EAAY,SAChBhB,GAEA,IACMlC,EADOkC,EAAIE,OAAO,QACJA,OAAO,UAAUC,KAAK,KAAM,eAEhDrC,EACGoC,OAAO,kBACPC,KAAK,KAAM,eACXA,KAAK,eAAgB,GAExBrC,EAAOoC,OAAO,YAAYC,KAAK,KAAM,GAAGA,KAAK,KAAM,GACnDrC,EACGoC,OAAO,uBACPA,OAAO,WACPC,KAAK,QAAS,KACdA,KAAK,OAAQ,UAEhB,IAAMmD,EAAUxF,EAAOoC,OAAO,WAE9BoD,EAAQpD,OAAO,eACfoD,EAAQpD,OAAO,eAAeC,KAAK,KAAM,kBA0B3C,EAvBU,mCAAG,uGACL1B,EAAW,QADN,SAGsBxB,IAHtB,gBAGHe,EAHG,EAGHA,OAAQP,EAHL,EAGKA,OAHL,EAKYe,EAAY,CACjCR,SACAP,SACAgB,aAHM2E,EALG,EAKHA,WAMFG,EAAOtE,SAASC,eAAe,QACvBD,SAASC,eAAeT,GAEhCiE,YAAYa,IAElBtD,QAAO,iBACJuD,SAAS,YAAY,GACrBnB,GAAG,UAAU,SAACoB,GACbL,EAAYK,EAAEC,OAA4BL,UAAW,MAnB9C,4CAAH,qDC/SV,EAVyB,SAAC,GAAD,IAAGM,EAAH,EAAGA,YAAH,OACvB,gBAAC,IAAD,CAAMC,KAAMA,EAAMD,YAAaA,GAC7B,wBAAME,GAAG,QACP,yBAAOA,GAAG,eAAeC,KAAK,aAAc,IAC5C,yBAAOC,QAAQ,gBAAf,uBAEF,uBAAKF,GAAG","file":"component---src-pages-d-3-js-multiline-voronoi-tsx-74459fc152cf9af4f894.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport var multilineVoronoiChart = \"multiline-voronoi-module--multilineVoronoiChart--2aVN8\";\nexport var axis = \"multiline-voronoi-module--axis--2WPgb\";\nexport var cities = \"multiline-voronoi-module--cities--o95QD\";\nexport var cityHover = \"multiline-voronoi-module--cityHover--1wUSq\";\nexport var focus = \"multiline-voronoi-module--focus--2F38m\";\nexport var voronoi = \"multiline-voronoi-module--voronoi--17R-N\";\nexport var voronoiShow = \"multiline-voronoi-module--voronoiShow--PdA3D\";","import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  line as lineD3,\n  max,\n  scaleLinear,\n  scaleOrdinal,\n  scaleTime,\n  schemePastel2,\n  select,\n  selectAll,\n  timeFormat,\n  timeParse,\n  tsv,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./multiline-voronoi.module.css\"\n\ntype InitialDataItem = {\n  [monthKey: string]: string\n  name: string\n}\n\ntype City = {\n  metrics: CityMetric[]\n  name: string\n}\n\ntype CityMetric = {\n  cityName: string\n  date: Date\n  value: number\n}\n\nconst formatStr = \"%Y-%m\"\n\nconst texts = {\n  chartTitle: \"US Unemployment Rate\",\n  tooltipPart1: (cityMetric: CityMetric) => `${cityMetric.cityName.trim()}: `,\n  tooltipPart2: (cityMetric: CityMetric) => {\n    const date = `${\n      monthNames[cityMetric.date.getMonth()]\n    } of ${cityMetric.date.getFullYear()}`\n\n    return ` ${(cityMetric.value * 100).toFixed(2)}% - ${date}`\n  },\n}\n\nconst fetchData = async () => {\n  const monthFormat = timeFormat(formatStr)\n  const monthParse = timeParse(formatStr)\n\n  const dataItems = ((await tsv(\n    `${ROOT_PATH}data/d3js/multiline-voronoi/data.tsv`\n  )) as unknown) as InitialDataItem[]\n\n  const months: Date[] = Object.keys(dataItems[0])\n    .map((v) => monthParse(v)!)\n    .filter(Number)\n\n  const cities: City[] = dataItems.map((initialCity: InitialDataItem) => {\n    const name = initialCity.name\n      .replace(/(msa|necta div|met necta|met div)$/i, \"\")\n      .trim()\n\n    return {\n      metrics: months.map((date: Date) => {\n        const itemKey = monthFormat(date) as string\n        const { [itemKey as keyof InitialDataItem]: itemValue } = initialCity\n        const value: number = Number(itemValue) / 100\n\n        return {\n          cityName: name,\n          date,\n          value,\n        }\n      }),\n      name,\n    }\n  })\n\n  return { cities, months }\n}\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nconst margin = {\n  bottom: 70,\n  left: 80,\n  right: 70,\n  top: 60,\n}\n\ntype RenderChart = (o: {\n  cities: City[]\n  months: Date[]\n  rootElId: string\n}) => {\n  setVoronoi: (v: boolean) => void\n}\n\nconst renderChart: RenderChart = ({ cities, months, rootElId }) => {\n  const color = scaleOrdinal(schemePastel2)\n\n  const state: {\n    clickToggle: boolean\n    voronoiGroup: Selection<SVGGElement, unknown, HTMLElement, unknown> | null\n  } = {\n    clickToggle: false,\n    voronoiGroup: null,\n  }\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.multilineVoronoiChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const height = 500 - margin.top - margin.bottom\n\n  const xScale = scaleTime().range([0, width])\n  const yScale = scaleLinear().range([height, 0])\n\n  const lineXTransformer = (cityMetric: CityMetric) => xScale(cityMetric.date)\n  const lineYTransformer = (cityMetric: CityMetric) => yScale(cityMetric.value)\n\n  const cityNameToLine: { [cityName: string]: SVGPathElement } = {}\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  xScale.domain(extent<Date>(months) as [Date, Date])\n  yScale\n    .domain([\n      0,\n      max(cities, (city: City) =>\n        max(city.metrics, (cityMetric: CityMetric) => cityMetric.value)\n      ) as number,\n    ])\n    .nice()\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.axis} axis--x`)\n    .attr(\"transform\", `translate(0,${height})`)\n    .call(axisBottom(xScale))\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.axis} axis--y`)\n    .call(axisLeft(yScale).ticks(10, \"%\"))\n    .append(\"text\")\n    .attr(\"x\", 20)\n    .attr(\"dy\", \".32em\")\n    .style(\"font-weight\", \"bold\")\n    .text(texts.chartTitle)\n\n  addFilter(svg)\n\n  const line = lineD3<CityMetric>().x(lineXTransformer).y(lineYTransformer)\n\n  const generateVoronoi = (usedCities: City[]) => {\n    const mouseover = (_e: unknown, cityMetric: CityMetric) => {\n      const { [cityMetric.cityName]: linePath } = cityNameToLine\n\n      select(linePath).classed(styles.cityHover, true)\n      ;(linePath.parentNode as SVGGElement).appendChild(linePath)\n\n      focus.attr(\n        \"transform\",\n        `translate(${lineXTransformer(cityMetric)},${lineYTransformer(\n          cityMetric\n        )})`\n      )\n\n      focus.select(\".text1\").text(texts.tooltipPart1(cityMetric))\n      focus.select(\".text2\").text(texts.tooltipPart2(cityMetric))\n    }\n\n    const mouseout = (_e: unknown, d: CityMetric) => {\n      const { [d.cityName]: linePath } = cityNameToLine\n\n      select(linePath).classed(styles.cityHover, false)\n\n      return focus.attr(\"transform\", \"translate(-100,-100)\")\n    }\n\n    const clicked = (_e: unknown, d: CityMetric) => {\n      state.clickToggle = !state.clickToggle\n\n      selectAll(\".cities\").remove()\n      selectAll(\".voronoi\").remove()\n      selectAll(\".focus\").remove()\n\n      const inputData: City[] = (() => {\n        if (state.clickToggle) {\n          const city = cities.find((c) => c.name === d.cityName) as City\n\n          return [city]\n        }\n\n        return cities\n      })()\n\n      generateLines(inputData)\n    }\n\n    const focus = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(-100,-100)\")\n      .attr(\"class\", styles.focus)\n\n    focus.append(\"circle\").attr(\"r\", 3.5)\n    focus.append(\"text\").attr(\"class\", \"text1\").attr(\"y\", -30)\n    focus.append(\"text\").attr(\"class\", \"text2\").attr(\"y\", -10)\n\n    const flatCityMetrics = usedCities.reduce((acc, city) => {\n      city.metrics.forEach((cityMetric) => {\n        acc.push(cityMetric)\n      })\n\n      return acc\n    }, [] as CityMetric[])\n\n    const voronoi = Delaunay.from(\n      flatCityMetrics,\n      lineXTransformer,\n      lineYTransformer\n    ).voronoi([\n      -margin.left,\n      -margin.top,\n      width + margin.right,\n      height + margin.bottom,\n    ])\n\n    state.voronoiGroup = svg.append(\"g\").attr(\"class\", styles.voronoi)\n\n    state.voronoiGroup\n      .selectAll(\"path\")\n      .data(flatCityMetrics)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (_cityMetric: CityMetric, index) => voronoi.renderCell(index))\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseout\", mouseout)\n      .on(\"click\", clicked)\n  }\n\n  const generateLines = (usedCities: City[]) => {\n    svg\n      .append(\"g\")\n      .attr(\"class\", styles.cities)\n      .selectAll(\"path\")\n      .data(usedCities)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", function (city: City) {\n        cityNameToLine[city.name] = this\n\n        return line(city.metrics)\n      })\n      .style(\"stroke\", (_city, index) => color(index.toString()))\n      .style(\"filter\", () => \"url(#drop-shadow)\")\n\n    generateVoronoi(usedCities)\n  }\n\n  generateLines(cities)\n\n  return {\n    setVoronoi: (checked: boolean) => {\n      state.voronoiGroup!.classed(styles.voronoiShow, checked)\n    },\n  }\n}\n\nconst addFilter = (\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", \"drop-shadow\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 1)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \"1\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n\n  const { cities, months } = await fetchData()\n\n  const { setVoronoi } = renderChart({\n    cities,\n    months,\n    rootElId,\n  })\n\n  const form = document.getElementById(\"form\") as HTMLElement\n  const chart = document.getElementById(rootElId) as HTMLElement\n\n  chart.appendChild(form)\n\n  select(\"#show-voronoi\")\n    .property(\"disabled\", false)\n    .on(\"change\", (e: MouseEvent) => {\n      setVoronoi((e.target as HTMLInputElement).checked || false)\n    })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/multiline-voronoi/multiline-voronoi\"\n\nconst MultilineVoronoi = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form id=\"form\">\n      <input id=\"show-voronoi\" type=\"checkbox\" />{\" \"}\n      <label htmlFor=\"show-voronoi\">Show Voronoi lines</label>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default MultilineVoronoi\n"],"sourceRoot":""}