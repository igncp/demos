{"componentChunkName":"component---src-pages-d-3-js-energy-sankey-tsx","path":"/d3js/energy-sankey/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[["d3-sankey API reference","https://github.com/d3/d3-sankey#api-reference"],["d3-sankey Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-sankey/index.d.ts"],["mix-blend-mode CSS property","https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode"],["gradientUnits SVG attribute","https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientUnits"],["chroma-js API reference","https://vis4.net/chromajs/#api"],["chroma-js Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chroma-js/index.d.ts"],["animejs API reference","https://animejs.com/documentation/"],["animejs Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/animejs/index.d.ts"],["hotkeys API reference","https://github.com/jaywcjlove/hotkeys#api-reference"],["hotkeys Types","https://github.com/jaywcjlove/hotkeys/blob/master/index.d.ts"]],"isCompleted":true,"name":"Energy Sankey","notes":["Added interaction on click","You can click a rect while pressing control to Google Search"],"sources":["https://observablehq.com/@d3/sankey-diagram","https://www.gov.uk/guidance/2050-pathways-analysis","https://designmodo.com/animate-svg-gradients/"],"summary":[],"category":"d3js","files":{"cssModule":".energyNode {\n  cursor: pointer;\n}\n\n.energyLinkG {\n  mix-blend-mode: multiply;\n}\n\n.energyLink {\n  cursor: pointer;\n  stroke-opacity: 0.7;\n\n  &:hover {\n    stroke-opacity: 0.9;\n  }\n}\n","demo":[{"content":"import anime from \"animejs\"\nimport chroma from \"chroma-js\"\nimport {\n  Selection,\n  format as formatD3,\n  json,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport {\n  SankeyLink,\n  SankeyNode,\n  sankey as sankeyD3,\n  sankeyLeft,\n  sankeyLinkHorizontal,\n} from \"d3-sankey\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\nimport * as styles from \"./energy-sankey.module.css\"\n\ntype EnergyDataLink = {\n  source: string\n  target: string\n  value: number\n}\n\ntype EnergyDataNode = {\n  category: string\n  name: string\n}\n\ntype EnergyData = {\n  links: EnergyDataLink[]\n  nodes: EnergyDataNode[]\n  units: string\n}\n\ntype EnergySankeyNode = SankeyNode<EnergyDataNode, EnergyDataLink>\ntype EnergySankeyLink = SankeyLink<EnergyDataNode, EnergyDataLink>\n\ntype State = {\n  isInTransition: boolean\n  linkSelected: boolean\n  selectedNode: string\n}\n\ntype AddedGradients = { [k: string]: true }\n\ntype ShouldPreventDefault = boolean\ntype OnNodeClick = (node: EnergySankeyNode) => ShouldPreventDefault\n\nconst getRandomInt = (min: number, max: number): number => {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst fetchData = () =>\n  json(`${ROOT_PATH}data/d3js/energy-sankey/data.json`) as Promise<EnergyData>\n\nconst sankeyHeight = 1000\nconst legendHeight = 0\nconst svgHeight = sankeyHeight + legendHeight\n\nconst renderChart = ({\n  data,\n  onNodeClick,\n  rootElId,\n}: {\n  data: EnergyData\n  onNodeClick?: OnNodeClick\n  rootElId: string\n}) => {\n  const state: State = {\n    isInTransition: false,\n    linkSelected: false,\n    selectedNode: \"\",\n  }\n\n  const el = document.getElementById(rootElId) as HTMLElement\n\n  const format = (() => {\n    const formatFn = formatD3(\",.0f\")\n\n    return (d: number) => `${formatFn(d)} ${data.units}`\n  })()\n  const color = (() => {\n    const colorFn = scaleOrdinal(schemePastel2)\n\n    return (d: EnergyDataNode) => colorFn(d.name)\n  })()\n\n  const { width } = el.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append<SVGElement>(\"svg\")\n    .attr(\"height\", svgHeight)\n    .attr(\"width\", width)\n\n  const sankeyVal = sankeyD3<EnergyDataNode, EnergyDataLink>()\n    .nodeId((d) => d.name)\n    .nodeAlign(sankeyLeft)\n    .nodeWidth(15)\n    .nodePadding(10)\n    .extent([\n      [1, 5],\n      [width - 1, sankeyHeight - 5],\n    ])\n\n  const { links, nodes } = sankeyVal({\n    links: data.links.map((d: EnergyDataLink) => Object.assign({}, d)),\n    nodes: data.nodes.map((d: EnergyDataNode) => Object.assign({}, d)),\n  })\n\n  const nodeG = svg.append(\"g\").attr(\"stroke\", \"#000\")\n\n  let lastAnime = () => {}\n\n  const node = nodeG\n    .selectAll(\"rect\")\n    .data<EnergySankeyNode>(nodes)\n    .join(\"rect\")\n    .attr(\"class\", styles.energyNode)\n    .attr(\"x\", (d: EnergySankeyNode) => d.x0!)\n    .attr(\"y\", (d: EnergySankeyNode) => d.y0!)\n    .attr(\"height\", (d: EnergySankeyNode) => d.y1! - d.y0!)\n    .attr(\"width\", (d: EnergySankeyNode) => d.x1! - d.x0!)\n    .attr(\"fill\", color)\n    .on(\"mouseenter\", function () {\n      lastAnime()\n\n      const animationFirst = anime({\n        direction: \"alternate\",\n        duration: 1000,\n        easing: \"easeInOutSine\",\n        loop: false,\n        strokeDashoffset: [anime.setDashoffset, 0],\n        targets: this,\n      })\n      const animationSecond = anime({\n        direction: \"alternate\",\n        duration: 2000,\n        easing: \"spring(1, 80, 10, 0)\",\n        loop: true,\n        opacity: [0.6, 1, 0.6],\n        targets: this,\n      })\n\n      lastAnime = () => {\n        animationFirst.seek(animationFirst.duration)\n        animationSecond.seek(0)\n        anime.remove(this)\n        lastAnime = () => {}\n      }\n    })\n    .on(\"mouseleave\", () => {\n      lastAnime()\n    })\n    .on(\"click\", (_e: unknown, d: EnergySankeyNode) =>\n      nodeClickHandler({\n        d,\n        linkPath,\n        onNodeClick,\n        state,\n      })\n    )\n\n  node.attr(\"title\", (d) =>\n    [d.category === d.name ? \"\" : d.category, d.name, format(d.value!)]\n      .filter(Boolean)\n      .join(\"\\n\")\n  )\n\n  $(\".energy-node\").tooltip({\n    track: true,\n  })\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .selectAll(\"g\")\n    .data<EnergySankeyLink>(links)\n    .join(\"g\")\n    .attr(\"class\", styles.energyLinkG)\n\n  const linkPathGenerator = sankeyLinkHorizontal()\n  const addedGradients: AddedGradients = {}\n\n  const linkPath = link\n    .append(\"path\")\n    .attr(\"d\", (d: EnergySankeyLink) => {\n      const isHorizontalLine = d.y0 === d.y1\n      const result = linkPathGenerator(\n        // this is necessary for the default gradientUnits (objectBoundingBox) to work\n        // https://stackoverflow.com/a/34687362\n        isHorizontalLine\n          ? {\n              ...d,\n              y1: d.y1! + 0.1,\n            }\n          : d\n      )\n\n      return result\n    })\n    .attr(\"stroke\", (d) => {\n      const fromColor = color(d.source as EnergyDataNode)\n      const toColor = color(d.target as EnergyDataNode)\n\n      const id = createGradients(svg, fromColor, toColor, addedGradients)\n\n      return `url(#${id})`\n    })\n    .attr(\"class\", styles.energyLink)\n    .attr(\"stroke-width\", (d) => Math.max(1, d.width!))\n    .on(\"click\", function () {\n      if (state.isInTransition) return\n\n      const currentLink = select(this)\n\n      if (state.linkSelected) {\n        linkPath.attr(\"display\", null).style(\"opacity\", null)\n      } else {\n        linkPath.attr(\"display\", \"none\")\n        currentLink.attr(\"display\", null)\n      }\n\n      state.selectedNode = \"\"\n      state.linkSelected = !state.linkSelected\n    })\n\n  link.attr(\n    \"title\",\n    (d) =>\n      `${(d.source as EnergySankeyNode).name} â†’ ${\n        (d.target as EnergySankeyNode).name\n      }\\n${format(d.value)}`\n  )\n\n  $(\".energy-link\").tooltip({\n    track: true,\n  })\n\n  nodeG.each(function (this) {\n    const parentEl = this.parentNode as HTMLElement\n\n    parentEl.appendChild(this)\n  })\n\n  svg\n    .append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .selectAll(\"text\")\n    .data(nodes)\n    .join(\"text\")\n    .attr(\"x\", (d) => (d.x0! < width / 2 ? d.x1! + 6 : d.x0! - 6))\n    .attr(\"y\", (d) => (d.y1! + d.y0!) / 2)\n    .attr(\"dy\", \"0.35em\")\n    .style(\"font-size\", \"16px\")\n    .attr(\"text-anchor\", (d) => (d.x0! < width / 2 ? \"start\" : \"end\"))\n    .text((d) => d.name)\n}\n\nconst nodeClickHandler = ({\n  d,\n  linkPath,\n  onNodeClick,\n  state,\n}: {\n  d: EnergySankeyNode\n  linkPath: Selection<SVGPathElement, EnergySankeyLink, SVGGElement, unknown>\n  onNodeClick?: OnNodeClick\n  state: State\n}) => {\n  if (state.isInTransition) return\n\n  if (onNodeClick) {\n    const shouldPreventDefault = onNodeClick(d)\n\n    if (shouldPreventDefault) return\n  }\n\n  if (state.selectedNode === d.name) {\n    linkPath.attr(\"display\", null).style(\"opacity\", null)\n    state.selectedNode = \"\"\n  } else {\n    state.isInTransition = true\n\n    if (state.selectedNode) {\n      linkPath\n        .style(\"opacity\", (l) =>\n          [\n            (l.source as EnergySankeyNode).name,\n            (l.target as EnergySankeyNode).name,\n          ].includes(state.selectedNode)\n            ? null\n            : 0\n        )\n        .attr(\"display\", null)\n    }\n\n    requestAnimationFrame(() => {\n      linkPath\n        .transition()\n        .duration(500)\n        .style(\"opacity\", (l) =>\n          [\n            (l.source as EnergySankeyNode).name,\n            (l.target as EnergySankeyNode).name,\n          ].includes(d.name)\n            ? null\n            : 0\n        )\n        .on(\"end\", () => {\n          state.isInTransition = false\n          linkPath.attr(\"display\", (l) =>\n            [\n              (l.source as EnergySankeyNode).name,\n              (l.target as EnergySankeyNode).name,\n            ].includes(d.name)\n              ? null\n              : \"none\"\n          )\n        })\n\n      state.selectedNode = d.name\n    })\n  }\n}\n\nconst createGradients = (\n  svg: Selection<SVGElement, unknown, HTMLElement, unknown>,\n  fromColor: string,\n  toColor: string,\n  addedGradients: AddedGradients\n): string => {\n  const id = `link-gradient-${fromColor}-${toColor}`.replace(/#/g, \"\")\n\n  if (id in addedGradients) {\n    return id\n  }\n\n  const duration = getRandomInt(1, 3)\n  const colorScale = chroma.scale([fromColor, toColor])\n\n  const text = `\n<linearGradient id=\"${id}\">\n  <stop offset=\"0%\" stop-color=\"${fromColor}\" />\n  <stop offset=\"50%\" stop-color=\"${colorScale(0.5)}\">\n    <animate attributeName=\"offset\"\n      values=\"${[5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4]\n        .map((n) => `.${n}`)\n        .join(\";\")}\"\n      dur=\"${duration}s\"\n      repeatCount=\"indefinite\" />\n  </stop>\n  <stop offset=\"100%\" stop-color=\"${toColor}\" />\n</linearGradient>\n`.trim()\n\n  svg.append(\"defs\").html(text)\n\n  addedGradients[id] = true\n\n  return id\n}\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const data = await fetchData()\n\n  renderChart({\n    data,\n    onNodeClick: (node) => {\n      if (!hotkeys.isPressed(\"control\")) {\n        return false\n      }\n\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          ie: \"UTF-8\",\n          q: `Energy ${node.name}`,\n        })}`\n      )\n\n      return true\n    },\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","fileName":"energy-sankey"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/energy-sankey/energy-sankey\"\n\nconst EnergySankey = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default EnergySankey\n","type":"tsx"}},"key":"energy-sankey"},"meta":{"description":"Sankey diagram with multiple interactive parts and animations. It handles the results alignments."}}},"staticQueryHashes":[]}