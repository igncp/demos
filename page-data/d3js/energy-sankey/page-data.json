{"componentChunkName":"component---src-pages-d-3-js-energy-sankey-tsx","path":"/d3js/energy-sankey/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[["d3-sankey API reference","https://github.com/d3/d3-sankey#api-reference"],["d3-sankey Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-sankey/index.d.ts"]],"isCompleted":false,"name":"Energy Sankey","notes":["Added interaction on click"],"sources":["https://observablehq.com/@d3/sankey-diagram","https://www.gov.uk/guidance/2050-pathways-analysis"],"summary":[],"category":"d3js","files":{"demo":{"content":"import {\n  json,\n  select,\n  format as formatD3,\n  scaleOrdinal,\n  schemePastel2,\n} from \"d3\"\nimport { sankey as sankeyD3, sankeyLinkHorizontal, sankeyLeft } from \"d3-sankey\"\n\ntype EnergyDataLink = {\n  source: string\n  target: string\n  value: number\n}\n\ntype EnergyDataNode = {\n  category: string\n  name: string\n}\n\ntype EnergyData = {\n  links: EnergyDataLink[]\n  nodes: EnergyDataNode[]\n  units: string\n}\n\nconst fetchData = () =>\n  json(`${ROOT_PATH}data/d3js/energy-sankey/data.json`) as Promise<EnergyData>\n\nconst height = 1000\nconst defaultOpacity = 0.7\n\nconst renderChart = ({\n  rootElId,\n  data,\n}: {\n  rootElId: string\n  data: EnergyData\n}) => {\n  const state = {\n    isInTransition: false,\n    linkSelected: false,\n    selectedNode: \"\",\n  }\n\n  const el = document.getElementById(rootElId) as HTMLElement\n\n  const format = (() => {\n    const formatFn = formatD3(\",.0f\")\n\n    return (d: any) => `${formatFn(d)} ${data.units}`\n  })()\n  const color = (() => {\n    const colorFn = scaleOrdinal(schemePastel2)\n\n    return (d: any) => colorFn(d.category === undefined ? d.name : d.category)\n  })()\n\n  const { width } = el.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append<SVGElement>(\"svg\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n\n  const sankeyVal = sankeyD3()\n    .nodeId((d: any) => d.name)\n    .nodeAlign(sankeyLeft)\n    .nodeWidth(15)\n    .nodePadding(10)\n    .extent([\n      [1, 5],\n      [width - 1, height - 5],\n    ])\n\n  const { nodes, links } = sankeyVal({\n    links: data.links.map((d: any) => Object.assign({}, d)),\n    nodes: data.nodes.map((d: any) => Object.assign({}, d)),\n  }) as any\n\n  const node = svg\n    .append(\"g\")\n    .attr(\"stroke\", \"#000\")\n    .selectAll(\"rect\")\n    .data(nodes)\n    .join(\"rect\")\n    .attr(\"x\", (d: any) => d.x0)\n    .attr(\"y\", (d: any) => d.y0)\n    .attr(\"height\", (d: any) => d.y1 - d.y0)\n    .attr(\"width\", (d: any) => d.x1 - d.x0)\n    .attr(\"fill\", color as any)\n    .style(\"opacity\", defaultOpacity)\n    .style(\"cursor\", \"pointer\")\n    .on(\"mouseenter\", function () {\n      if (state.isInTransition) return\n      select(this).style(\"opacity\", 1)\n    })\n    .on(\"mouseleave\", function () {\n      if (state.isInTransition) return\n      select(this).style(\"opacity\", defaultOpacity)\n    })\n    .on(\"click\", (_e, d: any) => {\n      if (state.isInTransition) return\n\n      if (state.selectedNode === d.name) {\n        linkPath.attr(\"display\", null).style(\"opacity\", defaultOpacity)\n        state.selectedNode = \"\"\n      } else {\n        state.isInTransition = true\n\n        if (state.selectedNode) {\n          linkPath\n            .style(\"opacity\", (l: any) =>\n              [l.source.name, l.target.name].includes(state.selectedNode)\n                ? defaultOpacity\n                : 0\n            )\n            .attr(\"display\", null)\n        }\n\n        requestAnimationFrame(() => {\n          linkPath\n            .transition()\n            .duration(500)\n            .style(\"opacity\", (l: any) =>\n              [l.source.name, l.target.name].includes(d.name)\n                ? defaultOpacity\n                : 0\n            )\n            .on(\"end\", () => {\n              state.isInTransition = false\n              linkPath.attr(\"display\", (l: any) =>\n                [l.source.name, l.target.name].includes(d.name) ? null : \"none\"\n              )\n            })\n\n          state.selectedNode = d.name\n        })\n      }\n    })\n\n  node\n    .append(\"title\")\n    .text((d: any) =>\n      [d.category === d.name ? \"\" : d.category, d.name, format(d.value)]\n        .filter(Boolean)\n        .join(\"\\n\")\n    )\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke-opacity\", 0.5)\n    .selectAll(\"g\")\n    .data(links as any)\n    .join(\"g\")\n    .style(\"mix-blend-mode\", \"multiply\")\n\n  const linkPath = link\n    .append(\"path\")\n    .attr(\"d\", sankeyLinkHorizontal() as any)\n    .style(\"opacity\", defaultOpacity)\n    .attr(\"stroke\", \"#aaa\")\n    .attr(\"stroke-width\", (d: any) => Math.max(1, d.width))\n    .on(\"mouseenter\", function () {\n      if (state.isInTransition) return\n      select(this).style(\"opacity\", 1)\n    })\n    .on(\"mouseleave\", function () {\n      if (state.isInTransition) return\n      select(this).style(\"opacity\", defaultOpacity)\n    })\n    .on(\"click\", function () {\n      if (state.isInTransition) return\n\n      const currentLink = select(this)\n\n      if (state.linkSelected) {\n        linkPath.attr(\"display\", null)\n      } else {\n        linkPath.attr(\"display\", \"none\")\n        currentLink.attr(\"display\", null)\n      }\n\n      state.selectedNode = \"\"\n      state.linkSelected = !state.linkSelected\n    })\n\n  link\n    .append(\"title\")\n    .text((d: any) => `${d.source.name} â†’ ${d.target.name}\\n${format(d.value)}`)\n\n  svg\n    .append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", 10)\n    .selectAll(\"text\")\n    .data(nodes)\n    .join(\"text\")\n    .attr(\"x\", (d: any) => (d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6))\n    .attr(\"y\", (d: any) => (d.y1 + d.y0) / 2)\n    .attr(\"dy\", \"0.35em\")\n    .attr(\"text-anchor\", (d: any) => (d.x0 < width / 2 ? \"start\" : \"end\"))\n    .text((d: any) => d.name)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({\n    data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/energy-sankey/energy-sankey\"\n\nconst Pie = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Pie\n","type":"tsx"},"styl":""},"key":"energy-sankey"},"meta":{"description":""}}},"staticQueryHashes":[]}