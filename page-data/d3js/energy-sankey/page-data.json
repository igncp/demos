{"componentChunkName":"component---src-pages-d-3-js-energy-sankey-tsx","path":"/d3js/energy-sankey/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[["d3-sankey API reference","https://github.com/d3/d3-sankey#api-reference"],["d3-sankey Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-sankey/index.d.ts"],["mix-blend-mode CSS property","https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode"],["gradientUnits SVG attribute","https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientUnits"],["chroma-js API reference","https://vis4.net/chromajs/#api"],["chroma-js Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chroma-js/index.d.ts"],["animejs API reference","https://animejs.com/documentation/"],["animejs Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/animejs/index.d.ts"],["hotkeys API reference","https://github.com/jaywcjlove/hotkeys#api-reference"],["hotkeys Types","https://github.com/jaywcjlove/hotkeys/blob/master/index.d.ts"]],"isCompleted":true,"name":"Energy Sankey","notes":["Added interaction on click","You can click a rect while pressing control to Google Search"],"sources":["https://observablehq.com/@d3/sankey-diagram","https://www.gov.uk/guidance/2050-pathways-analysis","https://designmodo.com/animate-svg-gradients/"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".chartNode {\n  cursor: pointer;\n}\n\n.chartLinkG {\n  mix-blend-mode: multiply;\n}\n\n.chartLink {\n  cursor: pointer;\n  stroke-opacity: 0.7;\n\n  &:hover {\n    stroke-opacity: 0.9;\n  }\n}\n","fileName":"energy-sankey.module.css"}],"demoTS":[{"content":"import hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\nimport { renderChart } from \"./energy-sankey-chart\"\nimport {\n  CONTAINER_ID,\n  createChartConfig,\n  fetchData,\n} from \"./energy-sankey-chart-data\"\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const energySankeyData = await fetchData()\n\n  const chartConfig = createChartConfig({\n    energySankeyData,\n    onNodeClick: (node) => {\n      if (!hotkeys.isPressed(\"control\")) {\n        return false\n      }\n\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          ie: \"UTF-8\",\n          q: `Energy ${node.name}`,\n        })}`\n      )\n\n      return true\n    },\n  })\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","fileName":"energy-sankey.ts"},{"content":"import { format as formatD3, json } from \"d3\"\n\nimport { ChartConfig } from \"./energy-sankey-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\ntype EnergyDataLink = {\n  source: string\n  target: string\n  value: number // eslint-disable-line id-denylist\n}\n\ntype EnergyDataNode = {\n  category: string\n  name: string\n}\n\ntype EnergyData = {\n  links: EnergyDataLink[]\n  nodes: EnergyDataNode[]\n  units: string\n}\n\nexport const fetchData = () =>\n  json(`${ROOT_PATH}data/d3js/energy-sankey/data.json`) as Promise<EnergyData>\n\ntype Config = ChartConfig<EnergyDataNode, EnergyDataLink>\n\nconst getNodeId: Config[\"getNodeId\"] = (energyNode) => energyNode.name\nconst getNodeText: Config[\"getNodeText\"] = (energyNode) => energyNode.name\n\nexport const createChartConfig = ({\n  energySankeyData,\n  onNodeClick,\n}: {\n  energySankeyData: EnergyData\n  onNodeClick: Config[\"onNodeClick\"]\n}): Config => {\n  const format = (numberValue: number) => {\n    const formatFn = formatD3(\",.0f\")\n\n    return `${formatFn(numberValue)} ${energySankeyData.units}`\n  }\n\n  const getNodeTitle: Config[\"getNodeTitle\"] = ({ nodeValue, sankeyNode }) =>\n    [\n      sankeyNode.category === sankeyNode.name ? \"\" : sankeyNode.category,\n      sankeyNode.name,\n      format(nodeValue!),\n    ]\n      .filter(Boolean)\n      .join(\"\\n\")\n\n  const getLinkTitle: Config[\"getLinkTitle\"] = ({\n    sankeyLink,\n    sankeyLinkSource,\n    sankeyLinkTarget,\n  }) =>\n    `${sankeyLinkSource.name} â†’ ${sankeyLinkTarget.name}\\n${format(\n      sankeyLink.value\n    )}`\n\n  return {\n    chartLinks: energySankeyData.links,\n    chartNodes: energySankeyData.nodes,\n    getLinkTitle,\n    getNodeId,\n    getNodeText,\n    getNodeTitle,\n    onNodeClick,\n    rootElId: CONTAINER_ID,\n  }\n}\n","fileName":"energy-sankey-chart-data.ts"},{"content":"import anime from \"animejs\"\nimport chroma from \"chroma-js\"\nimport { Selection, scaleOrdinal, schemePastel2, select } from \"d3\"\nimport {\n  SankeyLink,\n  SankeyNode,\n  sankey as sankeyD3,\n  sankeyLeft,\n  sankeyLinkHorizontal,\n} from \"d3-sankey\"\n\nimport * as styles from \"./energy-sankey.module.css\"\n\ntype State = {\n  isInTransition: boolean\n  linkSelected: boolean\n  selectedNode: string\n}\n\ntype AddedGradients = { [k: string]: true }\n\nconst getRandomInt = ({ max, min }: { max: number; min: number }): number => {\n  const minRound = Math.ceil(min)\n  const maxRound = Math.floor(max)\n\n  return Math.floor(Math.random() * (maxRound - minRound + 1)) + minRound\n}\n\nconst createGradients = ({\n  addedGradients,\n  fromColor,\n  svg,\n  toColor,\n}: {\n  addedGradients: AddedGradients\n  fromColor: string\n  svg: Selection<SVGElement, unknown, HTMLElement, unknown>\n  toColor: string\n}): string => {\n  const id = `link-gradient-${fromColor}-${toColor}`.replace(/#/g, \"\")\n\n  if (id in addedGradients) {\n    return id\n  }\n\n  const duration = getRandomInt({\n    max: 3,\n    min: 1,\n  })\n  const colorScale = chroma.scale([fromColor, toColor])\n\n  const text = `\n<linearGradient id=\"${id}\">\n  <stop offset=\"0%\" stop-color=\"${fromColor}\" />\n  <stop offset=\"50%\" stop-color=\"${colorScale(0.5)}\">\n    <animate attributeName=\"offset\"\n      values=\"${[5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4]\n        .map((offsetValue) => `.${offsetValue}`)\n        .join(\";\")}\"\n      dur=\"${duration}s\"\n      repeatCount=\"indefinite\" />\n  </stop>\n  <stop offset=\"100%\" stop-color=\"${toColor}\" />\n</linearGradient>\n`.trim()\n\n  svg.append(\"defs\").html(text)\n\n  addedGradients[id] = true\n\n  return id\n}\n\nconst sankeyHeight = 1000\nconst legendHeight = 0\nconst svgHeight = sankeyHeight + legendHeight\n\nexport type ChartConfig<NodeData, LinkData> = {\n  chartLinks: LinkData[]\n  chartNodes: NodeData[]\n  getLinkTitle: (o: {\n    sankeyLink: LinkData\n    sankeyLinkSource: NodeData\n    sankeyLinkTarget: NodeData\n  }) => string\n  getNodeId: (node: NodeData) => string\n  getNodeText: (node: NodeData) => string\n  getNodeTitle: (o: { nodeValue: number; sankeyNode: NodeData }) => string\n  onNodeClick?: (node: NodeData) => boolean\n  rootElId: string\n}\n\nexport const renderChart = <NodeData, LinkData>(\n  chartConfig: ChartConfig<NodeData, LinkData>\n) => {\n  const {\n    chartLinks,\n    chartNodes,\n    getNodeId,\n    onNodeClick,\n    rootElId,\n  } = chartConfig\n\n  type ChartSankeyNode = SankeyNode<NodeData, LinkData>\n  type ChartSankeyLink = SankeyLink<NodeData, LinkData>\n\n  const state: State = {\n    isInTransition: false,\n    linkSelected: false,\n    selectedNode: \"\",\n  }\n\n  const container = document.getElementById(rootElId) as HTMLElement\n\n  const color = (() => {\n    const colorFn = scaleOrdinal(schemePastel2)\n\n    return (sankeyNode: NodeData) => colorFn(getNodeId(sankeyNode))\n  })()\n\n  const { width } = container.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append<SVGElement>(\"svg\")\n    .attr(\"height\", svgHeight)\n    .attr(\"width\", width)\n\n  const sankeyVal = sankeyD3<NodeData, LinkData>()\n    .nodeId(getNodeId)\n    .nodeAlign(sankeyLeft)\n    .nodeWidth(15)\n    .nodePadding(10)\n    .extent([\n      [1, 5],\n      [width - 1, sankeyHeight - 5],\n    ])\n\n  const { links, nodes } = sankeyVal({\n    links: (chartLinks.map((sankeyLink) =>\n      Object.assign({}, sankeyLink)\n    ) as unknown) as Array<SankeyLink<NodeData, LinkData>>,\n    nodes: chartNodes.map((sankeyNode) =>\n      Object.assign({}, sankeyNode)\n    ) as NodeData[],\n  })\n\n  const nodeG = svg.append(\"g\").attr(\"stroke\", \"#000\")\n\n  let lastAnime = () => {}\n\n  const nodeClickHandler = ({\n    linkPath,\n    sankeyNode,\n  }: {\n    linkPath: Selection<SVGPathElement, ChartSankeyLink, SVGGElement, unknown>\n    sankeyNode: ChartSankeyNode\n  }) => {\n    if (state.isInTransition) {\n      return\n    }\n\n    if (onNodeClick) {\n      const shouldPreventDefault = onNodeClick(sankeyNode)\n\n      if (shouldPreventDefault) {\n        return\n      }\n    }\n\n    if (state.selectedNode === getNodeId(sankeyNode)) {\n      linkPath.attr(\"display\", null).style(\"opacity\", null)\n      state.selectedNode = \"\"\n    } else {\n      state.isInTransition = true\n\n      if (state.selectedNode) {\n        linkPath\n          .style(\"opacity\", (sankeyLink) =>\n            [\n              getNodeId(sankeyLink.source as ChartSankeyNode),\n              getNodeId(sankeyLink.target as ChartSankeyNode),\n            ].includes(state.selectedNode)\n              ? null\n              : 0\n          )\n          .attr(\"display\", null)\n      }\n\n      requestAnimationFrame(() => {\n        linkPath\n          .transition()\n          .duration(500)\n          .style(\"opacity\", (sankeyLink) =>\n            [\n              getNodeId(sankeyLink.source as ChartSankeyNode),\n              getNodeId(sankeyLink.target as ChartSankeyNode),\n            ].includes(getNodeId(sankeyNode))\n              ? null\n              : 0\n          )\n          .on(\"end\", () => {\n            state.isInTransition = false\n            linkPath.attr(\"display\", (sankeyLink) =>\n              [\n                getNodeId(sankeyLink.source as ChartSankeyNode),\n                getNodeId(sankeyLink.target as ChartSankeyNode),\n              ].includes(getNodeId(sankeyNode))\n                ? null\n                : \"none\"\n            )\n          })\n\n        state.selectedNode = getNodeId(sankeyNode)\n      })\n    }\n  }\n\n  const node = nodeG\n    .selectAll(\"rect\")\n    .data<ChartSankeyNode>(nodes)\n    .join(\"rect\")\n    .attr(\"class\", styles.chartNode)\n    .attr(\"x\", (sankeyNode: ChartSankeyNode) => sankeyNode.x0!)\n    .attr(\"y\", (sankeyNode: ChartSankeyNode) => sankeyNode.y0!)\n    .attr(\n      \"height\",\n      (sankeyNode: ChartSankeyNode) => sankeyNode.y1! - sankeyNode.y0!\n    )\n    .attr(\n      \"width\",\n      (sankeyNode: ChartSankeyNode) => sankeyNode.x1! - sankeyNode.x0!\n    )\n    .attr(\"fill\", color)\n    .on(\"mouseenter\", function () {\n      lastAnime()\n\n      const animationFirst = anime({\n        direction: \"alternate\",\n        duration: 1000,\n        easing: \"easeInOutSine\",\n        loop: false,\n        strokeDashoffset: [anime.setDashoffset, 0],\n        targets: this,\n      })\n      const animationSecond = anime({\n        direction: \"alternate\",\n        duration: 2000,\n        easing: \"spring(1, 80, 10, 0)\",\n        loop: true,\n        opacity: [0.6, 1, 0.6],\n        targets: this,\n      })\n\n      lastAnime = () => {\n        animationFirst.seek(animationFirst.duration)\n        animationSecond.seek(0)\n        anime.remove(this)\n        lastAnime = () => {}\n      }\n    })\n    .on(\"mouseleave\", () => {\n      lastAnime()\n    })\n    .on(\"click\", (...[, sankeyNode]) =>\n      nodeClickHandler({\n        linkPath, // eslint-disable-line @typescript-eslint/no-use-before-define\n        sankeyNode,\n      })\n    )\n\n  node.attr(\"title\", (sankeyNode) =>\n    chartConfig.getNodeTitle({\n      nodeValue: sankeyNode.value!,\n      sankeyNode,\n    })\n  )\n\n  $(`.${styles.chartNode}`).tooltip({\n    track: true,\n  })\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .selectAll(\"g\")\n    .data<ChartSankeyLink>(links)\n    .join(\"g\")\n    .attr(\"class\", styles.chartLinkG)\n\n  const linkPathGenerator = sankeyLinkHorizontal()\n  const addedGradients: AddedGradients = {}\n\n  const linkPath = link\n    .append(\"path\")\n    .attr(\"d\", (sankeyLink: ChartSankeyLink) => {\n      const isHorizontalLine = sankeyLink.y0 === sankeyLink.y1\n\n      return linkPathGenerator(\n        // this is necessary for the default gradientUnits (objectBoundingBox) to work\n        // https://stackoverflow.com/a/34687362\n        isHorizontalLine\n          ? {\n              ...sankeyLink,\n              y1: sankeyLink.y1! + 0.1,\n            }\n          : sankeyLink\n      )\n    })\n    .attr(\"stroke\", (sankeyLink) => {\n      const fromColor = color(sankeyLink.source as NodeData)\n      const toColor = color(sankeyLink.target as NodeData)\n\n      const id = createGradients({\n        addedGradients,\n        fromColor,\n        svg,\n        toColor,\n      })\n\n      return `url(#${id})`\n    })\n    .attr(\"class\", styles.chartLink)\n    .attr(\"stroke-width\", (sankeyLink) => Math.max(1, sankeyLink.width!))\n    .on(\"click\", function () {\n      if (state.isInTransition) {\n        return\n      }\n\n      const currentLink = select(this)\n\n      if (state.linkSelected) {\n        linkPath.attr(\"display\", null).style(\"opacity\", null)\n      } else {\n        linkPath.attr(\"display\", \"none\")\n        currentLink.attr(\"display\", null)\n      }\n\n      state.selectedNode = \"\"\n      state.linkSelected = !state.linkSelected\n    })\n\n  link.attr(\"title\", (sankeyLink) =>\n    chartConfig.getLinkTitle({\n      sankeyLink,\n      sankeyLinkSource: sankeyLink.source as ChartSankeyNode,\n      sankeyLinkTarget: sankeyLink.target as ChartSankeyNode,\n    })\n  )\n\n  $(`.${styles.chartLink}`).tooltip({\n    track: true,\n  })\n\n  nodeG.each(function (this) {\n    const parentEl = this.parentNode as HTMLElement\n\n    parentEl.appendChild(this)\n  })\n\n  svg\n    .append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .selectAll(\"text\")\n    .data(nodes)\n    .join(\"text\")\n    .attr(\"x\", (sankeyNode) =>\n      sankeyNode.x0! < width / 2 ? sankeyNode.x1! + 6 : sankeyNode.x0! - 6\n    )\n    .attr(\"y\", (sankeyNode) => (sankeyNode.y1! + sankeyNode.y0!) / 2)\n    .attr(\"dy\", \"0.35em\")\n    .style(\"font-size\", \"16px\")\n    .attr(\"text-anchor\", (sankeyNode) =>\n      sankeyNode.x0! < width / 2 ? \"start\" : \"end\"\n    )\n    .text(chartConfig.getNodeText)\n}\n","fileName":"energy-sankey-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/energy-sankey/energy-sankey\"\n\nconst EnergySankey = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default EnergySankey\n","type":"tsx"}},"key":"energy-sankey"},"meta":{"description":"Sankey diagram with multiple interactive parts and animations. It handles the results alignments."}}},"staticQueryHashes":[]}