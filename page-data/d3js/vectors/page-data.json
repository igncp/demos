{"componentChunkName":"component---src-pages-d-3-js-vectors-tsx","path":"/d3js/vectors/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[["d3-force API reference","https://github.com/d3/d3-force#forceSimulation"]],"isCompleted":false,"name":"Vectors (needs fix)","notes":["Use the <strong>Ctrl</strong> key to move nodes instead of creating vectors","Needs fix: Some functionality from 2016 chart detailed in the comments"],"sources":["http://codepen.io/zarazum/pen/fjoqF"],"summary":[],"category":"d3js","files":{"cssModule":".vectorsChart {\n  svg {\n    background-color: #fff;\n    cursor: default;\n    user-select: none;\n  }\n\n  svg:not(.active):not(.ctrl) {\n    cursor: crosshair;\n  }\n\n  path.link {\n    cursor: default;\n    fill: none;\n    stroke: #888;\n    stroke-width: 3px;\n  }\n\n  svg:not(.active):not(.ctrl) path.link {\n    cursor: pointer;\n  }\n\n  path.link.selected {\n    stroke-dasharray: 10, 2;\n  }\n\n  path.link.dragline {\n    pointer-events: none;\n  }\n\n  path.link.hidden {\n    stroke-width: 0;\n  }\n\n  circle.node {\n    cursor: pointer;\n    fill: none;\n    stroke-width: 0;\n  }\n\n  text {\n    font: 14px sans-serif;\n    pointer-events: none;\n  }\n\n  text.id {\n    font-weight: bold;\n    text-anchor: middle;\n  }\n}\n","demo":[{"content":"import {\n  Selection,\n  SimulationNodeDatum,\n  drag,\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./vectors.module.css\"\n\n// missing:\n// - connect nodes\n// - drag node\n// - keys handling\n// old one is in ./vectors-old/vectors-old.js, remove when completed\n\ntype Node = SimulationNodeDatum & {\n  id: string\n  reflexive: boolean\n}\n\ntype Link = {\n  left: boolean\n  right: boolean\n  source: Node\n  target: Node\n}\n\ntype Data = {\n  links: Link[]\n  nodes: Node[]\n}\n\nconst getInitialData = (): Data => {\n  const nodes = [\n    {\n      id: \"A\",\n      reflexive: false,\n    },\n    {\n      id: \"B\",\n      reflexive: false,\n    },\n    {\n      id: \"C\",\n      reflexive: false,\n    },\n  ]\n  const links = [\n    {\n      left: false,\n      right: true,\n      source: nodes[0],\n      target: nodes[1],\n    },\n    {\n      left: false,\n      right: true,\n      source: nodes[1],\n      target: nodes[2],\n    },\n  ]\n\n  return {\n    links,\n    nodes,\n  }\n}\n\nconst setupSVG = (\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n) => {\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"end-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 6)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\n    .attr(\"fill\", \"#000\")\n\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"start-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 4)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M10,-5L0,0L10,5\")\n    .attr(\"fill\", \"#000\")\n}\n\ntype CustomDragEvent = DragEvent & { active: boolean }\n\nconst settings = {\n  circleRadius: 5,\n  defaultTextOpacity: 0.5,\n  strength: -5000,\n  textDY: 5,\n}\n\nconst height = 600\n\ntype RenderGraph = (o: { data: Data; rootElId: string }) => void\n\nconst renderGraph: RenderGraph = ({ data, rootElId }) => {\n  const { links, nodes } = data\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.vectorsChart)\n\n  const { width } = rootEl.getBoundingClientRect()\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  setupSVG(svg)\n\n  // @TODO\n  let lastNodeId = \"C\".charCodeAt(0)\n\n  const updateLinks = () => {\n    const linksEls = svg\n      .selectAll<SVGPathElement, Data[\"links\"]>(`.${styles.link}`)\n      .data(links)\n\n    linksEls\n      .enter()\n      .append<SVGPathElement>(\"path\")\n      .merge(linksEls)\n      .attr(\"d\", (d) => {\n        const deltaX = d.target.x! - d.source.x!\n        const deltaY = d.target.y! - d.source.y!\n        const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const normX = deltaX / dist\n        const normY = deltaY / dist\n        const sourcePadding = d.left ? 17 : 12\n        const targetPadding = d.right ? 17 : 12\n        const sourceX = d.source.x! + sourcePadding * normX\n        const sourceY = d.source.y! + sourcePadding * normY\n        const targetX = d.target.x! - targetPadding * normX\n        const targetY = d.target.y! - targetPadding * normY\n\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`\n      })\n      .attr(\"class\", `${styles.link} ${styles.dragline}`)\n\n    linksEls.exit().remove()\n  }\n\n  const ticked = () => {\n    updateLinks()\n    updateNodes() // eslint-disable-line @typescript-eslint/no-use-before-define\n  }\n\n  const simulation = forceSimulation(nodes)\n    .force(\"charge\", forceManyBody().strength(-50))\n    .force(\"center\", forceCenter(width / 2, height / 2))\n    .force(\"link\", forceLink().links(links).distance(100))\n    .on(\"tick\", ticked)\n\n  const dragstarted = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) {\n      simulation.alphaTarget(0.3).restart()\n    }\n\n    d.fx = d.x\n    d.fy = d.y\n  }\n\n  const dragged = (event: CustomDragEvent, d: Node) => {\n    d.fx = event.x\n    d.fy = event.y\n  }\n\n  const dragended = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) {\n      simulation.alphaTarget(0)\n    }\n\n    d.fx = null\n    d.fy = null\n  }\n\n  const updateNodes = () => {\n    const nodesEls = svg\n      .selectAll<SVGCircleElement, Data[\"nodes\"]>(\"circle\")\n      .data(nodes)\n    const textsEls = svg\n      .selectAll<SVGTextElement, Data[\"nodes\"]>(\"text\")\n      .data(nodes)\n\n    nodesEls\n      .enter()\n      .append(\"circle\")\n      .merge(nodesEls)\n      .attr(\"cx\", (d) => d.x!)\n      .attr(\"cy\", (d) => d.y!)\n      .attr(\"r\", () => settings.circleRadius)\n      .attr(\"fill\", \"#fff\")\n      .each(function () {\n        select<SVGCircleElement, Data[\"nodes\"][0]>(this)\n          .on(\"mouseover\", (_ev, d) => {\n            select(`#node-text-${d.index}`).style(\"opacity\", 1)\n          })\n          .on(\"mouseleave\", (_ev, d) => {\n            select(`#node-text-${d.index}`).style(\n              \"opacity\",\n              settings.defaultTextOpacity\n            )\n          })\n      })\n      .call(\n        drag<SVGCircleElement, Data[\"nodes\"][0]>()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      )\n\n    textsEls\n      .enter()\n      .append(\"text\")\n      .merge(textsEls)\n      .text((d) => d.id)\n      .attr(\"x\", (d) => d.x!)\n      .attr(\"y\", (d) => d.y!)\n      .attr(\"class\", styles.id)\n\n    nodesEls.exit().remove()\n    textsEls.exit().remove()\n  }\n\n  let mousedownLink: any = null\n  let mousedownNode: any = null\n  let mouseupNode: any = null\n\n  const resetMouseVars = () => {\n    mousedownNode = null\n    mouseupNode = null\n    mousedownLink = null\n  }\n\n  svg\n    .selectAll(`.${styles.link}`)\n    .data(links)\n    .enter()\n    .append(\"svg:path\")\n    .attr(\"class\", styles.link)\n    .attr(\"marker-end\", \"url(#end)\")\n    .attr(\"id\", (_d, i) => `link-${i}`)\n\n  const keydown = function () {\n    console.log(\"keydown\") // eslint-disable-line no-console\n  }\n\n  const keyup = function () {\n    console.log(\"keyup\") // eslint-disable-line no-console\n  }\n\n  const mousedownSVG = (evt: any) => {\n    svg.classed(styles.active, true)\n\n    if (evt.ctrlKey || mousedownNode || mousedownLink) {\n      return\n    }\n\n    const { target: e } = evt\n\n    const dim = e.getBoundingClientRect()\n    const x = evt.clientX - dim.left\n    const y = evt.clientY - dim.top\n\n    lastNodeId += 1\n\n    const node = {\n      id: String.fromCharCode(lastNodeId),\n      index: nodes.length,\n      reflexive: false,\n      vx: 0,\n      vy: 0,\n      x,\n      y,\n    }\n\n    nodes.push(node)\n\n    simulation.nodes(nodes)\n    simulation.alpha(0.5).restart()\n  }\n\n  const mousemoveSVG = () => {\n    console.log(\"mousemoveSVG\") // eslint-disable-line no-console\n  }\n\n  const mouseupSVG = () => {\n    console.log(\"mouseupSVG\", mouseupNode) // eslint-disable-line no-console\n    resetMouseVars()\n  }\n\n  svg\n    .on(\"mousedown\", mousedownSVG)\n    .on(\"mousemove\", mousemoveSVG)\n    .on(\"mouseup\", mouseupSVG)\n\n  window.addEventListener(\"keyup\", keyup)\n  window.addEventListener(\"keydown\", keydown)\n}\n\nconst main = () => {\n  const data = getInitialData()\n\n  renderGraph({\n    data,\n    rootElId: \"chart\",\n  })\n\n  return Promise.resolve()\n}\n\nexport default main\n","fileName":"vectors"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/vectors/vectors\"\n\nconst Vectors = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/d3/d3.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Vectors\n","type":"tsx"}},"key":"vectors"},"meta":{"description":"Not actually a chart, but the representation of pointing vectors, with the possibility of creation and movement, made with D3.js"}}},"staticQueryHashes":[]}