{"componentChunkName":"component---src-pages-d-3-js-vectors-js","path":"/d3js/vectors/","result":{"pageContext":{"demoInfo":{"data":[],"name":"Vectors","notes":["Use the <strong>Ctrl</strong> key to move nodes instead of creating vectors"],"sources":["http://codepen.io/zarazum/pen/fjoqF"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"const main = () => {\n  const rootElId = \"chart\"\n  const { width } = document.getElementById(\"chart\").getBoundingClientRect()\n  const height = 500\n\n  const colors = () => \"#FFF\"\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  const nodes = [\n    {\n      id: \"A\",\n      reflexive: false,\n    },\n    {\n      id: \"B\",\n      reflexive: false,\n    },\n    {\n      id: \"C\",\n      reflexive: false,\n    },\n  ]\n\n  let lastNodeId = \"C\".charCodeAt(0)\n\n  const links = [\n    {\n      left: false,\n      right: true,\n      source: nodes[0],\n      target: nodes[1],\n    },\n    {\n      left: false,\n      right: true,\n      source: nodes[1],\n      target: nodes[2],\n    },\n  ]\n\n  const tick = () => {\n    path.attr(\"d\", (d) => {\n      const deltaX = d.target.x - d.source.x\n      const deltaY = d.target.y - d.source.y\n      const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n      const normX = deltaX / dist\n      const normY = deltaY / dist\n      const sourcePadding = d.left ? 17 : 12\n      const targetPadding = d.right ? 17 : 12\n      const sourceX = d.source.x + sourcePadding * normX\n      const sourceY = d.source.y + sourcePadding * normY\n      const targetX = d.target.x - targetPadding * normX\n      const targetY = d.target.y - targetPadding * normY\n\n      return `M${sourceX},${sourceY}L${targetX},${targetY}`\n    })\n\n    return circle.attr(\"transform\", (d) => `translate(${d.x},${d.y})`)\n  }\n\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"end-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 6)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\n    .attr(\"fill\", \"#000\")\n\n  svg\n    .append(\"svg:defs\")\n    .append(\"svg:marker\")\n    .attr(\"id\", \"start-arrow\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refX\", 4)\n    .attr(\"markerWidth\", 3)\n    .attr(\"markerHeight\", 3)\n    .attr(\"orient\", \"auto\")\n    .append(\"svg:path\")\n    .attr(\"d\", \"M10,-5L0,0L10,5\")\n    .attr(\"fill\", \"#000\")\n\n  const dragLine = svg\n    .append(\"svg:path\")\n    .attr(\"class\", \"link dragline hidden\")\n    .attr(\"d\", \"M0,0L0,0\")\n\n  let path = svg.append(\"svg:g\").selectAll(\"path\")\n\n  let circle = svg.append(\"svg:g\").selectAll(\"g\")\n\n  const force = d3.layout\n    .force()\n    .nodes(nodes)\n    .links(links)\n    .size([width, height])\n    .linkDistance(150)\n    .charge(-500)\n    .on(\"tick\", tick)\n\n  let selectedNode = null\n  let selectedLink = null\n  let mousedownLink = null\n  let mousedownNode = null\n\n  let mouseupNode = null\n\n  const resetMouseVars = () => {\n    mousedownNode = null\n    mouseupNode = null\n    mousedownLink = null\n  }\n\n  const restart = function () {\n    path = path.data(links)\n    path\n      .classed(\"selected\", (d) => d === selectedLink)\n      .style(\"marker-start\", (d) => {\n        if (d.left) {\n          return \"url(#start-arrow)\"\n        }\n\n        return \"\"\n      })\n      .style(\"marker-end\", (d) => {\n        if (d.right) {\n          return \"url(#end-arrow)\"\n        }\n\n        return \"\"\n      })\n    path\n      .enter()\n      .append(\"svg:path\")\n      .attr(\"class\", \"link\")\n      .classed(\"selected\", (d) => d === selectedLink)\n      .style(\"marker-start\", (d) => {\n        if (d.left) {\n          return \"url(#start-arrow)\"\n        }\n\n        return \"\"\n      })\n      .style(\"marker-end\", (d) => {\n        if (d.right) {\n          return \"url(#end-arrow)\"\n        }\n\n        return \"\"\n      })\n      .on(\"mousedown\", (d) => {\n        if (d3.event.ctrlKey) {\n          return\n        }\n\n        mousedownLink = d\n\n        if (mousedownLink === selectedLink) {\n          selectedLink = null\n        } else {\n          selectedLink = mousedownLink\n        }\n\n        selectedNode = null\n\n        restart()\n      })\n    path.exit().remove()\n    circle = circle.data(nodes, (d) => d.id)\n    circle\n      .selectAll(\"circle\")\n      .style(\"fill\", (d) => {\n        if (d === selectedNode) {\n          return d3.rgb(colors(d.id)).darker().toString()\n        }\n\n        return colors(d.id)\n      })\n      .classed(\"reflexive\", (d) => d.reflexive)\n\n    const g = circle.enter().append(\"svg:g\")\n\n    g.append(\"svg:circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", 12)\n      .style(\"fill\", (d) => {\n        if (d === selectedNode) {\n          return d3.rgb(colors(d.id)).brighter().toString()\n        }\n\n        return colors(d.id)\n      })\n      .style(\"stroke\", (d) => d3.rgb(colors(d.id)).darker().toString())\n      .classed(\"reflexive\", (d) => d.reflexive)\n      .on(\"mouseover\", function (d) {\n        if (!mousedownNode || d === mousedownNode) {\n          return\n        }\n\n        d3.select(this).attr(\"transform\", \"scale(1.1)\")\n      })\n      .on(\"mouseout\", function (d) {\n        if (!mousedownNode || d === mousedownNode) {\n          return\n        }\n\n        d3.select(this).attr(\"transform\", \"\")\n      })\n      .on(\"mousedown\", (d) => {\n        if (d3.event.ctrlKey) {\n          return\n        }\n\n        mousedownNode = d\n\n        if (mousedownNode === selectedNode) {\n          selectedNode = null\n        } else {\n          selectedNode = mousedownNode\n        }\n\n        selectedLink = null\n        dragLine\n          .style(\"marker-end\", \"url(#end-arrow)\")\n          .classed(\"hidden\", false)\n          .attr(\n            \"d\",\n            `M${mousedownNode.x},${mousedownNode.y}L${mousedownNode.x},${mousedownNode.y}`\n          )\n\n        restart()\n      })\n      .on(\"mouseup\", function (d) {\n        let direction = null\n        let source = null\n        let target = null\n\n        if (!mousedownNode) {\n          return\n        }\n\n        dragLine.classed(\"hidden\", true).style(\"marker-end\", \"\")\n        mouseupNode = d\n\n        if (mouseupNode === mousedownNode) {\n          resetMouseVars()\n\n          return\n        }\n\n        d3.select(this).attr(\"transform\", \"\")\n\n        if (mousedownNode.id < mouseupNode.id) {\n          source = mousedownNode\n          target = mouseupNode\n          direction = \"right\"\n        } else {\n          source = mouseupNode\n          target = mousedownNode\n          direction = \"left\"\n        }\n\n        let link = links.filter(\n          (l) => l.source === source && l.target === target\n        )[0]\n\n        if (link) {\n          link[direction] = true\n        } else {\n          link = {\n            left: false,\n            right: false,\n            source,\n            target,\n          }\n          link[direction] = true\n          links.push(link)\n        }\n\n        selectedLink = link\n        selectedNode = null\n\n        restart()\n      })\n    g.append(\"svg:text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 4)\n      .attr(\"class\", \"id\")\n      .text((d) => d.id)\n    circle.exit().remove()\n\n    return force.start()\n  }\n\n  const mousedown = function () {\n    svg.classed(\"active\", true)\n\n    if (d3.event.ctrlKey || mousedownNode || mousedownLink) {\n      return\n    }\n\n    const point = d3.mouse(this)\n    const node = {\n      id: String.fromCharCode(++lastNodeId),\n      reflexive: false,\n    }\n\n    node.x = point[0]\n    node.y = point[1]\n    nodes.push(node)\n\n    restart()\n  }\n\n  const mousemove = function () {\n    if (!mousedownNode) {\n      return\n    }\n\n    dragLine.attr(\n      \"d\",\n      `M${mousedownNode.x},${mousedownNode.y}L${d3.mouse(this)[0]},${\n        d3.mouse(this)[1]\n      }`\n    )\n\n    restart()\n  }\n\n  const mouseup = function () {\n    if (mousedownNode) {\n      dragLine.classed(\"hidden\", true).style(\"marker-end\", \"\")\n    }\n\n    svg.classed(\"active\", false)\n\n    return resetMouseVars()\n  }\n\n  const spliceLinksForNode = (node) => {\n    const toSplice = links.filter((l) => l.source === node || l.target === node)\n\n    return toSplice.map((l) => links.splice(links.indexOf(l), 1))\n  }\n\n  let lastKeyDown = -1\n\n  const keydown = function () {\n    d3.event.preventDefault()\n\n    if (lastKeyDown !== -1) {\n      return\n    }\n\n    lastKeyDown = d3.event.keyCode\n\n    if (d3.event.keyCode === 17) {\n      circle.call(force.drag)\n      svg.classed(\"ctrl\", true)\n    }\n\n    if (!selectedNode && !selectedLink) {\n      return\n    }\n\n    switch (d3.event.keyCode) {\n      case 46:\n        if (selectedNode) {\n          nodes.splice(nodes.indexOf(selectedNode), 1)\n          spliceLinksForNode(selectedNode)\n        } else if (selectedLink) {\n          links.splice(links.indexOf(selectedLink), 1)\n        }\n\n        selectedLink = null\n        selectedNode = null\n\n        restart()\n\n        return\n      case 66:\n        if (selectedLink) {\n          selectedLink.left = true\n          selectedLink.right = true\n        }\n\n        restart()\n\n        return\n      case 76:\n        if (selectedLink) {\n          selectedLink.left = true\n          selectedLink.right = false\n        }\n\n        restart()\n\n        return\n      case 82:\n        if (selectedNode) {\n          selectedNode.reflexive = !selectedNode.reflexive\n        } else if (selectedLink) {\n          selectedLink.left = false\n          selectedLink.right = true\n        }\n\n        restart()\n\n        return\n    }\n  }\n\n  const keyup = function () {\n    lastKeyDown = -1\n\n    if (d3.event.keyCode === 17) {\n      circle.on(\"mousedown.drag\", null).on(\"touchstart.drag\", null)\n\n      svg.classed(\"ctrl\", false)\n    }\n  }\n\n  svg\n    .on(\"mousedown\", mousedown)\n    .on(\"mousemove\", mousemove)\n    .on(\"mouseup\", mouseup)\n\n  d3.select(window).on(\"keydown\", keydown).on(\"keyup\", keyup)\n\n  restart()\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/vectors/vectors\"\n\nimport \"@/demos/vectors/vectors.styl\"\n\nconst Vectors = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"vectors-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Vectors\n","styl":".vectors-chart\n    svg\n      background-color: #FFF;\n      cursor: default;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -o-user-select: none;\n      user-select: none;\n\n\n    svg:not(.active):not(.ctrl)\n      cursor: crosshair;\n\n\n    path.link\n      fill: none;\n      stroke: #888;\n      stroke-width: 3px;\n      cursor: default;\n\n\n    svg:not(.active):not(.ctrl) path.link\n      cursor: pointer;\n\n\n    path.link.selected\n        stroke-dasharray: 10,2;\n\n\n    path.link.dragline\n      pointer-events: none;\n\n\n    path.link.hidden\n      stroke-width: 0;\n\n\n    circle.node\n      stroke-width: 0px;\n      cursor: pointer;\n      fill:#fff;\n\n\n    /*circle.node.reflexive\n      stroke: #000 !important;\n      stroke-width: 2.5px;\n    */\n\n    text\n      font: 14px sans-serif;\n      pointer-events: none;\n\n\n    text.id\n      text-anchor: middle;\n      font-weight: bold;\n"},"key":"vectors"}}},"staticQueryHashes":[]}