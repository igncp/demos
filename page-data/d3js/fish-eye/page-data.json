{"componentChunkName":"component---src-pages-d-3-js-fish-eye-js","path":"/d3js/fish-eye/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Fish Eye","notes":["Uses the Fish Eye plugin","Changed style","Click to stop and show a pointer","Extended the title information"],"sources":["http://bost.ocks.org/mike/fisheye/"],"category":"d3js","files":{"d3utils":"import merge from \"lodash/merge\"\n\nconst d3utils = {\n  colorsScale(colors, extent) {\n    const c = d3.scale.linear().domain(extent).range([0, 1])\n    const colorScale = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      height: \"500%\",\n      id: `drop-shadow-${id}`,\n      width: \"500%\",\n      x: \"-200%\",\n      y: \"-200%\",\n    })\n\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"SourceAlpha\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feOffset\").attr({\n      dx: 1,\n      dy: 1,\n    })\n    filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(id, svg, deviation, slope, extra) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      id: `drop-shadow-${id}`,\n    })\n\n    if (extra) {\n      filter.attr({\n        height: \"500%\",\n        width: \"500%\",\n        x: \"-200%\",\n        y: \"-200%\",\n      })\n    }\n\n    filter.append(\"feOffset\").attr({\n      dx: 0.5,\n      dy: 0.5,\n      in: \"SourceGraphic\",\n      result: \"offOut\",\n    })\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"offOut\",\n      result: \"blurOut\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feBlend\").attr({\n      in: \"SourceGraphic\",\n      in2: \"blurOut\",\n      mode: \"normal\",\n    })\n\n    return filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n  },\n  middleTitle(svg, width, text, top) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr({\n        class: \"chart-title\",\n        \"text-anchor\": \"middle\",\n        transform: `translate(${String(width / 2)},${top})`,\n      })\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector, width, height, margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr({\n        height: height + margin.top + margin.bottom,\n        width: width + margin.left + margin.right,\n      })\n      .append(\"g\")\n      .attr({\n        transform: `translate(${margin.left},${margin.top})`,\n      })\n  },\n  tooltip(selector, customOpts) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = merge(defaultOpts, customOpts)\n\n    $(selector).tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import * as d3 from \"d3\"\n\nimport d3Fisheye, { FishEyeScale } from \"@/demos/_utils/fish-eye\"\nimport d3utils from \"@/demos/_utils/d3nextutils\"\n\ntype DataItem = {\n  income: number\n  lifeExpectancy: number\n  name: string\n  population: number\n  region: string\n}\ntype Data = DataItem[]\n\nconst fetchData = async (): Promise<Data | undefined> =>\n  d3.json(`${ROOT_PATH}data/d3js/fish-eye/data.json`)\n\nconst humanizeNumber = (initialN: number): string => {\n  let n = initialN.toString()\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const n2 = n.replace(/(\\d)(\\d{3})($|,|\\.)/g, \"$1,$2$3\")\n\n    if (n === n2) {\n      break\n    }\n\n    n = n2\n  }\n\n  return n\n}\n\nconst margin = {\n  bottom: 70,\n  left: 70,\n  right: 50,\n  top: 80,\n}\nconst height = 700 - margin.top - margin.bottom\n\ntype FishEyeChartOpts = {\n  rootElId: string\n  data: Data\n}\n\nclass FishEyeChart {\n  private rootElId: string\n  private data: Data\n\n  private width!: number\n  private dom!: {\n    svg: d3.Selection<SVGGElement, unknown, HTMLElement, unknown>\n    dot?: d3.Selection<SVGCircleElement, DataItem, SVGGElement, unknown>\n    pointer?: d3.Selection<SVGTextElement, unknown, HTMLElement, unknown>\n    xAxis?: d3.Axis<DataItem[\"income\"]>\n    yAxis?: d3.Axis<DataItem[\"lifeExpectancy\"]>\n  }\n  private vars!: {\n    colorScale: d3.ScaleOrdinal<string, string, never>\n    focused: boolean\n    radiusScale: d3.ScalePower<number, number, never>\n    xScale: FishEyeScale\n    yScale: FishEyeScale\n  }\n\n  public constructor({ rootElId, data }: FishEyeChartOpts) {\n    this.rootElId = rootElId\n    this.data = data\n\n    this.setWidth()\n    this.setVars()\n    this.setDom()\n  }\n\n  public render() {\n    this.setChartTitle()\n    this.setBackground()\n    this.setPointer()\n    this.setFilter()\n    this.setAxis()\n    this.setLabels()\n    this.setDots()\n    this.setTitles()\n    this.bindMousemove()\n    this.bindClick()\n  }\n\n  private setWidth() {\n    this.width =\n      (document.getElementById(\n        this.rootElId\n      ) as HTMLElement).getBoundingClientRect().width -\n      margin.left -\n      margin.right\n  }\n\n  private setDom() {\n    this.dom = {\n      svg: d3\n        .select(`#${this.rootElId}`)\n        .append(\"svg\")\n        .attr(\"width\", this.width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`),\n    }\n  }\n\n  private setChartTitle() {\n    return d3utils.middleTitle(\n      this.dom.svg,\n      this.width,\n      \"Income Per Capita vs \" +\n        \"Life Expectancy vs Population vs Region - 180 Countries\",\n      -40\n    )\n  }\n\n  private setVars() {\n    const colorScale = d3\n      .scaleOrdinal<string>()\n      .domain([\n        \"Sub-Saharan Africa\",\n        \"South Asia\",\n        \"Middle East & North Africa\",\n        \"America\",\n        \"Europe & Central Asia\",\n        \"East Asia & Pacific\",\n      ])\n      .range(d3.schemePastel2)\n\n    const radiusScale = d3.scaleSqrt().domain([0, 5e8]).range([5, 60])\n    const xScale = d3Fisheye\n      .scale(d3.scaleLog)\n      .domain([300, 1e5])\n      .range([0, this.width])\n    const yScale = d3Fisheye\n      .scale(d3.scaleLinear)\n      .domain([20, 90])\n      .range([height, 0])\n\n    this.vars = {\n      colorScale,\n      focused: false,\n      radiusScale,\n      xScale,\n      yScale,\n    }\n  }\n\n  private setAxis() {\n    this.dom.xAxis = d3\n      .axisBottom<DataItem[\"population\"]>(this.vars.xScale)\n      .tickFormat(d3.format(\",d\"))\n      .tickSize(-height)\n    this.dom.yAxis = d3\n      .axisLeft<DataItem[\"income\"]>(this.vars.yScale)\n      .tickSize(-this.width)\n    this.dom.svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(this.dom.xAxis)\n    this.dom.svg.append(\"g\").attr(\"class\", \"y axis\").call(this.dom.yAxis)\n  }\n\n  private setBackground() {\n    return this.dom.svg\n      .append(\"rect\")\n      .attr(\"class\", \"background\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", height)\n  }\n\n  private setLabels() {\n    this.dom.svg\n      .append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", this.width - 26)\n      .attr(\"y\", height + 26)\n      .text(\"income per capita, inflation-adjusted (dollars)\")\n\n    this.dom.svg\n      .append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", -26)\n      .attr(\"y\", -40)\n      .attr(\"dy\", \".75em\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"life expectancy (years)\")\n  }\n\n  private setFilter() {\n    return d3utils.filterColor(\"circles\", this.dom.svg, 1.5, 0.6, true)\n  }\n\n  private position() {\n    this.dom\n      .dot!.attr(\"cx\", (d) => this.vars.xScale(d.income))\n      .attr(\"cy\", (d) => this.vars.yScale(d.lifeExpectancy))\n      .attr(\"r\", (d) => this.vars.radiusScale(d.population))\n  }\n\n  private setDots() {\n    this.dom.dot = this.dom.svg\n      .append(\"g\")\n      .attr(\"class\", \"dots\")\n      .selectAll(\".dot\")\n      .data<DataItem>(this.data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot\")\n      .style(\"fill\", (d: DataItem) => this.vars.colorScale(d.region))\n      .style(\"filter\", \"url(#drop-shadow-circles)\")\n      .style(\"stroke\", \"black\")\n      .style('\"stroke-width\"', \"1px\")\n      .sort((a, b) => b.population - a.population)\n\n    this.position()\n  }\n\n  private setTitles() {\n    this.dom\n      .dot!.append(\"title\")\n      .text(\n        (d) =>\n          `${d.name}:\\n- Income: ${humanizeNumber(d.income)} $/P.C.\\n` +\n          `- Population: ${humanizeNumber(d.population)}\\n` +\n          `- Life expectancy: ${d.lifeExpectancy} years`\n      )\n  }\n\n  private zoom(ev: Event) {\n    const mouse = d3.pointer(ev)\n\n    this.vars.xScale.distortion(2.5).focus(mouse[0])\n    this.vars.yScale.distortion(2.5).focus(mouse[1])\n    this.position()\n\n    this.dom.svg.select<SVGGElement>(\".x.axis\").call(this.dom.xAxis!)\n    this.dom.svg.select<SVGGElement>(\".y.axis\").call(this.dom.yAxis!)\n  }\n\n  private setPointer() {\n    this.dom.pointer = this.dom.svg\n      .append(\"text\")\n      .text(\"+\")\n      .attr(\"class\", \"pointer\")\n  }\n\n  private bindMousemove() {\n    return this.dom.svg.on(\"mousemove\", (ev) => {\n      if (!this.vars.focused) {\n        this.zoom(ev)\n      }\n    })\n  }\n\n  private bindClick() {\n    this.dom.svg.on(\"click\", (ev: Event) => {\n      this.vars.focused = !this.vars.focused\n\n      if (this.vars.focused) {\n        const pointer = d3.pointer(this)\n\n        this.dom\n          .pointer!.attr(\"x\", pointer[0])\n          .attr(\"y\", pointer[1])\n          .style(\"opacity\", 1)\n\n        return\n      }\n\n      this.dom.pointer!.style(\"opacity\", 0)\n\n      this.zoom(ev)\n    })\n  }\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  const chart = new FishEyeChart({\n    data: data as Data,\n    rootElId: \"chart\",\n  })\n\n  chart.render()\n}\n\nexport default main\n","type":"ts"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/fish-eye/fish-eye\"\n\nimport \"@/demos/fish-eye/fish-eye.styl\"\n\nconst FishEye = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"fish-eye-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default FishEye\n","styl":".fish-eye-chart\n    text\n      font 10px sans-serif\n      text-shadow 1px 1px 1px #ccc\n\n    .axis path, .axis line\n      fill none\n      stroke #eee\n      shape-rendering crispEdges\n\n    .background\n      fill none\n      pointer-events all\n\n    .chart-title\n      font-size 14px\n\n    .pointer\n        fill #7AAE61\n        font-size 15px\n        opacity 0\n"},"key":"fish-eye"}}},"staticQueryHashes":[]}