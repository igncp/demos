{"componentChunkName":"component---src-pages-d-3-js-fish-eye-js","path":"/d3js/fish-eye/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Fish Eye","notes":["Uses the Fish Eye plugin","Changed style","Click to stop and show a pointer","Extended the title information"],"sources":["http://bost.ocks.org/mike/fisheye/"],"category":"d3js","files":{"js":"const ch = {}\n\nch.ready = function () {\n  ch.setCg()\n  ch.setDom()\n  ch.setVars()\n\n  return ch.getData(ch.render)\n}\n\nch.render = function () {\n  ch.setChartTitle()\n  ch.setBackground()\n  ch.setPointer()\n  ch.setFilter()\n  ch.setAxis()\n  ch.setLabels()\n  ch.setDots()\n  ch.setTitles()\n  ch.bindMousemove()\n  ch.bindClick()\n}\n\nch.setCg = function () {\n  ch.cg = {\n    margin: {\n      bottom: 70,\n      left: 70,\n      right: 50,\n      top: 80,\n    },\n  }\n  ch.cg.height = 700 - ch.cg.margin.top - ch.cg.margin.bottom\n\n  ch.cg.width =\n    $(\"#chart\").innerWidth() - ch.cg.margin.left - ch.cg.margin.right\n}\n\nch.setDom = function () {\n  ch.dom = {\n    svg: d3\n      .select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"width\", ch.cg.width + ch.cg.margin.left + ch.cg.margin.right)\n      .attr(\"height\", ch.cg.height + ch.cg.margin.top + ch.cg.margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${ch.cg.margin.left},${ch.cg.margin.top})`),\n  }\n}\n\nch.getData = function (cb) {\n  d3.json(`${ROOT_PATH}data/d3js/fish-eye/data.json`, (nations) => {\n    ch.data = nations\n\n    return cb()\n  })\n}\n\nch.setChartTitle = function () {\n  return d3utils.middleTitle(\n    ch.dom.svg,\n    ch.cg.width,\n    \"Income Per Capita vs \" +\n      \"Life Expectancy vs Population vs Region - 180 Countries\",\n    -40\n  )\n}\n\nch.setVars = function () {\n  ch.vars = {\n    colorScale: d3.scale\n      .category10()\n      .domain([\n        \"Sub-Saharan Africa\",\n        \"South Asia\",\n        \"Middle East & North Africa\",\n        \"America\",\n        \"Europe & Central Asia\",\n        \"East Asia & Pacific\",\n      ]),\n    focused: false,\n    radiusScale: d3.scale.sqrt().domain([0, 5e8]).range([5, 60]),\n    xScale: d3.fisheye\n      .scale(d3.scale.log)\n      .domain([300, 1e5])\n      .range([0, ch.cg.width]),\n    yScale: d3.fisheye\n      .scale(d3.scale.linear)\n      .domain([20, 90])\n      .range([ch.cg.height, 0]),\n  }\n}\n\nch.setAxis = function () {\n  ch.dom.xAxis = d3.svg\n    .axis()\n    .orient(\"bottom\")\n    .scale(ch.vars.xScale)\n    .tickFormat(d3.format(\",d\"))\n    .tickSize(-ch.cg.height)\n  ch.dom.yAxis = d3.svg\n    .axis()\n    .scale(ch.vars.yScale)\n    .orient(\"left\")\n    .tickSize(-ch.cg.width)\n  ch.dom.svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", `translate(0,${ch.cg.height})`)\n    .call(ch.dom.xAxis)\n  ch.dom.svg.append(\"g\").attr(\"class\", \"y axis\").call(ch.dom.yAxis)\n}\n\nch.setBackground = function () {\n  return ch.dom.svg\n    .append(\"rect\")\n    .attr(\"class\", \"background\")\n    .attr(\"width\", ch.cg.width)\n    .attr(\"height\", ch.cg.height)\n}\n\nch.setLabels = function () {\n  ch.dom.svg\n    .append(\"text\")\n    .attr(\"class\", \"x label\")\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"x\", ch.cg.width - 26)\n    .attr(\"y\", ch.cg.height + 26)\n    .text(\"income per capita, inflation-adjusted (dollars)\")\n\n  ch.dom.svg\n    .append(\"text\")\n    .attr(\"class\", \"y label\")\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"x\", -26)\n    .attr(\"y\", -40)\n    .attr(\"dy\", \".75em\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .text(\"life expectancy (years)\")\n}\n\nch.setFilter = function () {\n  return d3utils.filterColor(\"circles\", ch.dom.svg, 1.5, 0.6, true)\n}\n\nch.position = function (dot) {\n  dot\n    .attr(\"cx\", (d) => ch.vars.xScale(d.income))\n    .attr(\"cy\", (d) => ch.vars.yScale(d.lifeExpectancy))\n    .attr(\"r\", (d) => ch.vars.radiusScale(d.population))\n}\n\nch.setDots = function () {\n  ch.dom.dot = ch.dom.svg\n    .append(\"g\")\n    .attr(\"class\", \"dots\")\n    .selectAll(\".dot\")\n    .data(ch.data)\n    .enter()\n    .append(\"circle\")\n    .attr(\"class\", \"dot\")\n    .style({\n      fill(d) {\n        return ch.vars.colorScale(d.region)\n      },\n      filter: \"url(#drop-shadow-circles)\",\n      stroke: \"black\",\n      \"stroke-width\": \"1px\",\n    })\n    .call(ch.position)\n    .sort((a, b) => b.population - a.population)\n}\n\nch.setTitles = function () {\n  ch.dom.dot\n    .append(\"title\")\n    .text(\n      (d) =>\n        `${d.name}:\\n- Income: ${ch.humanizeNumber(d.income)} $/P.C.\\n` +\n        `- Population: ${ch.humanizeNumber(d.population)}\\n` +\n        `- Life expectancy: ${d.lifeExpectancy} years`\n    )\n}\n\nch.zoom = function () {\n  const mouse = d3.mouse(this)\n\n  ch.vars.xScale.distortion(2.5).focus(mouse[0])\n  ch.vars.yScale.distortion(2.5).focus(mouse[1])\n  ch.dom.dot.call(ch.position)\n  ch.dom.svg.select(\".x.axis\").call(ch.dom.xAxis)\n\n  return ch.dom.svg.select(\".y.axis\").call(ch.dom.yAxis)\n}\n\nch.setPointer = function () {\n  ch.dom.pointer = ch.dom.svg.append(\"text\").text(\"+\").attr(\"class\", \"pointer\")\n}\n\nch.bindMousemove = function () {\n  return ch.dom.svg.on(\"mousemove\", function () {\n    if (!ch.vars.focused) {\n      ch.zoom.call(this)\n    }\n  })\n}\n\nch.bindClick = function () {\n  return ch.dom.svg.on(\"click\", function () {\n    ch.vars.focused = !ch.vars.focused\n\n    if (ch.vars.focused) {\n      const mouse = d3.mouse(this)\n\n      return ch.dom.pointer\n        .attr({\n          x: mouse[0],\n          y: mouse[1],\n        })\n        .style({\n          opacity: 1,\n        })\n    }\n\n    ch.dom.pointer.style({\n      opacity: 0,\n    })\n\n    return ch.zoom.call(this)\n  })\n}\n\nch.humanizeNumber = function (n) {\n  n = n.toString()\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const n2 = n.replace(/(\\d)(\\d{3})($|,|\\.)/g, \"$1,$2$3\")\n\n    if (n === n2) {\n      break\n    } else {\n      n = n2\n    }\n  }\n\n  return n\n}\n\nexport default () => {\n  ch.ready()\n}\n","page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/fish-eye/fish-eye\"\n\nimport \"@/demos/fish-eye/fish-eye.styl\"\n\nconst FishEye = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\n      \"/vendors/d3/d3.min.js\",\n      \"/vendors/d3-plugins/fisheye/fisheye.js\",\n      \"/js/d3js-utils.js\",\n    ]}\n  >\n    <div className=\"fish-eye-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default FishEye\n","styl":".fish-eye-chart\n    text \n      font 10px sans-serif\n      text-shadow 1px 1px 1px #ccc\n\n    .axis path, .axis line \n      fill none\n      stroke #eee\n      shape-rendering crispEdges    \n    \n    .background \n      fill none\n      pointer-events all\n    \n    .chart-title\n      font-size 14px\n\n    .pointer\n        fill #7AAE61\n        font-size 15px\n        opacity 0","ts":null},"key":"fish-eye"}}},"staticQueryHashes":[]}