{
    "componentChunkName": "component---src-pages-d-3-js-fish-eye-tsx",
    "path": "/d3js/fish-eye/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Fish Eye","notes":["Uses the Fish Eye plugin","Changed style","Click to stop and show a pointer","Extended the title information"],"sources":["http://bost.ocks.org/mike/fisheye/"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".fishEyeChart {\n  text {\n    font: 10px sans-serif;\n    text-shadow: 1px 1px 1px #ccc;\n  }\n\n  .axis path,\n  .axis line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #eee;\n  }\n\n  .background {\n    fill: none;\n    pointer-events: all;\n  }\n\n  .chartTitle {\n    font-size: 14px;\n  }\n\n  .pointer {\n    fill: #7aae61;\n    font-size: 15px;\n    opacity: 0%;\n  }\n}\n","filePath":"src/demos/fish-eye/fish-eye.module.css"}],"demoTS":[{"content":"import {\n  Axis,\n  ScaleOrdinal,\n  ScalePower,\n  Selection,\n  axisBottom,\n  axisLeft,\n  format,\n  json,\n  pointer as pointerD3,\n  scaleLinear,\n  scaleLog,\n  scaleOrdinal,\n  scaleSqrt,\n  schemePastel2,\n  select,\n} from \"d3\"\n\nimport d3Fisheye, { FishEyeScale } from \"@/demos/_utils/fish-eye\"\n\nimport * as styles from \"./fish-eye.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype IncomeMetric = {\n  income: number\n  lifeExpectancy: number\n  name: string\n  population: number\n  region: string\n}\n\nconst fetchData = async (): Promise<IncomeMetric[] | undefined> =>\n  json(`${ROOT_PATH}data/d3js/fish-eye/data.json`)\n\nconst humanizeNumber = (initialN: number): string => {\n  let numStr = initialN.toString()\n\n  while (true) {\n    const numStrFormatted = numStr.replace(/(\\d)(\\d{3})($|,|\\.)/g, \"$1,$2$3\")\n\n    if (numStrFormatted === numStr) {\n      break\n    }\n\n    numStr = numStrFormatted\n  }\n\n  return numStr\n}\n\nconst margin = {\n  bottom: 70,\n  left: 70,\n  right: 50,\n  top: 80,\n}\nconst height = 700 - margin.top - margin.bottom\n\ntype FishEyeChartOpts = {\n  incomeMetrics: IncomeMetric[]\n  rootElId: string\n}\n\nclass FishEyeChart {\n  private readonly rootElId: string\n  private readonly incomeMetrics: IncomeMetric[]\n\n  private width!: number\n\n  private dom!: {\n    dot?: Selection<SVGCircleElement, IncomeMetric, SVGGElement, unknown>\n    pointer?: Selection<SVGTextElement, unknown, HTMLElement, unknown>\n    svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n    xAxis?: Axis<IncomeMetric[\"income\"]>\n    yAxis?: Axis<IncomeMetric[\"lifeExpectancy\"]>\n  }\n\n  private vars!: {\n    colorScale: ScaleOrdinal<string, string>\n    focused: boolean\n    radiusScale: ScalePower<number, number>\n    xScale: FishEyeScale\n    yScale: FishEyeScale\n  }\n\n  public constructor({ incomeMetrics, rootElId }: FishEyeChartOpts) {\n    this.rootElId = rootElId\n    this.incomeMetrics = incomeMetrics\n\n    this.setupRootEl()\n    this.setVars()\n    this.setDom()\n  }\n\n  public render() {\n    this.setChartTitle()\n    this.setBackground()\n    this.setPointer()\n    this.setFilter()\n    this.setAxis()\n    this.setLabels()\n    this.setDots()\n    this.setTitles()\n    this.bindMousemove()\n    this.bindClick()\n  }\n\n  private setupRootEl() {\n    const rootEl = document.getElementById(this.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.fishEyeChart)\n\n    this.width =\n      rootEl.getBoundingClientRect().width - margin.left - margin.right\n  }\n\n  private setDom() {\n    this.dom = {\n      svg: select(`#${this.rootElId}`)\n        .append(\"svg\")\n        .attr(\"width\", this.width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`),\n    }\n  }\n\n  private setChartTitle() {\n    this.dom.svg\n      .append(\"text\")\n      .attr(\"class\", styles.chartTitle)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${this.width / 2},-40)`)\n      .text(\n        \"Income Per Capita vs \" +\n          \"Life Expectancy vs Population vs Region - 180 Countries\"\n      )\n      .style(\"font-weight\", \"bold\")\n  }\n\n  private setVars() {\n    const colorScale = scaleOrdinal<string>()\n      .domain([\n        \"Sub-Saharan Africa\",\n        \"South Asia\",\n        \"Middle East & North Africa\",\n        \"America\",\n        \"Europe & Central Asia\",\n        \"East Asia & Pacific\",\n      ])\n      .range(schemePastel2)\n\n    const radiusScale = scaleSqrt().domain([0, 5e8]).range([5, 60])\n    const xScale = d3Fisheye\n      .scale(scaleLog)\n      .domain([300, 1e5])\n      .range([0, this.width])\n    const yScale = d3Fisheye\n      .scale(scaleLinear)\n      .domain([20, 90])\n      .range([height, 0])\n\n    this.vars = {\n      colorScale,\n      focused: false,\n      radiusScale,\n      xScale,\n      yScale,\n    }\n  }\n\n  private setAxis() {\n    this.dom.xAxis = axisBottom<IncomeMetric[\"population\"]>(this.vars.xScale)\n      .tickFormat(format(\",d\"))\n      .tickSize(-height)\n    this.dom.yAxis = axisLeft<IncomeMetric[\"income\"]>(\n      this.vars.yScale\n    ).tickSize(-this.width)\n    this.dom.svg\n      .append(\"g\")\n      .attr(\"class\", `x ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(this.dom.xAxis)\n    this.dom.svg\n      .append(\"g\")\n      .attr(\"class\", `y ${styles.axis}`)\n      .call(this.dom.yAxis)\n  }\n\n  private setBackground() {\n    return this.dom.svg\n      .append(\"rect\")\n      .attr(\"class\", styles.background)\n      .attr(\"width\", this.width)\n      .attr(\"height\", height)\n  }\n\n  private setLabels() {\n    this.dom.svg\n      .append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", this.width - 26)\n      .attr(\"y\", height + 26)\n      .text(\"income per capita, inflation-adjusted (dollars)\")\n\n    this.dom.svg\n      .append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", -26)\n      .attr(\"y\", -40)\n      .attr(\"dy\", \".75em\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"life expectancy (years)\")\n  }\n\n  private setFilter() {\n    const defs = this.dom.svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-circles`)\n\n    filter\n      .attr(\"height\", \"500%\")\n      .attr(\"width\", \"500%\")\n      .attr(\"x\", \"-200%\")\n      .attr(\"y\", \"-200%\")\n\n    filter\n      .append(\"feOffset\")\n      .attr(\"dx\", 0.5)\n      .attr(\"dy\", 0.5)\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"result\", \"offOut\")\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"offOut\")\n      .attr(\"result\", \"blurOut\")\n      .attr(\"stdDeviation\", 1.5)\n\n    filter\n      .append(\"feBlend\")\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"in2\", \"blurOut\")\n      .attr(\"mode\", \"normal\")\n\n    filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", 0.6)\n      .attr(\"type\", \"linear\")\n  }\n\n  private position() {\n    this.dom\n      .dot!.attr(\"cx\", (incomeMetric) => this.vars.xScale(incomeMetric.income))\n      .attr(\"cy\", (incomeMetric) =>\n        this.vars.yScale(incomeMetric.lifeExpectancy)\n      )\n      .attr(\"r\", (incomeMetric) =>\n        this.vars.radiusScale(incomeMetric.population)\n      )\n  }\n\n  private setDots() {\n    this.dom.dot = this.dom.svg\n      .append(\"g\")\n      .attr(\"class\", \"dots\")\n      .selectAll(\".dot\")\n      .data<IncomeMetric>(this.incomeMetrics)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot\")\n      .style(\"fill\", (incomeMetric) =>\n        this.vars.colorScale(incomeMetric.region)\n      )\n      .style(\"filter\", \"url(#drop-shadow-circles)\")\n      .style(\"stroke\", \"black\")\n      .style('\"stroke-width\"', \"1px\")\n      .sort(\n        (...[incomeMetricA, incomeMetricB]) =>\n          incomeMetricB.population - incomeMetricA.population\n      )\n\n    this.position()\n  }\n\n  private setTitles() {\n    this.dom\n      .dot!.append(\"title\")\n      .text(\n        (incomeMetric) =>\n          `${incomeMetric.name}:\\n- Income: ${humanizeNumber(\n            incomeMetric.income\n          )} $/P.C.\\n` +\n          `- Population: ${humanizeNumber(incomeMetric.population)}\\n` +\n          `- Life expectancy: ${incomeMetric.lifeExpectancy} years`\n      )\n  }\n\n  private zoom(ev: Event) {\n    const mouse = pointerD3(ev)\n\n    this.vars.xScale.distortion(2.5).focus(mouse[0])\n    this.vars.yScale.distortion(2.5).focus(mouse[1])\n    this.position()\n\n    this.dom.svg.select<SVGGElement>(`.x.${styles.axis}`).call(this.dom.xAxis!)\n    this.dom.svg.select<SVGGElement>(`.y.${styles.axis}`).call(this.dom.yAxis!)\n  }\n\n  private setPointer() {\n    this.dom.pointer = this.dom.svg\n      .append(\"text\")\n      .text(\"+\")\n      .attr(\"class\", styles.pointer)\n  }\n\n  private bindMousemove() {\n    return this.dom.svg.on(\"mousemove\", (ev) => {\n      if (!this.vars.focused) {\n        this.zoom(ev)\n      }\n    })\n  }\n\n  private bindClick() {\n    this.dom.svg.on(\"click\", (ev: Event) => {\n      this.vars.focused = !this.vars.focused\n\n      if (this.vars.focused) {\n        const pointer = pointerD3(this)\n\n        this.dom\n          .pointer!.attr(\"x\", pointer[0])\n          .attr(\"y\", pointer[1])\n          .style(\"opacity\", 1)\n\n        return\n      }\n\n      this.dom.pointer!.style(\"opacity\", 0)\n\n      this.zoom(ev)\n    })\n  }\n}\n\nconst main = async () => {\n  const incomeMetrics = await fetchData()\n\n  const chart = new FishEyeChart({\n    incomeMetrics: incomeMetrics as IncomeMetric[],\n    rootElId: CONTAINER_ID,\n  })\n\n  chart.render()\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/fish-eye/fish-eye.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/fish-eye/fish-eye\"\n\nconst FishEye = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default FishEye\n","type":"tsx"}},"key":"fish-eye"},"meta":{"description":"Fisheye Chart example using D3.js, with the Fisheye plugin. It has a more depurated style, and the ability to stop the scale changes when it's clicked."}}},
    "staticQueryHashes": []}