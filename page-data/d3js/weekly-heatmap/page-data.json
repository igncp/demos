{"componentChunkName":"component---src-pages-d-3-js-weekly-heatmap-js","path":"/d3js/weekly-heatmap/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"name":"Weekly Heatmap","notes":[],"sources":["http://bl.ocks.org/tjdecke/5558084"],"category":"d3js","files":{"d3utils":"const d3utils = {\n  colorsScale(colors, extent) {\n    const c = d3.scale.linear().domain(extent).range([0, 1])\n    const colorScale = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      height: \"500%\",\n      id: `drop-shadow-${id}`,\n      width: \"500%\",\n      x: \"-200%\",\n      y: \"-200%\",\n    })\n\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"SourceAlpha\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feOffset\").attr({\n      dx: 1,\n      dy: 1,\n    })\n    filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(id, svg, deviation, slope, extra) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      id: `drop-shadow-${id}`,\n    })\n\n    if (extra) {\n      filter.attr({\n        height: \"500%\",\n        width: \"500%\",\n        x: \"-200%\",\n        y: \"-200%\",\n      })\n    }\n\n    filter.append(\"feOffset\").attr({\n      dx: 0.5,\n      dy: 0.5,\n      in: \"SourceGraphic\",\n      result: \"offOut\",\n    })\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"offOut\",\n      result: \"blurOut\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feBlend\").attr({\n      in: \"SourceGraphic\",\n      in2: \"blurOut\",\n      mode: \"normal\",\n    })\n\n    return filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n  },\n  middleTitle(svg, width, text, top) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr({\n        class: \"chart-title\",\n        \"text-anchor\": \"middle\",\n        transform: `translate(${String(width / 2)},${top})`,\n      })\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector, width, height, margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr({\n        height: height + margin.top + margin.bottom,\n        width: width + margin.left + margin.right,\n      })\n      .append(\"g\")\n      .attr({\n        transform: `translate(${margin.left},${margin.top})`,\n      })\n  },\n  tooltip(selector, customOpts) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = _.merge(defaultOpts, customOpts)\n\n    $(selector).tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import * as d3 from \"d3\"\nimport d3utils from \"@/demos/_utils/d3nextutils\"\n\ntype DataItem = {\n  day: number\n  hour: number\n  value: number\n}\n\nconst buckets = 9\nconst colors = [\n  \"#ffffd9\",\n  \"#edf8b1\",\n  \"#c7e9b4\",\n  \"#7fcdbb\",\n  \"#41b6c4\",\n  \"#1d91c0\",\n  \"#225ea8\",\n  \"#253494\",\n  \"#081d58\",\n]\n\nconst days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]\nconst times = [\n  \"1 am\",\n  \"2 am\",\n  \"3 am\",\n  \"4 am\",\n  \"5 am\",\n  \"6 am\",\n  \"7 am\",\n  \"8 am\",\n  \"9 am\",\n  \"10 am\",\n  \"11 am\",\n  \"12 am\",\n  \"1 pm\",\n  \"2 pm\",\n  \"3 pm\",\n  \"4 pm\",\n  \"5 pm\",\n  \"6 pm\",\n  \"7 pm\",\n  \"8 pm\",\n  \"9 pm\",\n  \"10 pm\",\n  \"11 pm\",\n  \"12 pm\",\n]\n\nconst fetchData = async (): Promise<DataItem[]> => {\n  const values = function (d: DataItem) {\n    return {\n      day: +d.day,\n      hour: +d.hour,\n      value: +d.value,\n    }\n  }\n\n  const data: any = await d3.tsv(\n    `${ROOT_PATH}data/d3js/weekly-heatmap/data.tsv`\n  )\n\n  return data.map(values)\n}\n\nconst margin = {\n  bottom: 100,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst renderChart = async ({\n  data,\n  rootElId,\n}: {\n  data: DataItem[]\n  rootElId: string\n}) => {\n  const width =\n    (document.getElementById(rootElId) as HTMLElement).getBoundingClientRect()\n      .width -\n    margin.left -\n    margin.right\n  const height = Math.ceil((width * 10) / 24) - margin.top - margin.bottom + 60\n  const gridSize = Math.floor(width / 24)\n  const legendElementWidth = gridSize * 2\n\n  const max = d3.max(data, (d) => d.value)\n\n  const colorScale = d3\n    .scaleQuantile<string>()\n    .domain([0, buckets - 1, max])\n    .range(colors)\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  svg\n    .selectAll(\".dayLabel\")\n    .data(days)\n    .enter()\n    .append(\"text\")\n    .text((d) => d)\n    .attr(\"class\", (_d, i) => {\n      if (i >= 0 && i <= 4) {\n        return \"dayLabel mono axis axis-workweek\"\n      }\n\n      return \"dayLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(-6,${gridSize / 1.5})`)\n    .attr(\"x\", 0)\n    .attr(\"y\", (_d, i) => i * gridSize)\n    .style(\"text-anchor\", \"end\")\n\n  svg\n    .selectAll(\".timeLabel\")\n    .data(times)\n    .enter()\n    .append(\"text\")\n    .text((d) => d)\n    .attr(\"class\", (_d, i) => {\n      if (i >= 7 && i <= 16) {\n        return \"timeLabel mono axis axis-worktime\"\n      }\n\n      return \"timeLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(${gridSize / 2}, -6)`)\n    .attr(\"x\", (_d, i) => i * gridSize)\n    .attr(\"y\", 0)\n    .style(\"text-anchor\", \"middle\")\n\n  const heatMap = svg\n    .selectAll(\".hour\")\n    .data(data)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"hour bordered\")\n    .attr(\"height\", gridSize)\n    .attr(\"rx\", 4)\n    .attr(\"ry\", 4)\n    .attr(\"width\", gridSize)\n    .attr(\"x\", (d) => (d.hour - 1) * gridSize)\n    .attr(\"y\", (d) => (d.day - 1) * gridSize)\n    .style(\"fill\", colors[0])\n\n  heatMap\n    .transition()\n    .duration(6000)\n    .style(\"fill\", (d) => colorScale(d.value))\n\n  heatMap.attr(\"data-title\", (d) => `Value: ${d.value}`)\n\n  d3utils.tooltip(\".hour\", {\n    tOpts: {\n      delay: {\n        hide: 0,\n        show: 500,\n      },\n    },\n  })\n\n  const legend = svg\n    .selectAll(\".legend\")\n    .data<any>([0].concat(colorScale.quantiles()), (d) => d)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"legend\")\n\n  legend\n    .append(\"rect\")\n    .attr(\"x\", (_d, i) => legendElementWidth * i)\n    .attr(\"y\", height)\n    .attr(\"width\", legendElementWidth)\n    .attr(\"height\", gridSize / 2)\n    .style(\"fill\", (_d, i) => colors[i])\n    .style(\"stroke\", \"#CCC\")\n\n  legend\n    .append(\"text\")\n    .attr(\"class\", \"mono\")\n    .text((d) => `â‰¥ ${d.toFixed(2)}`)\n    .attr(\"x\", (_d, i) => legendElementWidth * i)\n    .attr(\"y\", height + gridSize)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({ data, rootElId: \"chart\" })\n}\n\nexport default main\n","type":"ts"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/weekly-heatmap/weekly-heatmap\"\n\nimport \"@/demos/weekly-heatmap/weekly-heatmap.styl\"\n\nconst WeeklyHeatmap = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"weekly-heatmap-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default WeeklyHeatmap\n","styl":".weekly-heatmap-chart\n    rect.bordered \n        stroke: #E6E6E6;\n        stroke-width:2px;   \n    \n\n    text.mono \n        font-size: 9pt;\n        font-family: Consolas, courier;\n        fill: #aaa;\n    \n\n    text.axis-workweek \n        fill: #000;\n    \n\n    text.axis-worktime \n        fill: #000;"},"key":"weekly-heatmap"}}},"staticQueryHashes":[]}