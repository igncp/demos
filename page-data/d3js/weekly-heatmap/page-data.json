{"componentChunkName":"component---src-pages-d-3-js-weekly-heatmap-tsx","path":"/d3js/weekly-heatmap/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"docs":[["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-fetch API reference","https://github.com/d3/d3-fetch#api-reference"],["d3-fetch Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-fetch/index.d.ts"]],"name":"Weekly Heatmap","notes":[],"sources":["http://bl.ocks.org/tjdecke/5558084"],"summary":["This chart is a grid of days and hours using a quantile to group the data values by nine colors. The number of groups is directly tied to the colors array, so removing or adding colors to the array also affects the number of groups."],"category":"d3js","files":{"demo":{"content":"import { max as maxD3, scaleQuantile, select, tsv } from \"d3\"\n\nimport \"./weekly-heatmap.styl\"\n\ntype TimeItem = {\n  day: number\n  hour: number\n  value: number\n}\n\nconst colors = [\n  \"#ffffd9\",\n  \"#edf8b1\",\n  \"#c7e9b4\",\n  \"#7fcdbb\",\n  \"#41b6c4\",\n  \"#1d91c0\",\n  \"#225ea8\",\n  \"#253494\",\n  \"#081d58\",\n]\nconst buckets = colors.length\n\nconst days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]\nconst hours = Array.from({ length: 24 }).map((_, index: number) => {\n  const num = index % 12\n\n  return `${num + 1} ${index >= 11 && index !== 23 ? \"pm\" : \"am\"}`\n})\n\nconst fetchData = async (): Promise<TimeItem[]> => {\n  const data: any = await tsv(`${ROOT_PATH}data/d3js/weekly-heatmap/data.tsv`)\n\n  return data.map((timeItem: TimeItem) => ({\n    day: +timeItem.day,\n    hour: +timeItem.hour,\n    value: +timeItem.value,\n  }))\n}\n\nconst margin = {\n  bottom: 100,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst hoursInDay = 24\nconst rectRadiusSize = 100\nconst extraHeight = 60\nconst axisOffset = -6\n\nconst workingDayMin = 0\nconst workingDayMax = 4\nconst workingHourMin = 7\nconst workingHourMax = 16\n\nconst legendStroke = \"#ccc\"\n\nconst texts = {\n  hoursTooltip: (timeItem: TimeItem) => `Value: ${timeItem.value}`,\n  legendText: (value: number) => `â‰¥ ${value.toFixed(2)}`,\n}\n\nconst renderChart = async ({\n  data,\n  rootElId,\n}: {\n  data: TimeItem[]\n  rootElId: string\n}) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"weekly-heatmap-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n  const height =\n    Math.ceil((width * 10) / hoursInDay) -\n    margin.top -\n    margin.bottom +\n    extraHeight\n  const cellSize = Math.floor(width / hoursInDay)\n  const legendElementWidth = cellSize * 2\n\n  const max = maxD3(data, (timeItem) => timeItem.value)\n\n  const colorScale = scaleQuantile<string>()\n    .domain([0, buckets - 1, max])\n    .range(colors)\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  svg\n    .selectAll(\".dayLabel\")\n    .data(days)\n    .enter()\n    .append(\"text\")\n    .text((day) => day)\n    .attr(\"class\", (_d, dayIndex) => {\n      if (dayIndex >= workingDayMin && dayIndex <= workingDayMax) {\n        return \"dayLabel mono axis axis-workweek\"\n      }\n\n      return \"dayLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(${axisOffset},${cellSize / 1.5})`)\n    .attr(\"x\", 0)\n    .attr(\"y\", (_d, dayIndex) => dayIndex * cellSize)\n    .style(\"text-anchor\", \"end\")\n\n  svg\n    .selectAll(\".timeLabel\")\n    .data(hours)\n    .enter()\n    .append(\"text\")\n    .text((hourStr) => hourStr)\n    .attr(\"class\", (_d, hourIndex) => {\n      if (hourIndex >= workingHourMin && hourIndex <= workingHourMax) {\n        return \"timeLabel mono axis axis-worktime\"\n      }\n\n      return \"timeLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(${cellSize / 2}, ${axisOffset})`)\n    .attr(\"x\", (_d, hourIndex) => hourIndex * cellSize)\n    .attr(\"y\", 0)\n    .style(\"text-anchor\", \"middle\")\n\n  const heatMap = svg\n    .selectAll(\".hour\")\n    .data(data)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"hour bordered\")\n    .attr(\"height\", cellSize)\n    .attr(\"rx\", rectRadiusSize)\n    .attr(\"ry\", rectRadiusSize)\n    .attr(\"width\", cellSize)\n    .attr(\"x\", (timeItem) => (timeItem.hour - 1) * cellSize)\n    .attr(\"y\", (timeItem) => (timeItem.day - 1) * cellSize)\n    .attr(\"title\", texts.hoursTooltip)\n    .style(\"fill\", colors[0])\n\n  heatMap\n    .transition()\n    .duration(6000)\n    .style(\"fill\", (timeItem) => colorScale(timeItem.value))\n\n  $(\".hour\").tooltip()\n\n  const legend = svg\n    .selectAll(\".legend\")\n    .data<any>([0].concat(colorScale.quantiles()), (d) => d)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"legend\")\n\n  legend\n    .append(\"rect\")\n    .attr(\"x\", (_value, valueIndex) => legendElementWidth * valueIndex)\n    .attr(\"y\", height)\n    .attr(\"width\", legendElementWidth)\n    .attr(\"height\", cellSize / 2)\n    .style(\"fill\", (_value, valueIndex) => colors[valueIndex])\n    .style(\"stroke\", legendStroke)\n\n  legend\n    .append(\"text\")\n    .attr(\"class\", \"mono\")\n    .text(texts.legendText)\n    .style(\"text-anchor\", \"middle\")\n    .attr(\n      \"x\",\n      (_value, valueIndex) =>\n        legendElementWidth * valueIndex + legendElementWidth / 2\n    )\n    .attr(\"y\", height + cellSize)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({ data, rootElId: \"chart\" })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/weekly-heatmap/weekly-heatmap\"\n\nconst WeeklyHeatmap = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo\n    demoInfo={demoInfo}\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default WeeklyHeatmap\n","type":"tsx"},"styl":".weekly-heatmap-chart\n  rect.bordered\n    stroke: #E6E6E6;\n    stroke-width:2px;\n\n  text.mono\n    font-size: 9pt;\n    font-family: Consolas, courier;\n    fill: #aaa;\n\n  text.axis-workweek\n    fill: #000;\n\n  text.axis-worktime\n    fill: #000;\n"},"key":"weekly-heatmap"}}},"staticQueryHashes":[]}