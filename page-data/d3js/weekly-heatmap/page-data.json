{"componentChunkName":"component---src-pages-d-3-js-weekly-heatmap-js","path":"/d3js/weekly-heatmap/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"name":"Weekly Heatmap","notes":[],"sources":["http://bl.ocks.org/tjdecke/5558084"],"category":"d3js","files":{"js":"const main = () => {\n  const margin = {\n    bottom: 100,\n    left: 50,\n    right: 50,\n    top: 50,\n  }\n\n  const width = $(\"#chart\").innerWidth() - margin.left - margin.right\n  const height = Math.ceil((width * 10) / 24) - margin.top - margin.bottom + 60\n  const gridSize = Math.floor(width / 24)\n  const legendElementWidth = gridSize * 2\n  const buckets = 9\n  const colors = [\n    \"#ffffd9\",\n    \"#edf8b1\",\n    \"#c7e9b4\",\n    \"#7fcdbb\",\n    \"#41b6c4\",\n    \"#1d91c0\",\n    \"#225ea8\",\n    \"#253494\",\n    \"#081d58\",\n  ]\n\n  const days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]\n  const times = [\n    \"1 am\",\n    \"2 am\",\n    \"3 am\",\n    \"4 am\",\n    \"5 am\",\n    \"6 am\",\n    \"7 am\",\n    \"8 am\",\n    \"9 am\",\n    \"10 am\",\n    \"11 am\",\n    \"12 am\",\n    \"1 pm\",\n    \"2 pm\",\n    \"3 pm\",\n    \"4 pm\",\n    \"5 pm\",\n    \"6 pm\",\n    \"7 pm\",\n    \"8 pm\",\n    \"9 pm\",\n    \"10 pm\",\n    \"11 pm\",\n    \"12 pm\",\n  ]\n\n  const values = function (d) {\n    return {\n      day: +d.day,\n      hour: +d.hour,\n      value: +d.value,\n    }\n  }\n\n  d3.tsv(\n    `${ROOT_PATH}data/d3js/weekly-heatmap/data.tsv`,\n    values,\n    (_error, data) => {\n      const colorScale = d3.scale\n        .quantile()\n        .domain([0, buckets - 1, d3.max(data, (d) => d.value)])\n        .range(colors)\n      const svg = d3\n        .select(\"#chart\")\n        .append(\"svg\")\n        .attr({\n          height: height + margin.top + margin.bottom,\n          width: width + margin.left + margin.right,\n        })\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n      svg\n        .selectAll(\".dayLabel\")\n        .data(days)\n        .enter()\n        .append(\"text\")\n        .text((d) => d)\n        .attr({\n          class(_d, i) {\n            if (i >= 0 && i <= 4) {\n              return \"dayLabel mono axis axis-workweek\"\n            }\n\n            return \"dayLabel mono axis\"\n          },\n          transform: `translate(-6,${gridSize / 1.5})`,\n          x: 0,\n          y(_d, i) {\n            return i * gridSize\n          },\n        })\n        .style(\"text-anchor\", \"end\")\n\n      svg\n        .selectAll(\".timeLabel\")\n        .data(times)\n        .enter()\n        .append(\"text\")\n        .text((d) => d)\n        .attr({\n          class(_d, i) {\n            if (i >= 7 && i <= 16) {\n              return \"timeLabel mono axis axis-worktime\"\n            }\n\n            return \"timeLabel mono axis\"\n          },\n          transform: `translate(${gridSize / 2}, -6)`,\n          x(_d, i) {\n            return i * gridSize\n          },\n          y: 0,\n        })\n        .style(\"text-anchor\", \"middle\")\n\n      const heatMap = svg\n        .selectAll(\".hour\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr({\n          class: \"hour bordered\",\n          height: gridSize,\n          rx: 4,\n          ry: 4,\n          width: gridSize,\n          x(d) {\n            return (d.hour - 1) * gridSize\n          },\n          y(d) {\n            return (d.day - 1) * gridSize\n          },\n        })\n        .style(\"fill\", colors[0])\n\n      heatMap\n        .transition()\n        .duration(6000)\n        .style(\"fill\", (d) => colorScale(d.value))\n      heatMap.attr(\"data-title\", (d) => `Value: ${d.value}`)\n      d3utils.tooltip(\".hour\", {\n        tOpts: {\n          delay: {\n            hide: 0,\n            show: 500,\n          },\n        },\n      })\n\n      const legend = svg\n        .selectAll(\".legend\")\n        .data([0].concat(colorScale.quantiles()), (d) => d)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"legend\")\n\n      legend\n        .append(\"rect\")\n        .attr(\"x\", (_d, i) => legendElementWidth * i)\n        .attr(\"y\", height)\n        .attr(\"width\", legendElementWidth)\n        .attr(\"height\", gridSize / 2)\n        .style({\n          fill(_d, i) {\n            return colors[i]\n          },\n          stroke: \"#CCC\",\n        })\n\n      legend\n        .append(\"text\")\n        .attr(\"class\", \"mono\")\n        .text((d) => `â‰¥ ${Math.round(d)}`)\n        .attr(\"x\", (_d, i) => legendElementWidth * i)\n        .attr(\"y\", height + gridSize)\n    }\n  )\n}\n\nexport default main\n","page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/weekly-heatmap/weekly-heatmap\"\n\nimport \"@/demos/weekly-heatmap/weekly-heatmap.styl\"\n\nconst WeeklyHeatmap = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\"/vendors/d3/d3.min.js\", \"/js/d3js-utils.js\"]}\n  >\n    <div className=\"weekly-heatmap-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default WeeklyHeatmap\n","styl":".weekly-heatmap-chart\n    rect.bordered \n        stroke: #E6E6E6;\n        stroke-width:2px;   \n    \n\n    text.mono \n        font-size: 9pt;\n        font-family: Consolas, courier;\n        fill: #aaa;\n    \n\n    text.axis-workweek \n        fill: #000;\n    \n\n    text.axis-worktime \n        fill: #000;","ts":null},"key":"weekly-heatmap"}}},"staticQueryHashes":[]}