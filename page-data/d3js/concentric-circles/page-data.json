{
    "componentChunkName": "component---src-pages-d-3-js-concentric-circles-tsx",
    "path": "/d3js/concentric-circles/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":[],"docs":[],"isCompleted":false,"name":"Concentric Circles","notes":["Data of baby names in New York 2012","Custom color scale","Added box shadow filter"],"sources":["http://codepen.io/notno/pen/wgyAz","http://bl.ocks.org/cpbotha/5200394","http://stackoverflow.com/questions/17671252/d3-create-a-continous-color-scale-with-many-strings-inputs-for-the-range-and-dy"],"summary":[],"category":"d3js","files":{"demoCSS":[],"demoTS":[{"content":"import { CirclesChart } from \"./circles-chart\"\nimport {\n  CONTAINER_ID,\n  State,\n  VALUES_SLIDER_ID,\n  fetchData,\n  getChartConfig,\n} from \"./concentric-circles-config\"\n\nconst main = async () => {\n  const namesMetrics = await fetchData()\n  const defaultPercentage = 100\n  const state: State = {\n    percentage: defaultPercentage,\n  }\n\n  const chartConfig = getChartConfig({\n    namesMetrics,\n    state,\n  })\n\n  const chart = CirclesChart.renderChart(chartConfig)\n\n  $(`#${VALUES_SLIDER_ID}`).slider({\n    change: (...[, { value: percentageValue }]) => {\n      state.percentage = percentageValue as number\n      chart.refresh()\n    },\n    max: 100,\n    min: 0,\n    value: defaultPercentage, // eslint-disable-line id-denylist\n  })\n}\n\nexport { CONTAINER_ID, VALUES_SLIDER_ID }\n\nexport default main\n","filePath":"src/demos/concentric-circles/concentric-circles.ts"},{"content":"import { Selection, extent, max, range, scaleLinear, select } from \"d3\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nconst colours = [\"#7c7cc9\", \"#52d552\", \"#337233\", \"#323247\"]\n\nconst margin = {\n  bottom: 20,\n  left: 20,\n  right: 20,\n  top: 20,\n}\nconst strokeWidth = \"2px\"\n\nconst addFilter = <ChartData>(\n  svg: Selection<SVGGElement, ChartData, HTMLElement, unknown>\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\")\n\n  filter.attr(\"id\", \"drop-shadow\")\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 9)\n  filter.append(\"feOffset\").attr(\"dx\", 5).attr(\"dy\", 5)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \".3\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\ntype ChartConfig<ChartData> = Readonly<{\n  chartDescription: string\n  getCircleId: (circle: ChartData) => string\n  getCircleTitle: (circle: ChartData) => string\n  getCircleValue: (circle: ChartData) => number\n  getCirclesData: () => ChartData[]\n  rootElId: string\n}>\n\ntype ChartElements<ChartData> = Readonly<{\n  descriptionSel: Selection<SVGTextElement, ChartData, HTMLElement, unknown>\n  gSel: Selection<SVGGElement, ChartData, HTMLElement, unknown>\n  svgSel: Selection<SVGSVGElement, ChartData, HTMLElement, unknown>\n}>\n\nclass CirclesChart<ChartData> {\n  private readonly config: ChartConfig<ChartData>\n  private readonly elements: ChartElements<ChartData>\n  private readonly circleClass: string\n\n  private constructor(config: ChartConfig<ChartData>) {\n    this.config = config\n\n    const svgSel = select<HTMLElement, ChartData>(`#${config.rootElId}`).append(\n      \"svg\"\n    )\n    const gSel = svgSel.append(\"g\")\n    const descriptionSel = gSel\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"width\", \"20px\")\n\n    this.circleClass = `name-circle-${uuidv1().slice(0, 6)}`\n\n    this.elements = {\n      descriptionSel,\n      gSel,\n      svgSel,\n    }\n\n    addFilter<ChartData>(gSel)\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public static renderChart<ChartData>(config: ChartConfig<ChartData>) {\n    return new CirclesChart(config)\n  }\n\n  public teardown() {\n    window.removeEventListener(\"resize\", this.handleResize)\n  }\n\n  public refresh() {\n    this.render()\n  }\n\n  private render() {\n    const {\n      config: {\n        chartDescription,\n        getCircleId,\n        getCircleTitle,\n        getCircleValue,\n        getCirclesData,\n        rootElId,\n      },\n      elements,\n    } = this\n\n    const circlesData = getCirclesData()\n\n    const colorScale = scaleLinear()\n      .domain(extent(circlesData, getCircleValue) as [number, number])\n      .range([0, 1])\n\n    const heatmapColour = scaleLinear<string>()\n      .domain(range(0, 1, 1.0 / colours.length))\n      .range(colours)\n\n    const colorize = (circle: ChartData) => {\n      const circleValue = getCircleValue(circle)\n      const colorNormalized = colorScale(circleValue)\n\n      return heatmapColour(colorNormalized)\n    }\n\n    const dataMax = max(circlesData, getCircleValue) as number\n\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n    const { width: elWidth } = rootEl.getBoundingClientRect()\n\n    const width = elWidth - margin.left - margin.right\n    const height = max(circlesData, getCircleValue)! * 2.5\n\n    elements.svgSel\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.left + margin.right)\n\n    const groupUpdates = elements.gSel\n      .selectAll<SVGGElement, ChartData>(\".circle-group\")\n      .data(circlesData, getCircleId)\n\n    groupUpdates\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"circle-group\")\n      .append(\"circle\")\n      .attr(\"class\", this.circleClass)\n\n    groupUpdates.exit().remove()\n\n    elements.gSel\n      .selectAll<SVGCircleElement, ChartData>(`.${this.circleClass}`)\n      .attr(\"cx\", width / 2)\n      .attr(\"cy\", height / 2)\n      .attr(\"title\", getCircleTitle)\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", colorize)\n      .style(\"stroke-width\", strokeWidth)\n      .style(\"filter\", (circle) =>\n        getCircleValue(circle) > dataMax / 2.5 ? \"url(#drop-shadow)\" : \"\"\n      )\n      .on(\"mouseenter\", function onMouseOver() {\n        select(this).style(\"stroke\", \"#D88021\").style(\"stroke-width\", \"10px\")\n      })\n      .on(\"mouseleave\", function onMouseLeave() {\n        select<SVGCircleElement, ChartData>(this)\n          .style(\"stroke\", colorize)\n          .style(\"stroke-width\", strokeWidth)\n      })\n      .attr(\"r\", (...[, circleIndex]) => `${circleIndex / 5}px`)\n\n    $(`.${this.circleClass}`).tooltip({\n      track: true,\n    })\n\n    elements.descriptionSel\n      .text(chartDescription)\n      .attr(\"transform\", `translate(${width / 2},${height - 10})`)\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nexport { CirclesChart, ChartConfig }\n","filePath":"src/demos/concentric-circles/circles-chart.ts"},{"content":"import { csv } from \"d3\"\n\nimport { ChartConfig } from \"./circles-chart\"\n\nconst CONTAINER_ID = \"chart\"\nconst VALUES_SLIDER_ID = \"year-slider\"\n\ntype NamesMetric = {\n  count: number\n  name: string\n  year: string\n}\n\ntype NamesMetrics = NamesMetric[]\n\ntype State = {\n  percentage: number\n}\n\nconst fetchData = async (): Promise<NamesMetrics> => {\n  const response = (await csv(\n    `${ROOT_PATH}data/d3js/concentric-circles/data.csv`\n  )) as unknown as NamesMetrics\n\n  return response.map((nameItem) => ({\n    ...nameItem,\n    count: +nameItem.count,\n  }))\n}\n\ntype Config = ChartConfig<NamesMetric>\n\nconst getCircleValue: Config[\"getCircleValue\"] = (circle) => circle.count\nconst getCircleId: Config[\"getCircleId\"] = (circle) => circle.name\n\nconst getCircleTitle: Config[\"getCircleTitle\"] = (circle) =>\n  `${circle.name}: ${circle.count}`\n\nconst chartDescription =\n  \"Circles radius are proportional to order in the ranking\"\n\nconst getChartConfig = ({\n  namesMetrics,\n  state,\n}: {\n  namesMetrics: NamesMetrics\n  state: State\n}): Config => ({\n  chartDescription,\n  getCircleId,\n  getCircleTitle,\n  getCircleValue,\n  getCirclesData: () => {\n    const addedNames = new Set()\n\n    return namesMetrics\n      .sort((...[namesObjA, namesObjB]) => namesObjB.count - namesObjA.count)\n      .filter((nameObj) => {\n        if (addedNames.has(nameObj.name)) {\n          return false\n        }\n\n        addedNames.add(nameObj.name)\n\n        return true\n      })\n      .filter(\n        (...[, nameObjIndex, nameObjArr]) =>\n          (100 * nameObjIndex) / nameObjArr.length <= state.percentage\n      )\n      .reverse()\n  },\n  rootElId: CONTAINER_ID,\n})\n\nexport { CONTAINER_ID, State, VALUES_SLIDER_ID, fetchData, getChartConfig }\n","filePath":"src/demos/concentric-circles/concentric-circles-config.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  VALUES_SLIDER_ID,\n} from \"@/demos/concentric-circles/concentric-circles\"\n\nconst ConcentricCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div style={{ marginBottom: 20 }}>\n      <p>Values</p>\n      <div id={VALUES_SLIDER_ID} />\n    </div>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default ConcentricCircles\n","type":"tsx"}},"key":"concentric-circles"},"meta":{"description":"Concentric circles example using D3.js, with a non repeated series of data and with a new style that heavily uses the svg drop-shadow type filter."}}},
    "staticQueryHashes": []}