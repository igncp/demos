{"componentChunkName":"component---src-pages-d-3-js-concentric-circles-tsx","path":"/d3js/concentric-circles/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[],"name":"Concentric Circles","notes":["Data of baby names in New York 2012","Custom color scale","Added box shadow filter"],"sources":["http://codepen.io/notno/pen/wgyAz","http://bl.ocks.org/cpbotha/5200394","http://stackoverflow.com/questions/17671252/d3-create-a-continous-color-scale-with-many-strings-inputs-for-the-range-and-dy"],"summary":[],"category":"d3js","files":{"d3utils":"import * as d3 from \"d3\"\nimport merge from \"lodash/merge\"\n\ntype Margin = {\n  bottom: number\n  left: number\n  right: number\n  top: number\n}\n\ntype SVG = d3.Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n// @TODO: remove when no longer used\n\nconst d3utils = {\n  colorsScale<P extends number = any>(colors: any, extent: any) {\n    const c = d3.scaleLinear().domain(extent).range([0, 1])\n    const colorScale = d3\n      .scaleLinear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p: P) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id: string, svg: SVG, deviation: number, slope: number) {\n    const defs = svg.append(\"defs\")\n    const filter = defs\n      .append(\"filter\")\n      .attr(\"height\", \"500%\")\n      .attr(\"id\", `drop-shadow-${id}`)\n      .attr(\"width\", \"500%\")\n      .attr(\"x\", \"-200%\")\n      .attr(\"y\", \"-200%\")\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"SourceAlpha\")\n      .attr(\"stdDeviation\", deviation)\n\n    filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n    filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", slope)\n      .attr(\"type\", \"linear\")\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(\n    id: string,\n    svg: SVG,\n    deviation: number,\n    slope: number,\n    extra?: any\n  ) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n    if (extra) {\n      filter\n        .attr(\"height\", \"500%\")\n        .attr(\"width\", \"500%\")\n        .attr(\"x\", \"-200%\")\n        .attr(\"y\", \"-200%\")\n    }\n\n    filter\n      .append(\"feOffset\")\n      .attr(\"dx\", 0.5)\n      .attr(\"dy\", 0.5)\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"result\", \"offOut\")\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"offOut\")\n      .attr(\"result\", \"blurOut\")\n      .attr(\"stdDeviation\", deviation)\n\n    filter\n      .append(\"feBlend\")\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"in2\", \"blurOut\")\n      .attr(\"mode\", \"normal\")\n\n    return filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", slope)\n      .attr(\"type\", \"linear\")\n  },\n\n  middleTitle(svg: SVG, width: number, text: string, top: number | null) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${String(width / 2)},${top})`)\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector: string, width: number, height: number, margin: Margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n  },\n  tooltip(selector: string, customOpts: any) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = merge(defaultOpts, customOpts)\n\n    const sel: any = $(selector)\n\n    sel.tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import * as d3 from \"d3\"\nimport merge from \"lodash/merge\"\n\ntype Data = Array<{\n  count: string\n  name: string\n  sex: string\n  year: string\n}>\ntype SVG = d3.Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n// @TODO; use d3utils\n// requires jquery and jquery ui\nconst tooltip = (\n  selector: string,\n  customOpts: Partial<{\n    elementSelector: string\n    followElement: boolean\n    followMouse: boolean\n    leftOffst: number\n    tOpts: {\n      container: string\n      viewport: {\n        selector: string\n      }\n    }\n    topOffst: number\n  }>,\n  rootElId: string\n) => {\n  const { $ } = window as any\n\n  if (customOpts == null) {\n    customOpts = {}\n  }\n\n  const defaultOpts = {\n    elementSelector: \"\",\n    followElement: false,\n    followMouse: false,\n    leftOffst: 60,\n    tOpts: {\n      container: \"body\",\n      viewport: {\n        selector: `#${rootElId} svg`,\n      },\n    },\n    topOffst: 40,\n  }\n\n  const opts = merge(defaultOpts, customOpts)\n\n  $(selector).tooltip(opts.tOpts)\n\n  if (opts.followMouse) {\n    $(selector).hover((e: MouseEvent) =>\n      $(\".tooltip\").css({\n        left: `${String(e.pageX - opts.leftOffst)}px`,\n        top: `${String(e.pageY - opts.topOffst)}px`,\n      })\n    )\n  } else if (opts.followElement) {\n    $(selector).hover(() =>\n      $(\".tooltip\").css({\n        left: `${String(\n          $(opts.elementSelector).position().left - opts.leftOffst\n        )}px`,\n        top: `${String(\n          $(opts.elementSelector).position().top - opts.topOffst\n        )}px`,\n      })\n    )\n  }\n}\n\nconst fetchData = async (): Promise<Data> => {\n  const data = await d3.csv(`${ROOT_PATH}data/d3js/concentric-circles/data.csv`)\n\n  return (data as unknown) as Data\n}\n\nconst colours = [\"#7C7CC9\", \"#52D552\", \"#337233\", \"#323247\"]\n\nconst margin = {\n  bottom: 20,\n  left: 20,\n  right: 20,\n  top: 20,\n}\nconst strokeWidth = \"2px\"\n\nconst addFilter = (svg: SVG) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\")\n\n  filter.attr(\"id\", \"drop-shadow\")\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 9)\n  filter.append(\"feOffset\").attr(\"dx\", 5).attr(\"dy\", 5)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \".3\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\ntype AddDescription = (o: { svg: SVG; height: number; width: number }) => void\n\nconst addDescription: AddDescription = ({ svg, height, width }) => {\n  svg\n    .append(\"text\")\n    .text(\n      \"Circles radius are proportional to the count of times the name appears\"\n    )\n    .attr(\"transform\", `translate(${width / 2},${height - 10})`)\n    .attr(\"width\", \"20px\")\n}\n\ntype RenderChart = (o: { data: Data; rootElId: string }) => void\n\nconst renderChart: RenderChart = ({ data, rootElId }) => {\n  const c = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (d) => +d.count) as [number, number])\n    .range([0, 1])\n\n  const heatmapColour = d3\n    .scaleLinear()\n    .domain(d3.range(0, 1, 1.0 / colours.length))\n    .range(colours as any)\n\n  const colorize = (d: Data[number]) => {\n    const colorNormalized = c(+d.count)\n\n    return heatmapColour(colorNormalized)\n  }\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n  const { width: elWidth } = rootEl.getBoundingClientRect()\n\n  const width = elWidth - margin.left - margin.right\n  const height = (d3.max(data, (d) => +d.count) as number) * 2.5\n\n  const svg: SVG = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.left + margin.right)\n    .append(\"g\")\n\n  addFilter(svg)\n\n  const circleGroup = svg\n    .selectAll(\"g\")\n    .data(data, (d: any) => (d as Data[number]).name)\n    .enter()\n    .append(\"g\")\n\n  const circles = circleGroup.append(\"svg:circle\")\n  const rScale = d3\n    .scalePow()\n    .exponent(0.9)\n    .range([5, 300])\n    .domain(d3.extent(data, (d) => +d.count) as [number, number])\n\n  const getTitle = (d: Data[number]) => `${d.name}: ${d.count}`\n  const dataMax = d3.max(data, (d) => +d.count) as number\n\n  circles\n    .attr(\"cx\", width / 2)\n    .attr(\"cy\", height / 2)\n    .attr(\"r\", (d) => rScale(+d.count))\n    .attr(\"class\", \"name-circle\")\n    .attr(\"data-title\", getTitle)\n    .style(\"fill\", \"#fff\")\n    .style(\"stroke\", (d) => colorize(d))\n    .style(\"stroke-width\", strokeWidth)\n    .style(\"filter\", (d) => {\n      if (+d.count > dataMax / 2.5) {\n        return \"url(#drop-shadow)\"\n      }\n\n      return \"\"\n    })\n    .on(\"mouseover\", function () {\n      d3.select(this).style(\"stroke\", \"#D88021\").style(\"stroke-width\", \"10px\")\n    })\n    .on(\"mouseleave\", function () {\n      d3.select(this)\n        .style(\"stroke\", (d: any) => colorize(d))\n        .style(\"stroke-width\", strokeWidth)\n    })\n\n  circles.append(\"title\").text(getTitle)\n\n  tooltip(\n    \".name-circle\",\n    {\n      followMouse: true,\n    },\n    rootElId\n  )\n\n  addDescription({\n    height,\n    svg,\n    width,\n  })\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({\n    data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/concentric-circles/concentric-circles\"\n\nconst ConcentricCircles = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default ConcentricCircles\n","type":"tsx"},"styl":null},"key":"concentric-circles"}}},"staticQueryHashes":[]}