{"componentChunkName":"component---src-pages-d-3-js-mareys-schedule-tsx","path":"/d3js/mareys-schedule/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"docs":[],"name":"Marey's Schedule","notes":["Added titles with information in stops and trains","Add box shadow","Add range input"],"sources":["http://bl.ocks.org/mbostock/5544008"],"summary":[],"category":"d3js","files":{"demo":{"content":"import {\n  Selection,\n  axisBottom,\n  axisTop,\n  extent,\n  line as lineD3,\n  scaleLinear,\n  scaleTime,\n  select,\n  timeParse,\n  tsv,\n} from \"d3\"\n\nimport each from \"lodash/each\"\nimport last from \"lodash/last\"\n\nimport \"./mareys-schedule.styl\"\n\ntype RawDataItem = {\n  direction: string\n  number: string\n  type: string\n  [stop: string]: string\n}\n\ntype Station = {\n  distance: number\n  key: string\n  name: string\n  zone: number\n}\n\ntype Stop = {\n  station: Station\n  time: Date | null\n  trainIndex: number\n}\n\ntype Train = {\n  direction: string\n  index: number\n  number: string\n  stops: Stop[]\n  type: string\n}\n\ntype Data = {\n  stations: Station[]\n  trains: Train[]\n}\n\ntype Limits = [number, number]\ntype LimitsStr = [string, string]\n\ntype Redraw = (range: LimitsStr) => void\n\nconst fetchData = async (): Promise<Data> => {\n  const data = ((await tsv(\n    `${ROOT_PATH}data/d3js/mareys-schedule/data.tsv`\n  )) as unknown) as RawDataItem[]\n\n  const stations: Station[] = []\n\n  const trains: Train[] = data.map((train, trainIndex) => {\n    if (trainIndex === 0) {\n      for (const key in train) {\n        if (/^stop\\|/.test(key)) {\n          const stopFragments = key.split(\"|\")\n\n          stations.push({\n            distance: +stopFragments[2],\n            key,\n            name: stopFragments[1],\n            zone: +stopFragments[3],\n          })\n        }\n      }\n    }\n\n    return {\n      direction: train.direction,\n      index: trainIndex,\n      number: train.number,\n      stops: stations\n        .map((station) => ({\n          station,\n          time: parseTime(train[station.key]),\n          trainIndex,\n        }))\n        .filter((station) => station.time !== null),\n      type: train.type,\n    }\n  })\n\n  return {\n    stations,\n    trains,\n  }\n}\n\nconst getTrainTitle = (trainData: Train) => {\n  if (trainData.direction === \"S\") {\n    return `${trainData.stops[0].station.name} -> ${\n      last(trainData.stops)!.station.name\n    }`\n  }\n\n  return `${last(trainData.stops)!.station.name} -> ${\n    trainData.stops[0].station.name\n  }`\n}\n\nconst refreshOnHourChange = ({\n  limits,\n  redraw,\n}: {\n  limits: Limits\n  redraw: Redraw\n}) => {\n  const times: string[] = []\n\n  each(limits, (limit) => {\n    const wholeMinutes = (limit / 100) * 1200\n\n    let fragment = \"AM\"\n    let hours = Math.floor(wholeMinutes / 60)\n    let minutes = Math.floor(wholeMinutes % 60)\n\n    if (minutes > 30) {\n      minutes = minutes - 30\n      hours = hours + 1\n    } else {\n      minutes = minutes + 30\n    }\n\n    hours = hours + 4\n\n    if (hours > 23) {\n      if (hours === 24) {\n        hours = hours - 12\n      } else {\n        hours = hours - 24\n      }\n    } else if (hours > 11) {\n      fragment = \"PM\"\n\n      if (hours !== 12) {\n        hours = hours - 12\n      }\n    }\n\n    const minutesStr = minutes < 10 ? `0${minutes}` : minutes.toString()\n\n    const finalTime = `${hours}:${minutesStr}${fragment}`\n\n    return times.push(finalTime)\n  })\n\n  redraw(times as LimitsStr)\n}\n\nconst getFormatTime = () => timeParse(\"%I:%M%p\")\n\nconst parseTime = (timeStr: string) => {\n  const formatTime = getFormatTime()\n  const timeDate = formatTime(timeStr)\n\n  if (timeDate !== null && timeDate.getHours() < 3) {\n    timeDate.setDate(timeDate.getDate() + 1)\n  }\n\n  return timeDate\n}\n\nconst formatAMPM = function (date: Date) {\n  let hours = date.getHours()\n  const ampm = hours >= 12 ? \"PM\" : \"AM\"\n\n  hours = hours % 12\n  hours = hours ? hours : 12\n\n  const minutes = date.getMinutes()\n  const minutesStr = minutes < 10 ? `0${minutes}` : minutes.toString()\n\n  return `${hours}:${minutesStr} ${ampm}`\n}\n\nconst margin = {\n  bottom: 50,\n  left: 120,\n  right: 50,\n  top: 80,\n}\n\nconst height = 600 - margin.top - margin.bottom\n\nconst renderChart = ({ rootElId, data }: { rootElId: string; data: Data }) => {\n  const { stations, trains } = data\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"mareys-schedule-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const redraw: Redraw = (timeRange) => {\n    const x = scaleTime()\n      .domain([parseTime(timeRange[0])!, parseTime(timeRange[1])!])\n      .range([0, width])\n    const y = scaleLinear().range([0, height])\n    const formatTime = getFormatTime()\n    const xAxisTop = axisTop(x)\n      .ticks(8)\n      .tickFormat(formatTime as any)\n    const xAxisBottom = axisBottom(x)\n      .ticks(8)\n      .tickFormat(formatTime as any)\n\n    const svg = select(`#${rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${width / 2},-40)`)\n      .text(\"E.J. Mareyâ€™s graphical train schedule \" + \" (4:30AM - 1:30AM)\")\n      .style(\"font-weight\", \"bold\")\n\n    filterBlackOpacity(\"trains\", svg, 2, 0.2)\n\n    svg\n      .append(\"defs\")\n      .append(\"clipPath\")\n      .attr(\"id\", \"clip\")\n      .append(\"rect\")\n      .attr(\"y\", -margin.top)\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n\n    y.domain(extent(stations, (station) => station.distance) as Limits)\n\n    const station = svg\n      .append(\"g\")\n      .attr(\"class\", \"station\")\n      .selectAll(\"g\")\n      .data(stations)\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", (d) => `translate(0,${y(d.distance)})`)\n\n    station\n      .append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"dy\", \".35em\")\n      .text((d) => d.name)\n    station.append(\"line\").attr(\"x2\", width)\n    svg.append(\"g\").attr(\"class\", \"x top axis\").call(xAxisTop)\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x bottom axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxisBottom)\n\n    const mouseover = function (_e: unknown, d: Train) {\n      select(`.train-${d.index}`).select(\"path\").style(\"stroke-width\", \"5px\")\n    }\n\n    const mouseleave = function (_e: unknown, d: Train) {\n      select(`.train-${d.index}`).select(\"path\").style(\"stroke-width\", \"2.5px\")\n    }\n\n    const train = svg\n      .append(\"g\")\n      .attr(\"class\", \"train\")\n      .attr(\"clip-path\", \"url(#clip)\")\n      .selectAll(\"g\")\n      .data(trains.filter((d) => /[NLB]/.test(d.type)))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", (d) => `${d.type} train-${d.index}`)\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseleave\", mouseleave)\n\n    const line = lineD3<Stop>()\n      .x((d) => x(d.time!))\n      .y((d) => y(d.station.distance))\n\n    train\n      .append(\"path\")\n      .attr(\"d\", (d) => line(d.stops))\n      .append(\"title\")\n      .text((d) => getTrainTitle(d))\n\n    train\n      .selectAll(\"circle\")\n      .data((d) => d.stops)\n      .enter()\n      .append(\"circle\")\n      .attr(\n        \"transform\",\n        (d) => `translate(${x(d.time!)},${y(d.station.distance)})`\n      )\n      .style(\"filter\", \"url(#drop-shadow-trains)\")\n      .attr(\"r\", \"5px\")\n      .append(\"title\")\n      .text(\n        (d) =>\n          `${getTrainTitle(trains[d.trainIndex])}\\n${\n            d.station.name\n          } at ${formatAMPM(d.time!)}`\n      )\n  }\n\n  return {\n    refresh: (limits: [number, number]) => {\n      refreshOnHourChange({\n        limits,\n        redraw,\n      })\n    },\n  }\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n\n  const data = await fetchData()\n\n  const { refresh } = renderChart({\n    data,\n    rootElId,\n  })\n\n  const slider: any = $(\".slider\")\n\n  slider.slider({\n    change: () => {\n      const limits: Limits = slider.slider(\"values\")\n\n      refresh(limits)\n    },\n    range: true,\n  })\n\n  slider.slider(\"values\", [10, 50])\n}\n\nconst filterBlackOpacity = (\n  id: string,\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>,\n  deviation: number,\n  slope: number\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/mareys-schedule/mareys-schedule\"\n\nconst MareysSchedule = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo\n    demoInfo={demoInfo}\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div>\n      <div className=\"slider\" />\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default MareysSchedule\n","type":"tsx"},"styl":".mareys-schedule-chart\n  svg\n    font: 10px sans-serif;\n\n  .axis path\n    display: none;\n\n  .axis line\n    shape-rendering: crispEdges;\n    stroke: #000;\n\n  .chart-title\n    font-size: 15px;\n\n  .station line\n    shape-rendering: crispEdges;\n    stroke-dasharray: 1,1;\n    stroke: #ddd;\n\n  .station text\n    text-anchor: end;\n\n  .train path\n    fill: none;\n    stroke-width: 2.5px;\n\n  .train circle\n    stroke: #fff;\n\n  .train .N path\n    stroke: rgb(34,34,34);\n\n  .train .N circle\n    fill: rgb(34,34,34);\n\n  .train .L path\n    stroke: rgb(183,116,9);\n\n  .train .L circle\n    fill: rgb(183,116,9);\n\n  .train .B path\n    stroke: rgb(192,62,29);\n\n  .train .B circle\n    fill: rgb(192,62,29);\n"},"key":"mareys-schedule"}}},"staticQueryHashes":[]}