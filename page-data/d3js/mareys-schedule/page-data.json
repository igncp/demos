{"componentChunkName":"component---src-pages-d-3-js-mareys-schedule-js","path":"/d3js/mareys-schedule/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"name":"Marey's Schedule","notes":["Added titles with information in stops and trains","Add box shadow","Add range input"],"sources":["http://bl.ocks.org/mbostock/5544008"],"category":"d3js","files":{"d3utils":"import merge from \"lodash/merge\"\n\nconst d3utils = {\n  colorsScale(colors, extent) {\n    const c = d3.scale.linear().domain(extent).range([0, 1])\n    const colorScale = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      height: \"500%\",\n      id: `drop-shadow-${id}`,\n      width: \"500%\",\n      x: \"-200%\",\n      y: \"-200%\",\n    })\n\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"SourceAlpha\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feOffset\").attr({\n      dx: 1,\n      dy: 1,\n    })\n    filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(id, svg, deviation, slope, extra) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      id: `drop-shadow-${id}`,\n    })\n\n    if (extra) {\n      filter.attr({\n        height: \"500%\",\n        width: \"500%\",\n        x: \"-200%\",\n        y: \"-200%\",\n      })\n    }\n\n    filter.append(\"feOffset\").attr({\n      dx: 0.5,\n      dy: 0.5,\n      in: \"SourceGraphic\",\n      result: \"offOut\",\n    })\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"offOut\",\n      result: \"blurOut\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feBlend\").attr({\n      in: \"SourceGraphic\",\n      in2: \"blurOut\",\n      mode: \"normal\",\n    })\n\n    return filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n  },\n  middleTitle(svg, width, text, top) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr({\n        class: \"chart-title\",\n        \"text-anchor\": \"middle\",\n        transform: `translate(${String(width / 2)},${top})`,\n      })\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector, width, height, margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr({\n        height: height + margin.top + margin.bottom,\n        width: width + margin.left + margin.right,\n      })\n      .append(\"g\")\n      .attr({\n        transform: `translate(${margin.left},${margin.top})`,\n      })\n  },\n  tooltip(selector, customOpts) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = merge(defaultOpts, customOpts)\n\n    $(selector).tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import each from \"lodash/each\"\nimport last from \"lodash/last\"\n\nimport d3utils from \"@/demos/_utils/d3utils\"\n\nconst main = () => {\n  let trains = false\n\n  const stations = []\n  const margin = {\n    bottom: 50,\n    left: 120,\n    right: 50,\n    top: 80,\n  }\n\n  const width = $(\"#chart\").innerWidth() - margin.left - margin.right\n  const height = 600 - margin.top - margin.bottom\n  const formatTime = d3.time.format(\"%I:%M%p\")\n\n  const parseTime = function (s) {\n    const t = formatTime.parse(s)\n\n    if (t !== null && t.getHours() < 3) {\n      t.setDate(t.getDate() + 1)\n    }\n\n    return t\n  }\n\n  const typeFn = function (d, i) {\n    let p = null\n\n    if (!i) {\n      for (const k in d) {\n        if (/^stop\\|/.test(k)) {\n          p = k.split(\"|\")\n          stations.push({\n            distance: +p[2],\n            key: k,\n            name: p[1],\n            zone: +p[3],\n          })\n        }\n      }\n    }\n\n    return {\n      direction: d.direction,\n      number: d.number,\n      stops: stations\n        .map((s) => ({\n          station: s,\n          time: parseTime(d[s.key]),\n        }))\n        .filter((s) => s.time !== null),\n      type: d.type,\n    }\n  }\n\n  const formatAMPM = function (date) {\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    const ampm = hours >= 12 ? \"PM\" : \"AM\"\n\n    hours = hours % 12\n    hours = hours ? hours : 12\n    minutes = minutes < 10 ? `0${minutes}` : minutes\n\n    const strTime = `${hours}:${minutes} ${ampm}`\n\n    return strTime\n  }\n\n  const redraw = function (timeRange) {\n    const x = d3.time\n      .scale()\n      .domain([parseTime(timeRange[0]), parseTime(timeRange[1])])\n      .range([0, width])\n    const y = d3.scale.linear().range([0, height])\n    const xAxis = d3.svg.axis().scale(x).ticks(8).tickFormat(formatTime)\n\n    const svg = d3utils.svg(\"#chart\", width, height, margin)\n\n    d3utils.middleTitle(\n      svg,\n      width,\n      \"E.J. Mareyâ€™s graphical train schedule \" + \" (4:30AM - 1:30AM)\",\n      -40\n    )\n    d3utils.filterBlackOpacity(\"trains\", svg, 2, 0.2)\n    svg\n      .append(\"defs\")\n      .append(\"clipPath\")\n      .attr(\"id\", \"clip\")\n      .append(\"rect\")\n      .attr(\"y\", -margin.top)\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    y.domain(d3.extent(stations, (d) => d.distance))\n\n    const station = svg\n      .append(\"g\")\n      .attr(\"class\", \"station\")\n      .selectAll(\"g\")\n      .data(stations)\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", (d) => `translate(0,${y(d.distance)})`)\n\n    station\n      .append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"dy\", \".35em\")\n      .text((d) => d.name)\n    station.append(\"line\").attr(\"x2\", width)\n    svg.append(\"g\").attr(\"class\", \"x top axis\").call(xAxis.orient(\"top\"))\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x bottom axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis.orient(\"bottom\"))\n\n    const mouseover = function (d) {\n      return d3\n        .select(`.train-${d.index}`)\n        .select(\"path\")\n        .style(\"stroke-width\", \"5px\")\n    }\n\n    const mouseleave = function (d) {\n      return d3\n        .select(`.train-${d.index}`)\n        .select(\"path\")\n        .style('\"stroke-width\"', \"2.5px\")\n    }\n\n    const train = svg\n      .append(\"g\")\n      .attr(\"class\", \"train\")\n      .attr(\"clip-path\", \"url(#clip)\")\n      .selectAll(\"g\")\n      .data(trains.filter((d) => /[NLB]/.test(d.type)))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", (d) => `${d.type} train-${d.index}`)\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseleave\", mouseleave)\n    const line = d3.svg\n      .line()\n      .x((d) => x(d.time))\n      .y((d) => y(d.station.distance))\n\n    const trainTitle = function (trainData) {\n      let title = \"\"\n\n      if (trainData.direction === \"S\") {\n        title = `${trainData.stops[0].station.name} -> ${\n          last(trainData.stops).station.name\n        }`\n      } else {\n        title = `${last(trainData.stops).station.name} -> ${\n          trainData.stops[0].station.name\n        }`\n      }\n\n      return title\n    }\n\n    train\n      .append(\"path\")\n      .attr(\"d\", (d) => line(d.stops))\n      .append(\"title\")\n      .text((d) => trainTitle(d))\n\n    train\n      .selectAll(\"circle\")\n      .data((d) => d.stops)\n      .enter()\n      .append(\"circle\")\n      .attr(\n        \"transform\",\n        (d) => `translate(${x(d.time)},${y(d.station.distance)})`\n      )\n      .style(\"filter\", \"url(#drop-shadow-trains)\")\n      .attr(\"r\", \"5px\")\n      .append(\"title\")\n      .text(\n        (d) =>\n          `${trainTitle(trains[d.train_index])}\\n${\n            d.station.name\n          } at ${formatAMPM(d.time)}`\n      )\n  }\n\n  const slider = $(\".slider\")\n\n  const convertHour = function () {\n    const times = []\n\n    each(slider.slider(\"values\"), (sliderValue) => {\n      const wholeMinutes = (sliderValue / 100) * 1200\n\n      let fragment = \"AM\"\n      let hours = Math.floor(wholeMinutes / 60)\n      let minutes = Math.floor(wholeMinutes % 60)\n\n      if (minutes > 30) {\n        minutes = minutes - 30\n        hours = hours + 1\n      } else {\n        minutes = minutes + 30\n      }\n\n      hours = hours + 4\n\n      if (hours > 23) {\n        if (hours === 24) {\n          hours = hours - 12\n        } else {\n          hours = hours - 24\n        }\n      } else if (hours > 11) {\n        fragment = \"PM\"\n\n        if (hours !== 12) {\n          hours = hours - 12\n        }\n      }\n\n      if (minutes < 10) {\n        minutes = `0${String(minutes)}`\n      }\n\n      const finalTime = `${String(hours)}:${minutes}${fragment}`\n\n      return times.push(finalTime)\n    })\n\n    return redraw(times)\n  }\n\n  slider.slider({\n    change: convertHour,\n    range: true,\n  })\n\n  d3.tsv(\n    `${ROOT_PATH}data/d3js/mareys-schedule/data.tsv`,\n    typeFn,\n    (_error, data) => {\n      trains = data\n\n      trains.forEach((train, index) => {\n        train.index = index\n\n        train.stops.forEach((stop) => {\n          stop.train_index = index\n        })\n      })\n\n      return slider.slider(\"values\", [10, 50])\n    }\n  )\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/mareys-schedule/mareys-schedule\"\n\nimport \"@/demos/mareys-schedule/mareys-schedule.styl\"\n\nconst MareysSchedule = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    links={[\n      \"/vendors/jquery-ui/themes/base/theme.css\",\n      \"/vendors/jquery-ui/themes/base/slider.css\",\n    ]}\n    main={main}\n    scripts={[\n      \"/vendors/d3/d3.min.js\",\n      \"/vendors/jquery-ui/jquery-ui.min.js\",\n      \"/vendors/jquery-ui/ui/slider.js\",\n      \"/js/d3js-utils.js\",\n    ]}\n  >\n    <div>\n      <div className=\"slider\" />\n    </div>\n    <div className=\"mareys-schedule-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default MareysSchedule\n","styl":".mareys-schedule-chart\n  svg {\n    font: 10px sans-serif;\n  }\n\n  .axis path {\n    display: none;\n  }\n\n  .axis line {\n    stroke: #000;\n    shape-rendering: crispEdges;\n  }\n\n  .chart-title { font-size: 15px; }\n\n  .station line {\n    stroke: #ddd;\n    stroke-dasharray: 1,1;\n    shape-rendering: crispEdges;\n  }\n\n  .station text {\n    text-anchor: end;\n  }\n\n  .train path {\n    fill: none;\n    stroke-width: 2.5px;\n  }\n\n  .train circle {\n    stroke: #fff;\n  }\n\n  .train .N path { stroke: rgb(34,34,34); }\n  .train .N circle { fill: rgb(34,34,34); }\n\n  .train .L path { stroke: rgb(183,116,9); }\n  .train .L circle { fill: rgb(183,116,9); }\n\n  .train .B path { stroke: rgb(192,62,29); }\n  .train .B circle { fill: rgb(192,62,29); }"},"key":"mareys-schedule"}}},"staticQueryHashes":[]}