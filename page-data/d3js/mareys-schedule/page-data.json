{
    "componentChunkName": "component---src-pages-d-3-js-mareys-schedule-tsx",
    "path": "/d3js/mareys-schedule/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.tsv"],"docs":[],"isCompleted":true,"name":"Marey's Schedule","notes":["Added titles with information in stops and trains","Add box shadow","Add range input"],"sources":["http://bl.ocks.org/mbostock/5544008"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".mareysScheduleChart {\n  svg {\n    font: 10px sans-serif;\n  }\n\n  .axis {\n    path {\n      display: none;\n    }\n\n    line {\n      shape-rendering: crispEdges;\n      stroke: #000;\n    }\n  }\n\n  .chartTitle {\n    font-size: 15px;\n  }\n\n  .horizontalMarker {\n    line {\n      shape-rendering: crispEdges;\n      stroke: #ddd;\n      stroke-dasharray: 1, 1;\n    }\n\n    text {\n      text-anchor: end;\n    }\n  }\n\n  .line {\n    path {\n      fill: none;\n      stroke-width: 2.5px;\n    }\n\n    circle {\n      stroke: #fff;\n    }\n\n    .blackLine {\n      path {\n        stroke: rgb(34 34 34);\n      }\n\n      circle {\n        fill: rgb(34 34 34);\n      }\n    }\n\n    .orangeLine {\n      path {\n        stroke: #d9b611;\n      }\n\n      circle {\n        fill: rgb(183 116 9);\n      }\n    }\n\n    .redLine {\n      path {\n        stroke: rgb(192 62 29);\n      }\n\n      circle {\n        fill: rgb(192 62 29);\n      }\n    }\n  }\n}\n","filePath":"src/demos/mareys-schedule/crossing-lines-chart.module.css"}],"demoTS":[{"content":"import { renderChart } from \"./crossing-lines-chart\"\nimport { createChartConfig } from \"./mareys-schedule-chart-config\"\nimport {\n  CONTAINER_ID,\n  RANGE_ID,\n  setupControls,\n} from \"./mareys-schedule-controls\"\nimport { MareysSchedules } from \"./mareys-schedule-data-model\"\n\n// @TODO: Add interaction on click\n\nconst main = async () => {\n  const schedules = await MareysSchedules.fetchAndCreateSchedules()\n\n  const chartConfig = createChartConfig(schedules)\n\n  const { refresh: updateScheduleLimits } = renderChart(chartConfig)\n\n  setupControls(updateScheduleLimits)\n}\n\nexport { CONTAINER_ID, RANGE_ID }\n\nexport default main\n","filePath":"src/demos/mareys-schedule/mareys-schedule.ts"},{"content":"import {\n  Selection,\n  axisBottom,\n  axisTop,\n  extent,\n  line as lineD3,\n  scaleLinear,\n  scaleTime,\n  select,\n} from \"d3\"\nimport { v1 as uuid } from \"uuid\"\n\nimport * as styles from \"./crossing-lines-chart.module.css\"\n\n// @TODO make it more generic to allow other y type in addition to Date\n\ntype HorizontalMarker = {\n  key: string\n  label: string\n  position: number\n}\n\ntype Point = {\n  horizontalMarker: HorizontalMarker\n  lineId: number\n  x: Date | null\n}\n\nenum LineStyle {\n  Black = \"Black\",\n  Orange = \"Orange\",\n  Red = \"Red\",\n}\n\ntype Line = {\n  id: number\n  points: Point[]\n}\n\ntype CrossingLines = {\n  horizontalMarkers: HorizontalMarker[]\n  lines: Line[]\n}\n\ntype Redraw = (range: [Date, Date]) => void\n\nconst lineStyleToClassName: { [key in LineStyle]: string } = {\n  [LineStyle.Red]: styles.redLine,\n  [LineStyle.Orange]: styles.orangeLine,\n  [LineStyle.Black]: styles.blackLine,\n}\n\nconst filterBlackOpacity = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst margin = {\n  bottom: 50,\n  left: 120,\n  right: 50,\n  top: 80,\n}\n\nconst height = 600 - margin.top - margin.bottom\n\ntype ChartConfig = {\n  chartTitle: string\n  crossingLinesData: CrossingLines\n  getLineStyle: (line: Line) => LineStyle\n  getLineTitle: (line: Line) => string\n  getPointTitle: (point: Point) => string\n  getXAxisLabel: (date: Date) => string\n  onPointClick: (point: Point) => void\n  rootElId: string\n}\n\nconst renderChart = (chartConfig: ChartConfig) => {\n  const { crossingLinesData, rootElId } = chartConfig\n  const { horizontalMarkers, lines } = crossingLinesData\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.mareysScheduleChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const linePathClass = `line-${uuid().slice(0, 6)}`\n  const pointCircleClass = `point-${uuid().slice(0, 6)}`\n  const filterId = `lines-${uuid().slice(0, 6)}`\n  const clipId = `clip-${uuid().slice(0, 6)}`\n\n  const redraw: Redraw = ([timeStart, timeEnd]) => {\n    const x = scaleTime().domain([timeStart, timeEnd]).range([0, width])\n    const y = scaleLinear().range([0, height])\n    const xAxisTop = axisTop<Date>(x)\n      .ticks(8)\n      .tickFormat(chartConfig.getXAxisLabel)\n    const xAxisBottom = axisBottom<Date>(x)\n      .ticks(8)\n      .tickFormat(chartConfig.getXAxisLabel)\n\n    const svg = select(`#${rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", styles.chartTitle)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${width / 2},-40)`)\n      .text(chartConfig.chartTitle)\n      .style(\"font-weight\", \"bold\")\n\n    filterBlackOpacity({\n      deviation: 2,\n      id: filterId,\n      slope: 0.2,\n      svg,\n    })\n\n    svg\n      .append(\"defs\")\n      .append(\"clipPath\")\n      .attr(\"id\", clipId)\n      .append(\"rect\")\n      .attr(\"y\", -margin.top)\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n\n    y.domain(\n      extent(\n        horizontalMarkers,\n        (horizontalMarker) => horizontalMarker.position\n      ) as [number, number]\n    )\n\n    const horizontalMarkersSelection = svg\n      .append(\"g\")\n      .attr(\"class\", styles.horizontalMarker)\n      .selectAll(\"g\")\n      .data(horizontalMarkers)\n      .enter()\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        (horizontalMarker) => `translate(0,${y(horizontalMarker.position)})`\n      )\n\n    horizontalMarkersSelection\n      .append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"dy\", \".35em\")\n      .text((horizontalMarker) => horizontalMarker.label)\n\n    horizontalMarkersSelection.append(\"line\").attr(\"x2\", width)\n    svg.append(\"g\").attr(\"class\", `x top ${styles.axis}`).call(xAxisTop)\n    svg\n      .append(\"g\")\n      .attr(\"class\", `x bottom ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxisBottom)\n\n    const mouseover = (...[, line]: [unknown, Line]) => {\n      select(`.line-${line.id}`).select(\"path\").style(\"stroke-width\", \"5px\")\n    }\n\n    const mouseleave = (...[, line]: [unknown, Line]) => {\n      select(`.line-${line.id}`).select(\"path\").style(\"stroke-width\", \"2.5px\")\n    }\n\n    const linesSelection = svg\n      .append(\"g\")\n      .attr(\"class\", styles.line)\n      .attr(\"clip-path\", `url(#${clipId})`)\n      .selectAll(\"g\")\n      .data(lines)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", (crossingLine) => {\n        const lineStyle = chartConfig.getLineStyle(crossingLine)\n        const { [lineStyle]: lineClass } = lineStyleToClassName\n\n        return `${lineClass} line-${crossingLine.id}`\n      })\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseleave\", mouseleave)\n\n    const line = lineD3<Point>()\n      .x((point) => x(point.x!))\n      .y((point) => y(point.horizontalMarker.position))\n\n    linesSelection\n      .append(\"path\")\n      .attr(\"d\", (crossingLine) => line(crossingLine.points))\n      .attr(\"class\", linePathClass)\n      .attr(\"title\", chartConfig.getLineTitle)\n\n    linesSelection\n      .selectAll(\"circle\")\n      .data((crossingLine) => crossingLine.points)\n      .enter()\n      .append(\"circle\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (...[, point]) => {\n        chartConfig.onPointClick(point)\n      })\n      .attr(\n        \"transform\",\n        (point) =>\n          `translate(${x(point.x!)},${y(point.horizontalMarker.position)})`\n      )\n      .style(\"filter\", `url(#drop-shadow-${filterId})`)\n      .attr(\"r\", \"5px\")\n      .attr(\"class\", pointCircleClass)\n      .attr(\"title\", (point) => chartConfig.getPointTitle(point))\n\n    $(`.${linePathClass}`).tooltip({\n      track: true,\n    })\n    $(`.${pointCircleClass}`).tooltip({\n      track: true,\n    })\n  }\n\n  return {\n    refresh: (limits: [Date, Date]) => {\n      redraw(limits)\n    },\n  }\n}\n\nexport { ChartConfig, HorizontalMarker, LineStyle, Redraw, renderChart }\n","filePath":"src/demos/mareys-schedule/crossing-lines-chart.ts"},{"content":"import qs from \"query-string\"\n\nimport {\n  ChartConfig,\n  HorizontalMarker,\n  LineStyle,\n} from \"./crossing-lines-chart\"\nimport { CONTAINER_ID } from \"./mareys-schedule-controls\"\nimport { MareysSchedules } from \"./mareys-schedule-data-model\"\n\nconst formatAMPM = (date: Date) => {\n  let hours = date.getHours()\n  const ampm = hours >= 12 ? \"PM\" : \"AM\"\n\n  hours = hours % 12\n  hours = hours ? hours : 12\n\n  const minutes = date.getMinutes()\n  const minutesStr = minutes < 10 ? `0${minutes}` : minutes.toString()\n\n  return `${hours}:${minutesStr} ${ampm}`\n}\n\nexport const createChartConfig = (schedules: MareysSchedules): ChartConfig => {\n  const stations = schedules.getStations()\n  const horizontalMarkers: HorizontalMarker[] = stations.map((station) => ({\n    key: station.key,\n    label: station.name,\n    position: station.distance,\n  }))\n\n  const horizontalMarkerMap = horizontalMarkers.reduce<{\n    [key: string]: HorizontalMarker\n  }>((...[acc, horizontalMarker]) => {\n    acc[horizontalMarker.key] = horizontalMarker\n\n    return acc\n  }, {})\n\n  const trains = schedules.getTrains()\n\n  const lines = trains.map((train) => ({\n    id: train.id,\n    points: train.stops.map((stop) => ({\n      horizontalMarker: horizontalMarkerMap[stop.station.key],\n      lineId: stop.trainId,\n      x: stop.time,\n    })),\n  }))\n\n  const trainsMap = schedules.getTrainsMap()\n\n  const getLineTitle: ChartConfig[\"getLineTitle\"] = (line) => {\n    const { [line.id]: trainData } = trainsMap\n\n    return MareysSchedules.getTrainTitle(trainData)\n  }\n\n  const getPointTitle: ChartConfig[\"getPointTitle\"] = (point) => {\n    const { [point.lineId]: train } = trainsMap\n\n    return `${MareysSchedules.getTrainTitle(train)}\\n${\n      point.horizontalMarker.label\n    } at ${formatAMPM(point.x!)}`\n  }\n\n  const getLineStyle: ChartConfig[\"getLineStyle\"] = (line) => {\n    const { [line.id]: train } = trainsMap\n\n    switch (train.type) {\n      case \"B\":\n        return LineStyle.Red\n      case \"L\":\n        return LineStyle.Black\n      case \"N\":\n        return LineStyle.Orange\n\n      default:\n        return LineStyle.Red\n    }\n  }\n\n  const crossingLinesData: ChartConfig[\"crossingLinesData\"] = {\n    horizontalMarkers,\n    lines,\n  }\n\n  const chartTitle = \"E.J. Marey’s graphical train schedule (4:30AM - 1:30AM)\"\n\n  const getXAxisLabel: ChartConfig[\"getXAxisLabel\"] = (date) =>\n    MareysSchedules.convertDateToString(date)\n\n  const onPointClick: ChartConfig[\"onPointClick\"] = (point) => {\n    window.open(\n      `https://www.google.com/search?${qs.stringify({\n        q: `Station California ${point.horizontalMarker.label}`,\n      })}`\n    )\n  }\n\n  return {\n    chartTitle,\n    crossingLinesData,\n    getLineStyle,\n    getLineTitle,\n    getPointTitle,\n    getXAxisLabel,\n    onPointClick,\n    rootElId: CONTAINER_ID,\n  }\n}\n","filePath":"src/demos/mareys-schedule/mareys-schedule-chart-config.ts"},{"content":"import { Redraw } from \"./crossing-lines-chart\"\nimport { MareysSchedules } from \"./mareys-schedule-data-model\"\n\ntype ScheduleLimits = [number, number]\n\nconst CONTAINER_ID = \"chart\"\n\nconst RANGE_ID = \"schedule-range\"\n\nconst convertLimitsToTimes = (limits: ScheduleLimits): [string, string] => {\n  const times: string[] = []\n\n  limits.forEach((limit) => {\n    const wholeMinutes = (limit / 100) * 1200\n\n    let fragment = \"AM\"\n    let hours = Math.floor(wholeMinutes / 60)\n    let minutes = Math.floor(wholeMinutes % 60)\n\n    if (minutes > 30) {\n      minutes = minutes - 30\n      hours = hours + 1\n    } else {\n      minutes = minutes + 30\n    }\n\n    hours = hours + 4\n\n    if (hours > 23) {\n      if (hours === 24) {\n        hours = hours - 12\n      } else {\n        hours = hours - 24\n      }\n    } else if (hours > 11) {\n      fragment = \"PM\"\n\n      if (hours !== 12) {\n        hours = hours - 12\n      }\n    }\n\n    const minutesStr = minutes < 10 ? `0${minutes}` : minutes.toString()\n\n    const finalTime = `${hours}:${minutesStr}${fragment}`\n\n    return times.push(finalTime)\n  })\n\n  return times as [string, string]\n}\n\nconst setupControls = (updateScheduleLimits: Redraw) => {\n  const slider = $(`#${RANGE_ID}`)\n\n  slider.slider({\n    change: () => {\n      const limits = slider.slider(\"values\") as ScheduleLimits\n      const timeLimits = convertLimitsToTimes(limits).map(\n        MareysSchedules.convertStringToDate\n      ) as [Date, Date]\n\n      updateScheduleLimits(timeLimits)\n    },\n    range: true,\n  })\n\n  slider.slider(\"values\", [10, 50])\n}\n\nexport { CONTAINER_ID, RANGE_ID, setupControls }\n","filePath":"src/demos/mareys-schedule/mareys-schedule-controls.ts"},{"content":"import { timeFormat, timeParse, tsv } from \"d3\"\n\nconst timeFormatStr = \"%I:%M%p\"\n\nconst getParseTime = () => timeParse(timeFormatStr)\n\nconst parseTime = (timeStr: string): Date => {\n  const timeDate = getParseTime()(timeStr)\n\n  if (timeDate !== null && timeDate.getHours() < 3) {\n    timeDate.setDate(timeDate.getDate() + 1)\n  }\n\n  return timeDate!\n}\n\ntype TrainType = \"B\" | \"L\" | \"N\"\n\ntype RawDataItem = {\n  [stop: string]: string\n  direction: string\n  number: string\n  type: TrainType\n}\n\ntype Station = {\n  distance: number\n  key: string\n  name: string\n  zone: number\n}\n\ntype Stop = {\n  station: Station\n  time: Date | null\n  trainId: number\n}\n\ntype Train = {\n  direction: string\n  id: number\n  number: string\n  stops: Stop[]\n  type: TrainType\n}\n\ntype SchedulesData = {\n  stations: Station[]\n  trains: Train[]\n}\n\nclass MareysSchedules {\n  private readonly schedulesData: SchedulesData\n  private constructor(schedulesData: SchedulesData) {\n    this.schedulesData = schedulesData\n  }\n\n  public static async fetchAndCreateSchedules(): Promise<MareysSchedules> {\n    const originalItems = (await tsv(\n      `${ROOT_PATH}data/d3js/mareys-schedule/data.tsv`\n    )) as unknown as RawDataItem[]\n\n    const stations: Station[] = []\n\n    const trains: Train[] = originalItems\n      .map((...[train, trainIndex]) => {\n        if (trainIndex === 0) {\n          for (const key in train) {\n            if (/^stop\\|/.test(key)) {\n              const stopFragments = key.split(\"|\")\n\n              stations.push({\n                distance: +stopFragments[2],\n                key,\n                name: stopFragments[1],\n                zone: +stopFragments[3],\n              })\n            }\n          }\n        }\n\n        return {\n          direction: train.direction,\n          id: trainIndex,\n          number: train.number,\n          stops: stations\n            .map((station) => ({\n              station,\n              time: parseTime(train[station.key]),\n              trainId: trainIndex,\n            }))\n            .filter((station) => (station.time as unknown) !== null),\n          type: train.type,\n        }\n      })\n      .filter((train) => /[NLB]/.test(train.type))\n\n    const schedulesData = {\n      stations,\n      trains,\n    }\n\n    return new MareysSchedules(schedulesData)\n  }\n\n  public static convertDateToString(date: Date): string {\n    return timeFormat(timeFormatStr)(date)\n  }\n\n  public static convertStringToDate(dateStr: string): Date {\n    return parseTime(dateStr)\n  }\n\n  public static getTrainTitle(trainData: Train): string {\n    const {\n      stops: { 0: firstStop, [trainData.stops.length - 1]: lastStop },\n    } = trainData\n\n    if (trainData.direction === \"S\") {\n      return `${firstStop.station.name} -> ${lastStop.station.name}`\n    }\n\n    return `${lastStop.station.name} -> ${firstStop.station.name}`\n  }\n\n  public getStations() {\n    return this.schedulesData.stations.slice()\n  }\n\n  public getTrains() {\n    return this.schedulesData.trains.slice()\n  }\n\n  public getTrainsMap() {\n    return this.schedulesData.trains.reduce<{ [id: string]: Train }>(\n      (...[acc, train]) => {\n        acc[train.id] = train\n\n        return acc\n      },\n      {}\n    )\n  }\n}\n\nexport { MareysSchedules }\n","filePath":"src/demos/mareys-schedule/mareys-schedule-data-model.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  RANGE_ID,\n} from \"@/demos/mareys-schedule/mareys-schedule\"\n\nconst MareysSchedule = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div>\n      <div id={RANGE_ID} />\n    </div>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MareysSchedule\n","type":"tsx"}},"key":"mareys-schedule"},"meta":{"description":"Trains schedule example using D3.js, with San Francisco as example, and with the addition of a translucent tooltip and a 3D style."}}},
    "staticQueryHashes": []}