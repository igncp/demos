{"componentChunkName":"component---src-pages-d-3-js-icosahedron-js","path":"/d3js/icosahedron/","result":{"pageContext":{"demoInfo":{"data":[],"name":"Icosahedron","notes":["No data bound to it, it could be to the speed, size, colors","Added color scale and the sinusoidal x velocity","Added the stop and move when clicked"],"sources":["https://gist.github.com/mbostock/7782500"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"import * as d3 from \"d3\"\n\nclass Icosahedron {\n  static icosahedronFaces() {\n    const faces = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces\n  }\n\n  constructor() {\n    this.setConfig()\n    this.setDom()\n    this.setVars()\n    this.dom.faces = this.dom.svg\n      .selectAll(\"path\")\n      .data(Icosahedron.icosahedronFaces())\n      .enter()\n      .append(\"path\")\n      .each((d) => {\n        d.polygon = d3.polygonHull(d.map(this.dom.projection))\n      })\n      .style(\"fill\", (_d, index) => {\n        const color = this.config.color(index)\n\n        return color\n      })\n    this.vars.velocity = this.config.defaultVelocity\n  }\n\n  setConfig() {\n    this.config = {\n      color: d3.scaleOrdinal(d3.schemePastel2),\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      width: $(\"#chart\").innerWidth(),\n      zeroVelocity: [0, 0, 0],\n    }\n  }\n\n  setDom() {\n    this.dom = {\n      faces: \"\",\n      projection: d3.geoOrthographic().scale(this.config.height / 2 - 10),\n      svg: d3\n        .select(\"#chart\")\n        .append(\"svg\")\n        .attr(\"width\", this.config.width)\n        .attr(\"height\", this.config.height),\n    }\n  }\n\n  setVars() {\n    this.vars = {\n      velocity: \"\",\n    }\n  }\n\n  calcNewPosition(velocity, time, position) {\n    return [\n      velocity[0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity[1] + position[1],\n      position[2] + velocity[2],\n    ]\n  }\n\n  timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(\n      this.calcNewPosition(this.vars.velocity, time, originalPos)\n    )\n    this.dom.faces\n      .each((d) =>\n        d.forEach((p, i) => {\n          d.polygon[i] = this.dom.projection(p)\n\n          return null\n        })\n      )\n      .style(\"display\", (d) => {\n        const area = d3.polygonArea(d.polygon)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (d) => `M${d.polygon.join(\"L\")}Z`)\n      .on(\"click\", () => {\n        if (String(this.vars.velocity) === String(this.config.zeroVelocity)) {\n          this.vars.velocity = this.config.defaultVelocity\n\n          return\n        }\n\n        this.vars.velocity = this.config.zeroVelocity\n      })\n\n    return null\n  }\n\n  start() {\n    d3.timer(() => this.timer())\n  }\n}\n\nexport default () => {\n  const chart = new Icosahedron()\n\n  chart.start()\n}\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/icosahedron/icosahedron\"\n\nimport \"@/demos/icosahedron/icosahedron.styl\"\n\nconst Icosahedron = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"icosahedron-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Icosahedron\n","styl":".icosahedron-chart\n    path \n      fill: #f88e22;\n      stroke: #fff;\n      stroke-width: 2px; "},"key":"icosahedron"}}},"staticQueryHashes":[]}