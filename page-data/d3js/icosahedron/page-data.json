{
    "componentChunkName": "component---src-pages-d-3-js-icosahedron-tsx",
    "path": "/d3js/icosahedron/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":[],"docs":[],"isCompleted":true,"name":"Icosahedron","notes":["No data bound to it, it could be to the speed, size, colors","Added color scale and the sinusoidal x velocity","Added the stop and move when clicked"],"sources":["https://gist.github.com/mbostock/7782500"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".icosahedronChart {\n  path {\n    fill: #f88e22;\n    stroke: #fff;\n    stroke-width: 2px;\n  }\n}\n","filePath":"src/demos/icosahedron/icosahedron.module.css"}],"demoTS":[{"content":"import {\n  GeoProjection,\n  Selection,\n  geoOrthographic,\n  polygonArea,\n  polygonHull,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n  timer,\n} from \"d3\"\n\nimport * as styles from \"./icosahedron.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype IcosahedronOpts = {\n  rootElId: string\n}\n\ntype Position = [number, number, number]\ntype Point2D = [number, number]\n\ntype Hull = Point2D[]\ntype Face = Hull\ntype FaceWithPolygon = Face & {\n  faceIndex: number\n  polygon?: Hull\n}\n\nclass Icosahedron {\n  private readonly rootElId: string\n\n  private readonly config: Readonly<{\n    defaultVelocity: number[]\n    height: number\n    rotationFactor1: number\n    rotationFactor2: number\n    t0: number\n    zeroVelocity: number[]\n  }>\n\n  private dom!: {\n    faces: Selection<SVGPathElement, FaceWithPolygon, SVGGElement, unknown>\n    gSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n    projection: GeoProjection\n    svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  }\n\n  private vars!: {\n    selectedIndex: number | null\n    velocity: number[] | null\n  }\n\n  public constructor(opts: IcosahedronOpts) {\n    this.rootElId = opts.rootElId\n\n    this.config = {\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      zeroVelocity: [0, 0, 0],\n    }\n\n    this.setVars()\n    this.setDom()\n    this.setDimensions()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  private static getIcosahedronFaces(): FaceWithPolygon[] {\n    const faces: Face[] = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces.map((...[face, faceIndex]) =>\n      Object.assign(face, {\n        faceIndex,\n      })\n    )\n  }\n\n  public start() {\n    timer(() => this.timer())\n  }\n\n  public teardown() {\n    window.removeEventListener(\"resize\", this.handleResize)\n  }\n\n  private setDom() {\n    const rootEl = document.getElementById(this.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.icosahedronChart)\n\n    const projection = geoOrthographic().scale(this.config.height / 2 - 10)\n    const svg = select(`#${this.rootElId}`)\n      .append(\"svg\")\n      .attr(\"height\", this.config.height)\n\n    const gSel = svg.append(\"g\")\n\n    const color = scaleOrdinal<number, string>(schemePastel2)\n    const highlightColor = \"orange\"\n    const { vars } = this\n\n    const setColor = (faceData: FaceWithPolygon) => {\n      if (vars.selectedIndex === faceData.faceIndex) {\n        return highlightColor\n      }\n\n      return color(faceData.faceIndex)\n    }\n\n    const faces = gSel\n      .selectAll(\"path\")\n      .data<FaceWithPolygon>(Icosahedron.getIcosahedronFaces())\n      .enter()\n      .append(\"path\")\n      .each((face) => {\n        face.polygon = polygonHull(face.map(projection) as Face)!\n      })\n      .style(\"fill\", setColor)\n      .on(\"mouseenter\", function handleMouseEnter() {\n        select(this).style(\"fill\", highlightColor)\n      })\n      .on(\"mouseleave\", function handleMouseLeave() {\n        select<SVGPathElement, FaceWithPolygon>(this).style(\"fill\", setColor)\n      })\n      .on(\"click\", (...[, face]) => {\n        if (this.vars.selectedIndex === face.faceIndex) {\n          this.vars.velocity = this.config.defaultVelocity\n          this.vars.selectedIndex = null\n        } else {\n          this.vars.velocity = this.config.zeroVelocity\n          this.vars.selectedIndex = face.faceIndex\n        }\n\n        faces.style(\"fill\", setColor)\n      })\n\n    this.dom = {\n      faces,\n      gSel,\n      projection,\n      svg,\n    }\n  }\n\n  private setDimensions() {\n    const polygonSize = 475\n    const { width } = (\n      document.getElementById(this.rootElId) as HTMLElement\n    ).getBoundingClientRect()\n\n    this.dom.svg.attr(\"width\", width)\n\n    const scale = width < polygonSize ? 0.5 : 1\n    const verticalTranslate = scale !== 1 ? (polygonSize * scale) / 2 : 0\n\n    this.dom.gSel.attr(\n      \"transform\",\n      `translate(${\n        width / 2 - polygonSize * scale\n      }, ${verticalTranslate}) scale(${scale})`\n    )\n  }\n\n  private setVars() {\n    this.vars = {\n      selectedIndex: null,\n      velocity: this.config.defaultVelocity,\n    }\n  }\n\n  private calcNewPosition({\n    position,\n    time,\n  }: {\n    position: Position\n    time: number\n  }): Position {\n    const {\n      vars: { velocity },\n    } = this\n\n    return [\n      velocity![0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity![1] + position[1],\n      position[2] + velocity![2],\n    ]\n  }\n\n  private timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(\n      this.calcNewPosition({ position: originalPos, time })\n    )\n\n    this.dom.faces\n      .each((face) => {\n        face.forEach((...[point, pointIndex]: [Point2D, number]) => {\n          face.polygon![pointIndex] = this.dom.projection(point) as Point2D\n\n          return null\n        })\n      })\n      .style(\"display\", (face) => {\n        const area = polygonArea(face.polygon!)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (face) => `M${face.polygon!.join(\"L\")}Z`)\n\n    return null\n  }\n\n  private readonly handleResize = () => {\n    this.setDimensions()\n  }\n}\n\nconst main = () => {\n  const chart = new Icosahedron({\n    rootElId: CONTAINER_ID,\n  })\n\n  chart.start()\n\n  return Promise.resolve()\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/icosahedron/icosahedron.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/icosahedron/icosahedron\"\n\nconst Icosahedron = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Icosahedron\n","type":"tsx"}},"key":"icosahedron"},"meta":{"description":"Example using D3.js of a 3D geometric figure, which has each face with a different color using a color scale and a sinusoidal animated movement."}}},
    "staticQueryHashes": []}