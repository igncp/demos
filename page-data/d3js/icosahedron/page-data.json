{"componentChunkName":"component---src-pages-d-3-js-icosahedron-tsx","path":"/d3js/icosahedron/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[],"isCompleted":true,"name":"Icosahedron","notes":["No data bound to it, it could be to the speed, size, colors","Added color scale and the sinusoidal x velocity","Added the stop and move when clicked"],"sources":["https://gist.github.com/mbostock/7782500"],"summary":[],"category":"d3js","files":{"cssModule":".icosahedronChart {\n  path {\n    fill: #f88e22;\n    stroke: #fff;\n    stroke-width: 2px;\n  }\n}\n","demo":[{"content":"import {\n  GeoProjection,\n  ScaleOrdinal,\n  Selection,\n  geoOrthographic,\n  polygonArea,\n  polygonHull,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n  timer,\n} from \"d3\"\n\nimport * as styles from \"./icosahedron.module.css\"\n\ntype IcosahedronOpts = {\n  rootElId: string\n}\n\ntype Position = [number, number, number]\ntype Point2D = [number, number]\n\ntype Hull = Point2D[]\ntype Face = Hull\ntype Faces = Face[]\ntype FaceWithPolygon = Face & {\n  polygon: Hull\n}\n\ntype SvgSelection = Selection<\n  SVGSVGElement,\n  FaceWithPolygon,\n  HTMLElement,\n  unknown\n>\n\nclass Icosahedron {\n  private readonly rootElId: string\n\n  private config!: {\n    color: ScaleOrdinal<string, string>\n    defaultVelocity: number[]\n    height: number\n    rotationFactor1: number\n    rotationFactor2: number\n    t0: number\n    width: number\n    zeroVelocity: number[]\n  }\n\n  private dom!: {\n    faces: Selection<\n      SVGPathElement,\n      FaceWithPolygon,\n      SVGSVGElement,\n      unknown\n    > | null\n    projection: GeoProjection\n    svg: SvgSelection\n  }\n\n  private vars!: {\n    velocity: number[] | null\n  }\n\n  public constructor(opts: IcosahedronOpts) {\n    this.rootElId = opts.rootElId\n    this.setConfig()\n    this.setDom()\n    this.setVars()\n\n    const faces = this.dom.svg\n      .selectAll(\"path\")\n      .data(Icosahedron.getIcosahedronFaces() as FaceWithPolygon[])\n      .enter()\n      .append(\"path\")\n      .each((d) => {\n        d.polygon = polygonHull(d.map(this.dom.projection) as Faces[0]) as Hull\n      })\n      .style(\"fill\", (_d: unknown, index: number) => {\n        const color = this.config.color(`${index}`)\n\n        return color\n      })\n\n    this.dom.faces = faces\n    this.vars.velocity = this.config.defaultVelocity\n  }\n\n  private static getIcosahedronFaces(): Faces {\n    const faces: Faces = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces\n  }\n\n  public start() {\n    timer(() => this.timer())\n  }\n\n  private setConfig() {\n    const color = scaleOrdinal(schemePastel2)\n\n    this.config = {\n      color,\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      width: (document.getElementById(\n        this.rootElId\n      ) as HTMLElement).getBoundingClientRect().width,\n      zeroVelocity: [0, 0, 0],\n    }\n  }\n\n  private setDom() {\n    const rootEl = document.getElementById(this.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.icosahedronChart)\n\n    const projection = geoOrthographic().scale(this.config.height / 2 - 10)\n    const svg = select(`#${this.rootElId}`)\n      .append(\"svg\")\n      .attr(\"width\", this.config.width)\n      .attr(\"height\", this.config.height) as SvgSelection\n\n    this.dom = {\n      faces: null,\n      projection,\n      svg,\n    }\n  }\n\n  private setVars() {\n    this.vars = {\n      velocity: null,\n    }\n  }\n\n  private calcNewPosition(time: number, position: Position): Position {\n    const {\n      vars: { velocity },\n    } = this\n\n    return [\n      velocity![0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity![1] + position[1],\n      position![2] + velocity![2],\n    ]\n  }\n\n  private timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(this.calcNewPosition(time, originalPos))\n    this.dom\n      .faces!.each((d) =>\n        d.forEach((p: [number, number], i: number) => {\n          d.polygon[i] = this.dom.projection(p) as Point2D\n\n          return null\n        })\n      )\n      .style(\"display\", (d) => {\n        const area = polygonArea(d.polygon)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (d) => `M${d.polygon.join(\"L\")}Z`)\n      .on(\"click\", () => {\n        if (\n          this.vars.velocity?.toString() === this.config.zeroVelocity.toString()\n        ) {\n          this.vars.velocity = this.config.defaultVelocity\n\n          return\n        }\n\n        this.vars.velocity = this.config.zeroVelocity\n      })\n\n    return null\n  }\n}\n\nconst main = () => {\n  const chart = new Icosahedron({\n    rootElId: \"chart\",\n  })\n\n  chart.start()\n\n  return Promise.resolve()\n}\n\nexport default main\n","fileName":"icosahedron"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/icosahedron/icosahedron\"\n\nconst Icosahedron = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/d3/d3.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Icosahedron\n","type":"tsx"}},"key":"icosahedron"},"meta":{"description":"Example using D3.js of a 3D geometric figure, which has each face with a different color using a color scale and a sinusoidal animated movement."}}},"staticQueryHashes":[]}