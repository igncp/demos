{
    "componentChunkName": "component---src-pages-d-3-js-area-tsx",
    "path": "/d3js/area/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.csv"],"docs":[["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-shape API reference","https://github.com/d3/d3-shape#api-reference"],["d3-shape Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-shape/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-axis API reference","https://github.com/d3/d3-axis#api-reference"],["d3-axis Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-axis/index.d.ts"],["d3-delaunay API reference","https://github.com/d3/d3-delaunay#api-reference"],["d3-delaunay Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-delaunay/index.d.ts"],["Delaunay Triangulation Wikipedia Article","https://en.wikipedia.org/wiki/Delaunay_triangulation"]],"isCompleted":true,"name":"Area","notes":[],"sources":["http://codepen.io/notno/pen/ilvsd"],"summary":["This chart is a mix of a common area + line chart plus Voronoi to properly display the points on mouse move. For the x and y axis, it uses two linear scales. It uses a SVG 'path' for printing the area, and a different SVG 'path' to print the line.","It uses an SVG 'clipPath' element with a 'rect' to limit the area and line paths. This doesn't look necessary, because after removing it, the area has the same dimensions. However I kept it because it was in the original source and it showcases this approach.","The voronoi lines are applied to a SVG 'path' element using 'voronoi.renderCell'. Because no context is passed to this method, it returns the SVG path by default. Each fragment of the voronoi chart has a fill value with opacity 0 in order to detect the mouse events.","The only return value from the render function is a function to allow toggling the visibility of the voronoi lines. This is done by changing the CSS class without re-rendering."],"category":"d3js","files":{"demoCSS":[{"content":".areaChart {\n  path.line {\n    fill: none;\n    stroke: #25a6fc;\n    stroke-width: 3.5px;\n  }\n\n  path.area {\n    fill: #6e6ea7;\n    opacity: 50%;\n  }\n\n  .axis {\n    fill: #333;\n    shape-rendering: crispEdges;\n  }\n\n  .chartTitle {\n    font-weight: bold;\n  }\n\n  .x.axis .minor {\n    fill: #000;\n  }\n\n  .axis path,\n  .axis line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #ccc;\n  }\n\n  .y.axis line,\n  .y.axis path,\n  .x.axis line,\n  .x.axis path {\n    fill: none;\n    stroke: #ccc;\n  }\n\n  .voronoi {\n    opacity: 0%;\n    stroke: #999;\n    stroke-width: 0.1;\n  }\n\n  .voronoi.showVoronoi {\n    opacity: 100%;\n    stroke-width: 1;\n  }\n\n  .point {\n    display: none;\n    fill: #69d895;\n  }\n}\n","filePath":"src/demos/area/chart/area-chart.module.css"}],"demoTS":[{"content":"import { AreaChart } from \"./chart/area-chart\"\nimport { CONTAINER_ID, createChartConfig } from \"./income-chart-config\"\nimport { setupChartControls } from \"./income-chart-controls\"\nimport { IncomeItem } from \"./income-item-model\"\n\nconst main = async () => {\n  const dataPoints = await IncomeItem.fetchAndCreateCollection()\n  const chartConfig = createChartConfig(dataPoints)\n\n  const areaChart = AreaChart.renderChart<IncomeItem>(chartConfig)\n\n  setupChartControls({\n    onToggleVoronoiClick: () => {\n      areaChart.toggleVoronoi()\n    },\n    onUpdateRandomValue: () => {\n      Array.from({ length: 50 }).forEach(() => {\n        const randomIndex = Math.floor(Math.random() * dataPoints.length)\n        const randomChange = Math.random() * 10 * (Math.random() > 0.5 ? 1 : -1)\n\n        dataPoints[randomIndex].changePercentage(randomChange)\n      })\n\n      areaChart.refresh()\n    },\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/area/area.ts"},{"content":"import {\n  BaseType,\n  Selection,\n  area as areaD3,\n  axisBottom,\n  axisLeft,\n  format,\n  line as lineD3,\n  max,\n  min,\n  scaleLinear,\n  scaleQuantize,\n  select,\n} from \"d3\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nimport * as styles from \"./area-chart.module.css\"\nimport { VoronoiGroup } from \"./voronoi-group\"\n\nconst filterBlackOpacity = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\ntype ChartConfig<AreaPoint> = {\n  areaPoints: AreaPoint[]\n  chartTitle: string\n  chartTitleShort: string\n  getItemId: (areaPoint: AreaPoint) => number\n  getItemTitle: (areaPoint: AreaPoint) => string\n  getItemXValue: (areaPoint: AreaPoint) => number\n  getItemYValue: (areaPoint: AreaPoint) => number\n  rootElId: string\n}\n\ninterface BaseChart {\n  refresh: () => void\n  tearDown: () => void\n  toggleVoronoi: () => void\n}\n\ntype CommonSelection<El extends BaseType> = Selection<\n  El,\n  unknown,\n  HTMLElement,\n  unknown\n>\n\ntype ChartElements<AreaPoint> = Readonly<{\n  areaSel: CommonSelection<SVGPathElement>\n  backgroundBands: CommonSelection<SVGGElement>\n  chartTitleSel: CommonSelection<SVGTextElement>\n  clipRect: CommonSelection<SVGRectElement>\n  clipTopRect: CommonSelection<SVGRectElement>\n  lineSel: CommonSelection<SVGPathElement>\n  svg: CommonSelection<SVGSVGElement>\n  svgG: CommonSelection<SVGGElement>\n  voronoiGroup: VoronoiGroup<AreaPoint>\n  xAxisSel: CommonSelection<SVGGElement>\n  yAxisSel: CommonSelection<SVGGElement>\n}>\n\nclass AreaChart<AreaPoint> implements BaseChart {\n  private readonly config: ChartConfig<AreaPoint>\n  private readonly svgOpacityFilter: string\n  private readonly elements: ChartElements<AreaPoint>\n\n  private constructor(chartConfig: ChartConfig<AreaPoint>) {\n    this.config = chartConfig\n\n    const { rootElId } = chartConfig\n\n    const svg = select(`#${rootElId}`).append(\"svg\")\n    const svgG = svg.append(\"g\").attr(\"class\", styles.areaChart)\n    const backgroundBands = svgG.append(\"g\")\n    const chartTitleSel = svgG\n      .append(\"text\")\n      .attr(\"class\", styles.chartTitle)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-weight\", \"bold\")\n    const xAxisSel = svgG.append(\"g\")\n    const yAxisSel = svgG.append(\"g\")\n    const lineSel = svgG.append(\"path\")\n    const areaSel = svgG.append(\"path\")\n    const voronoiGroup = new VoronoiGroup<AreaPoint>(svgG)\n    const clipRect = svgG.append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\")\n\n    // This is exclusively for clipping the vertical axis\n    const clipTopRect = svgG\n      .append(\"clipPath\")\n      .attr(\"id\", \"clip-top\")\n      .append(\"rect\")\n\n    this.svgOpacityFilter = `opacity-${uuidv1().slice(0, 6)}`\n\n    filterBlackOpacity({\n      deviation: 2,\n      id: this.svgOpacityFilter,\n      slope: 0.5,\n      svg: svgG,\n    })\n\n    this.elements = {\n      areaSel,\n      backgroundBands,\n      chartTitleSel,\n      clipRect,\n      clipTopRect,\n      lineSel,\n      svg,\n      svgG,\n      voronoiGroup,\n      xAxisSel,\n      yAxisSel,\n    }\n\n    this.render(true)\n\n    window.addEventListener(\"resize\", this.handleWindowResize)\n  }\n\n  public static renderChart<AreaPoint>(chartConfig: ChartConfig<AreaPoint>) {\n    return new AreaChart(chartConfig)\n  }\n\n  public refresh() {\n    this.render(false)\n  }\n\n  public tearDown() {\n    window.removeEventListener(\"resize\", this.handleWindowResize)\n  }\n\n  public toggleVoronoi() {\n    this.elements.voronoiGroup.toggleVoronoi()\n  }\n\n  private render(cancelAnimation: boolean) {\n    const animationDuration = cancelAnimation ? 0 : 1000\n    const {\n      config: { rootElId },\n    } = this\n    const { width } = (\n      document.getElementById(rootElId) as HTMLElement\n    ).getBoundingClientRect()\n    const isSmallDevice = width < 500\n\n    const margin = {\n      bottom: 50,\n      left: isSmallDevice ? 50 : 70,\n      right: isSmallDevice ? 10 : 50,\n      top: 50,\n    }\n\n    const innerWidth = width - margin.left - margin.right\n    const height = 400 - margin.top - margin.bottom\n\n    const { config: chartConfig } = this\n\n    const { areaPoints } = chartConfig\n    const tooltipItemClass = `tooltip-item-${uuidv1().slice(0, 6)}`\n    const pointClassPrefix = `point-${uuidv1().slice(0, 6)}-`\n\n    const titleYOffset = -15\n    const axisTickSize = 10\n\n    const {\n      elements: {\n        areaSel,\n        backgroundBands,\n        chartTitleSel,\n        clipRect,\n        clipTopRect,\n        lineSel,\n        svg,\n        svgG,\n        voronoiGroup,\n        xAxisSel,\n        yAxisSel,\n      },\n    } = this\n\n    svg\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", innerWidth + margin.left + margin.right)\n\n    svgG.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    chartTitleSel\n      .attr(\n        \"transform\",\n        `translate(${width / 2 - margin.left},${titleYOffset})`\n      )\n      .text(() =>\n        isSmallDevice ? chartConfig.chartTitleShort : chartConfig.chartTitle\n      )\n\n    const xMax = max(areaPoints, chartConfig.getItemXValue) as number\n    const xMin = min(areaPoints, chartConfig.getItemXValue) as number\n\n    const yMax = max(areaPoints, chartConfig.getItemYValue) as number\n    const yMin = min(areaPoints, chartConfig.getItemYValue) as number\n\n    const xScale = scaleLinear().domain([xMin, xMax]).range([0, innerWidth])\n    const yScale = scaleLinear()\n      .domain([yMax + 0.05, yMin - 0.05])\n      .range([0, height])\n\n    const extractXScale = (areaPoint: AreaPoint) =>\n      xScale(chartConfig.getItemXValue(areaPoint))\n\n    const extractYScale = (areaPoint: AreaPoint) =>\n      yScale(chartConfig.getItemYValue(areaPoint))\n\n    const getSmallDeviceTicksScale = () =>\n      scaleQuantize()\n        .domain([0, 500])\n        .range(Array.from({ length: 6 }).map((...[, rangeIndex]) => rangeIndex))\n\n    const ticks = isSmallDevice ? getSmallDeviceTicksScale()(width) : null\n\n    const xAxis = axisBottom(xScale).tickFormat(format(\".0f\")).ticks(ticks)\n    const yAxis = axisLeft(yScale)\n      .tickFormat(format(\".0%\"))\n      .tickSize(axisTickSize)\n\n    xAxisSel\n      .attr(\"class\", `${styles.x} ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr(\"dy\", \"1.25em\")\n\n    yAxisSel\n      .attr(\"class\", `${styles.y} ${styles.axis}`)\n      .attr(\"clip-path\", \"url(#clip-top)\")\n      .transition()\n      .duration(animationDuration)\n      .call(yAxis)\n      .selectAll(\"text\")\n      .attr(\"dx\", \"-.25em\")\n\n    const area = areaD3<AreaPoint>()\n      .x(extractXScale)\n      .y0(height)\n      .y1(extractYScale)\n    const line = lineD3<AreaPoint>().x(extractXScale).y(extractYScale)\n\n    lineSel\n      .datum(areaPoints)\n      .attr(\"clip-path\", \"url(#clip)\")\n      .attr(\"class\", styles.line)\n      .transition()\n      .duration(animationDuration)\n      .attr(\"d\", line)\n\n    clipRect.attr(\"height\", height).attr(\"width\", innerWidth)\n\n    clipTopRect\n      .attr(\"height\", height)\n      .attr(\"width\", innerWidth)\n      .attr(\"transform\", \"translate(-50,-5)\")\n\n    areaSel\n      .datum(areaPoints)\n      .attr(\"class\", styles.area)\n      .attr(\"clip-path\", \"url(#clip)\")\n      .transition()\n      .duration(animationDuration)\n      .attr(\"d\", area)\n\n    const mouseenter = (...[, areaPoint]: [unknown, AreaPoint]) => {\n      select(`.${pointClassPrefix}${chartConfig.getItemId(areaPoint)}`).style(\n        \"display\",\n        \"block\"\n      )\n    }\n\n    const mouseleave = (...[, areaPoint]: [unknown, AreaPoint]) => {\n      select(`.${pointClassPrefix}${chartConfig.getItemId(areaPoint)}`).style(\n        \"display\",\n        \"none\"\n      )\n    }\n\n    const bandsPercentage = 2.5\n    const bandsData = Array.from({ length: 100 / bandsPercentage }).map(\n      (...[, bandIndex]) => (bandIndex * bandsPercentage) / 100\n    )\n    const bandHeight = Math.abs(yScale(bandsPercentage / 100) - yScale(0))\n\n    const bands = backgroundBands.selectAll(\"rect\").data(bandsData)\n\n    bands.enter().append(\"rect\")\n    bands.exit().remove()\n\n    backgroundBands\n      .selectAll<SVGRectElement, number>(\"rect\")\n      .attr(\"clip-path\", \"url(#clip)\")\n      .attr(\"x\", 0)\n      .attr(\"width\", innerWidth)\n      .attr(\"fill\", (...[, bandIndex]) =>\n        bandIndex % 2 ? \"#f7f7f7\" : \"#ffffff\"\n      )\n      .attr(\"class\", \"backgroundBands\")\n      .transition()\n      .duration(animationDuration)\n      .attr(\"height\", bandHeight)\n      .attr(\"y\", (bandPercentage) => yScale(bandPercentage))\n\n    const circleData = svgG.selectAll(\"circle\").data(areaPoints)\n\n    circleData.enter().append(\"circle\")\n    circleData.exit().remove()\n\n    svgG\n      .selectAll<SVGCircleElement, AreaPoint>(\"circle\")\n      .attr(\"r\", \"5px\")\n      .style(\"filter\", `url(#drop-shadow-${this.svgOpacityFilter})`)\n      .attr(\n        \"transform\",\n        (areaPoint: AreaPoint) =>\n          `translate(${extractXScale(areaPoint)},${extractYScale(areaPoint)})`\n      )\n      .attr(\n        \"class\",\n        (areaPoint) =>\n          `${\n            styles.point\n          } ${tooltipItemClass} ${pointClassPrefix}${chartConfig.getItemId(\n            areaPoint\n          )}`\n      )\n      .on(\"mouseenter\", mouseenter)\n      .on(\"mouseleave\", mouseleave)\n      .attr(\"title\", chartConfig.getItemTitle)\n\n    voronoiGroup.render({\n      animationDuration,\n      boundaries: [\n        -margin.left,\n        -margin.top,\n        innerWidth + margin.right,\n        height + margin.bottom,\n      ],\n      className: tooltipItemClass,\n      clipPath: \"url(#clip)\",\n      extractXScale,\n      extractYScale,\n      filter: `url(#drop-shadow-${this.svgOpacityFilter})`,\n      getItemId: chartConfig.getItemId,\n      getTitle: chartConfig.getItemTitle,\n      mouseenter,\n      mouseleave,\n      points: areaPoints,\n    })\n\n    $(`.${tooltipItemClass}`).tooltip({\n      track: true,\n    })\n  }\n\n  private readonly handleWindowResize = () => {\n    this.render(true)\n  }\n}\n\nexport { ChartConfig, AreaChart }\n","filePath":"src/demos/area/chart/area-chart.ts"},{"content":"import {\n  BaseType,\n  Selection,\n  color as colorD3,\n  scaleOrdinal,\n  schemePastel2,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./area-chart.module.css\"\n\ntype RenderOpts<Point> = {\n  animationDuration: number\n  boundaries: [number, number, number, number]\n  className: string\n  clipPath: string\n  extractXScale: (point: Point) => number\n  extractYScale: (point: Point) => number\n  filter: string\n  getItemId: (point: Point) => number\n  getTitle: (point: Point) => string\n  mouseenter: (_: unknown, point: Point) => void\n  mouseleave: (_: unknown, point: Point) => void\n  points: Point[]\n}\n\nclass VoronoiGroup<Point> {\n  private readonly voronoiGroup: Selection<\n    SVGGElement,\n    unknown,\n    BaseType,\n    unknown\n  >\n\n  private readonly state = {\n    hasVoronoi: false,\n  }\n\n  public constructor(\n    parent: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  ) {\n    this.voronoiGroup = parent.append(\"g\")\n  }\n\n  public toggleVoronoi() {\n    this.state.hasVoronoi = !this.state.hasVoronoi\n    this.setVoronoi()\n  }\n\n  public render({\n    animationDuration,\n    boundaries,\n    className,\n    clipPath,\n    extractXScale,\n    extractYScale,\n    filter,\n    getItemId,\n    getTitle,\n    mouseenter,\n    mouseleave,\n    points,\n  }: RenderOpts<Point>) {\n    const { voronoiGroup } = this\n    const voronoiData = voronoiGroup\n      .selectAll<SVGPathElement, Point>(\"path\")\n      .data(points, (point) => getItemId(point))\n\n    voronoiData.enter().append(\"path\")\n    voronoiData.exit().remove()\n\n    const colorScale = scaleOrdinal<number, string>(schemePastel2)\n\n    const voronoi = Delaunay.from(points, extractXScale, extractYScale).voronoi(\n      boundaries\n    )\n\n    voronoiGroup\n      .attr(\"clip-path\", clipPath)\n      .attr(\"class\", styles.voronoi)\n      .selectAll<SVGPathElement, Point>(\"path\")\n      .attr(\"fill\", (point) => {\n        const itemId = getItemId(point)\n        const colorHex = colorScale(itemId)\n        const itemColor = colorD3(colorHex)!\n\n        itemColor.opacity = 0.2\n\n        return itemColor.formatRgb()\n      })\n      .on(\"mouseenter\", mouseenter)\n      .on(\"mouseleave\", mouseleave)\n      .attr(\"class\", className)\n      .attr(\"title\", getTitle)\n      .style(\"filter\", filter)\n      .transition()\n      .duration(animationDuration)\n      .attr(\"d\", (point) => voronoi.renderCell(getItemId(point)))\n\n    this.setVoronoi()\n  }\n\n  private setVoronoi() {\n    const {\n      state: { hasVoronoi },\n      voronoiGroup,\n    } = this\n    const currentClass = voronoiGroup.attr(\"class\")\n    const { showVoronoi } = styles\n\n    const currentClassWithoutVoronoi = currentClass\n      .replace(showVoronoi, \"\")\n      .trim()\n\n    const newClass = hasVoronoi\n      ? `${currentClassWithoutVoronoi} ${showVoronoi}`\n      : currentClassWithoutVoronoi\n\n    voronoiGroup.attr(\"class\", newClass)\n  }\n}\n\nexport { VoronoiGroup }\n","filePath":"src/demos/area/chart/voronoi-group.ts"},{"content":"import { ChartConfig } from \"./chart/area-chart\"\nimport { IncomeItem } from \"./income-item-model\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype Config = ChartConfig<IncomeItem>\n\nconst getItemXValue: Config[\"getItemXValue\"] = (incomeItem) =>\n  incomeItem.getYear()\nconst getItemYValue: Config[\"getItemYValue\"] = (incomeItem) =>\n  incomeItem.getNormalizedValue()\nconst getItemId: Config[\"getItemId\"] = (incomeItem) => incomeItem.getId()\nconst getItemTitle: Config[\"getItemTitle\"] = (incomeItem: IncomeItem) =>\n  incomeItem.getSummary()\nconst chartTitle = \"Share of top decile [aka top 10%] in national income\"\nconst chartTitleShort = chartTitle.replace(\" [aka top 10%]\", \"\")\n\nconst createChartConfig = (\n  dataPoints: IncomeItem[]\n): ChartConfig<IncomeItem> => ({\n  areaPoints: dataPoints,\n  chartTitle,\n  chartTitleShort,\n  getItemId,\n  getItemTitle,\n  getItemXValue,\n  getItemYValue,\n  rootElId: CONTAINER_ID,\n})\n\nexport { CONTAINER_ID, createChartConfig }\n","filePath":"src/demos/area/income-chart-config.ts"},{"content":"const TOGGLE_BUTTON_ID = \"toggle-voronoi\"\nconst UPDATE_BUTTON_ID = \"update-voronoi\"\n\nconst setupChartControls = ({\n  onToggleVoronoiClick,\n  onUpdateRandomValue,\n}: {\n  onToggleVoronoiClick: () => void\n  onUpdateRandomValue: () => void\n}) => {\n  const toggleButtonElement = document.getElementById(\n    TOGGLE_BUTTON_ID\n  ) as HTMLElement\n  const updateButtonElement = document.getElementById(\n    UPDATE_BUTTON_ID\n  ) as HTMLElement\n\n  toggleButtonElement.addEventListener(\"click\", (clickEvent: MouseEvent) => {\n    clickEvent.preventDefault()\n\n    onToggleVoronoiClick()\n  })\n\n  updateButtonElement.addEventListener(\"click\", (clickEvent: MouseEvent) => {\n    clickEvent.preventDefault()\n\n    onUpdateRandomValue()\n  })\n}\n\nexport { TOGGLE_BUTTON_ID, UPDATE_BUTTON_ID, setupChartControls }\n","filePath":"src/demos/area/income-chart-controls.ts"},{"content":"import { csv } from \"d3\"\n\ntype IncomeItemBase = {\n  percent: number\n  year: number\n}\n\ntype IncomeItemData = Omit<IncomeItemBase, \"percent\"> & {\n  percentage: number\n  pointIndex: number\n}\n\nclass IncomeItem {\n  private readonly incomeItemData: IncomeItemData\n\n  private constructor(incomeItemData: IncomeItemData) {\n    this.incomeItemData = incomeItemData\n    this.incomeItemData.percentage = Number(this.incomeItemData.percentage)\n  }\n\n  public static async fetchAndCreateCollection(): Promise<IncomeItem[]> {\n    const response = (await (csv(\n      `${ROOT_PATH}data/d3js/area/data.csv`\n    ) as unknown)) as IncomeItemBase[]\n\n    const incomeItemsData = response.map((...[point, pointIndex]) => ({\n      ...point,\n      percentage: point.percent,\n      pointIndex,\n    }))\n\n    return incomeItemsData.map(\n      (incomeItemData) => new IncomeItem(incomeItemData)\n    )\n  }\n\n  public getYear() {\n    return this.incomeItemData.year\n  }\n\n  public changePercentage(percentageChange: number) {\n    const valueWithLowerBound = Math.max(\n      this.incomeItemData.percentage + percentageChange,\n      0\n    )\n    const newValue = Math.min(100, valueWithLowerBound)\n\n    this.incomeItemData.percentage = newValue\n  }\n\n  public getNormalizedValue() {\n    return this.incomeItemData.percentage / 100\n  }\n\n  public getId() {\n    return this.incomeItemData.pointIndex\n  }\n\n  public getSummary(): string {\n    const { incomeItemData } = this\n\n    return `Year: ${\n      incomeItemData.year\n    }, Percentage: ${incomeItemData.percentage.toFixed(2)}%`\n  }\n}\n\nexport { IncomeItem }\n","filePath":"src/demos/area/income-item-model.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/area/area\"\nimport {\n  TOGGLE_BUTTON_ID,\n  UPDATE_BUTTON_ID,\n} from \"@/demos/area/income-chart-controls\"\n\nconst Area = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <form style={{ marginBottom: 20 }}>\n      <button className=\"btn btn-info\" id={TOGGLE_BUTTON_ID} type=\"button\">\n        Toggle Voronoi\n      </button>\n      <button\n        className=\"btn btn-success\"\n        id={UPDATE_BUTTON_ID}\n        style={{ marginLeft: 20 }}\n        type=\"button\"\n      >\n        Update Random Values\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Area\n","type":"tsx"}},"key":"area"},"meta":{"description":"Area Chart example, using D3.js, with a transparent Voronoi overlay that gives the functionality know fast the nearest point to the mouse."}}},
    "staticQueryHashes": []}