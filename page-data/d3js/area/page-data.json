{"componentChunkName":"component---src-pages-d-3-js-area-js","path":"/d3js/area/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"name":"Area","notes":["Changed style","Added point and voronoi functionality"],"sources":["http://codepen.io/notno/pen/ilvsd"],"category":"d3js","files":{"d3utils":"const d3utils = {\n  colorsScale(colors, extent) {\n    const c = d3.scale.linear().domain(extent).range([0, 1])\n    const colorScale = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      height: \"500%\",\n      id: `drop-shadow-${id}`,\n      width: \"500%\",\n      x: \"-200%\",\n      y: \"-200%\",\n    })\n\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"SourceAlpha\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feOffset\").attr({\n      dx: 1,\n      dy: 1,\n    })\n    filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(id, svg, deviation, slope, extra) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      id: `drop-shadow-${id}`,\n    })\n\n    if (extra) {\n      filter.attr({\n        height: \"500%\",\n        width: \"500%\",\n        x: \"-200%\",\n        y: \"-200%\",\n      })\n    }\n\n    filter.append(\"feOffset\").attr({\n      dx: 0.5,\n      dy: 0.5,\n      in: \"SourceGraphic\",\n      result: \"offOut\",\n    })\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"offOut\",\n      result: \"blurOut\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feBlend\").attr({\n      in: \"SourceGraphic\",\n      in2: \"blurOut\",\n      mode: \"normal\",\n    })\n\n    return filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n  },\n  middleTitle(svg, width, text, top) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr({\n        class: \"chart-title\",\n        \"text-anchor\": \"middle\",\n        transform: `translate(${String(width / 2)},${top})`,\n      })\n      .text(text)\n      .style({\n        \"font-weight\": \"bold\",\n      })\n  },\n  svg(selector, width, height, margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr({\n        height: height + margin.top + margin.bottom,\n        width: width + margin.left + margin.right,\n      })\n      .append(\"g\")\n      .attr({\n        transform: `translate(${margin.left},${margin.top})`,\n      })\n  },\n  tooltip(selector, customOpts) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = _.merge(defaultOpts, customOpts)\n\n    $(selector).tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import d3utils from \"@/demos/_utils/d3utils\"\n\nconst main = () => {\n  d3.csv(`${ROOT_PATH}data/d3js/area/data.csv`, (_error, data) => {\n    const margin = {\n      bottom: 50,\n      left: 70,\n      right: 50,\n      top: 50,\n    }\n    const width = $(\"#chart\").innerWidth() - margin.left - margin.right\n    const height = 400 - margin.top - margin.bottom\n\n    const svg = d3utils.svg(\"#chart\", width, height, margin)\n\n    d3utils.middleTitle(\n      svg,\n      width,\n      \"Share of top decile [aka top 10%] in national income\"\n    )\n    d3utils.filterBlackOpacity(\"points\", svg, 2, 0.5)\n\n    const xMax = d3.max(data, (d) => d.year)\n    const xMin = d3.min(data, (d) => d.year)\n    const yMax = d3.max(data, (d) => d.percent / 100)\n    const yMin = d3.min(data, (d) => d.percent / 100)\n\n    const xScale = d3.scale.linear().range([0, width]).domain([xMin, xMax])\n    const yScale = d3.scale\n      .linear()\n      .range([0, height])\n      .domain([yMax + 0.05, yMin - 0.05])\n\n    const xAxis = d3.svg\n      .axis()\n      .scale(xScale)\n      .tickFormat(d3.format(\".\"))\n      .innerTickSize(-height)\n    const yAxis = d3.svg\n      .axis()\n      .scale(yScale)\n      .tickFormat(d3.format(\"%\"))\n      .innerTickSize(-width)\n      .orient(\"left\")\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0,${String(height)})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr({ dy: \"1.25em\" })\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n      .selectAll(\"text\")\n      .attr({ dx: \"-.25em\" })\n\n    const area = d3.svg\n      .area()\n      .interpolate(\"monotone\")\n      .x((d) => xScale(d.year))\n      .y0(height)\n      .y1((d) => yScale(d.percent / 100))\n\n    const line = d3.svg\n      .line()\n      .x((d) => xScale(d.year))\n      .y((d) => yScale(d.percent / 100))\n\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr({ class: \"line\", \"clip-path\": \"url(#clip)\", d: line })\n\n    svg.append(\"clipPath\").attr({ id: \"clip\" }).append(\"rect\").attr({\n      height,\n      width,\n    })\n\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr({ class: \"area\", \"clip-path\": \"url(#clip)\", d: area })\n\n    const voronoi = d3.geom\n      .voronoi()\n      .x((point) => xScale(point.year))\n      .y((point) => yScale(point.percent / 100))\n      .clipExtent([\n        [-margin.left, -margin.top],\n        [width + margin.right, height + margin.bottom],\n      ])\n\n    const mouseover = (d) =>\n      d3.select(`.point-${d.index}`).style(\"display\", \"block\")\n\n    const mouseleave = (d) =>\n      d3.select(`.point-${d.index}`).style(\"display\", \"none\")\n\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\n        \"transform\",\n        (d) => `translate(${String(xScale(d.year))},${yScale(d.percent / 100)})`\n      )\n      .attr(\"r\", \"5px\")\n      .attr(\"class\", (_d, i) => `point point-${i}`)\n      .style({ filter: \"url(#drop-shadow-points)\" })\n\n    const voronoiGroup = svg.append(\"g\").attr(\"class\", \"voronoi\")\n\n    voronoiGroup\n      .selectAll(\"path\")\n      .data(voronoi(data))\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (d, i) => {\n        d.index = i\n\n        return `M${d.join(\"L\")}Z`\n      })\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseleave\", mouseleave)\n      .attr(\"class\", \"voronoi-area\")\n      .append(\"title\")\n      .text((d) => `Year: ${d.point.year}: ` + `Percent: ${d.point.percent}%`)\n  })\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/area/area\"\n\nimport \"@/demos/area/area.styl\"\n\nconst Area = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\"/vendors/d3/d3.min.js\", \"/js/d3js-utils.js\"]}\n  >\n    <div className=\"area-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Area\n","styl":".area-chart\n  path.line \n    fill none\n    stroke #25A6FC\n    stroke-width 3.5px\n  \n  path.area \n    fill #6E6EA7\n    opacity .5\n\n  text\n    text-shadow 1px 1px 1px #ddd\n  \n  .axis \n    shape-rendering crispEdges\n    fill #333\n\n  .chart-title\n    font-weight bold\n  \n  .x.axis .minor \n    fill #000\n  \n  .axis path,\n  .axis line \n    fill none\n    stroke #ccc\n    shape-rendering crispEdges\n\n  .y.axis line, .y.axis path, \n  .x.axis line, .x.axis path\n    fill none\n    stroke #ccc\n\n  .voronoi\n    stroke-width .1\n    opacity 0\n\n  .point\n    fill #69D895\n    display none"},"key":"area"}}},"staticQueryHashes":[]}