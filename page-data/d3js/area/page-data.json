{"componentChunkName":"component---src-pages-d-3-js-area-tsx","path":"/d3js/area/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"docs":[["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-shape API reference","https://github.com/d3/d3-shape#api-reference"],["d3-shape Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-shape/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-axis API reference","https://github.com/d3/d3-axis#api-reference"],["d3-axis Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-axis/index.d.ts"],["d3-delaunay API reference","https://github.com/d3/d3-delaunay#api-reference"],["d3-delaunay Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-delaunay/index.d.ts"],["Delaunay Triangulation Wikipedia Article","https://en.wikipedia.org/wiki/Delaunay_triangulation"]],"isCompleted":true,"name":"Area","notes":["Changed style","Added point and voronoi functionality"],"sources":["http://codepen.io/notno/pen/ilvsd"],"summary":["This chart is a mix of a common area + line chart plus Voronoi to properly display the points on mouse move. For the x and y axis, it uses two linear scales. It uses a SVG 'path' for printing the area, and a different SVG 'path' to print the line.","It uses an SVG 'clipPath' element with a 'rect' to limit the area and line paths. This doesn't look necessary, because after removing it, the area has the same dimensions. However I kept it because it was in the original source and it showcases this approach.","The voronoi lines are applied to a SVG 'path' element using 'voronoi.renderCell'. Because no context is passed to this method, it returns the SVG path by default. Each fragment of the voronoi chart has a fill value with opacity 0 in order to detect the mouse events.","The only return value from the render function is a function to allow toggling the visibility of the voronoi lines. This is done by changing the CSS class without re-rendering."],"category":"d3js","files":{"demo":{"content":"import {\n  area as areaD3,\n  axisBottom,\n  axisLeft,\n  csv,\n  format,\n  line as lineD3,\n  max,\n  min,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport \"./area.styl\"\n\ntype Point = {\n  index?: number\n  percent: number\n  year: number\n}\n\nconst fetchData = (): Promise<Point[]> =>\n  (csv(`${ROOT_PATH}data/d3js/area/data.csv`) as unknown) as Promise<Point[]>\n\nconst texts = {\n  pointTitle: (point: Point) =>\n    `Year: ${point.year}, ` + `Percent: ${point.percent}%`,\n  title: \"Share of top decile [aka top 10%] in national income\",\n}\n\nconst margin = {\n  bottom: 50,\n  left: 70,\n  right: 50,\n  top: 50,\n}\n\nconst height = 400 - margin.top - margin.bottom\nconst titleYOffset = -15\nconst axisTickSize = 10\n\ntype RenderChart = (o: {\n  data: Point[]\n  rootElId: string\n}) => {\n  toggleVoronoi(): void\n}\n\nconst renderChart: RenderChart = ({ data, rootElId }) => {\n  const width =\n    (document.getElementById(rootElId) as HTMLElement).getBoundingClientRect()\n      .width -\n    margin.left -\n    margin.right\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n    .attr(\"class\", \"area-chart\")\n\n  svg\n    .append(\"text\")\n    .attr(\"class\", \"chart-title\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"transform\", `translate(${width / 2},${titleYOffset})`)\n    .text(texts.title)\n    .style(\"font-weight\", \"bold\")\n\n  filterBlackOpacity(\"points\", svg, 2, 0.5)\n\n  const xMax = max(data, (point) => point.year) as number\n  const xMin = min(data, (point) => point.year) as number\n\n  const yMax = max(data, (point) => point.percent / 100) as number\n  const yMin = min(data, (point) => point.percent / 100) as number\n\n  const xScale = scaleLinear().domain([xMin, xMax]).range([0, width])\n  const yScale = scaleLinear()\n    .domain([yMax + 0.05, yMin - 0.05])\n    .range([0, height])\n\n  const xAxis = axisBottom(xScale)\n    .tickFormat(format(\".0f\"))\n    .tickSize(axisTickSize)\n  const yAxis = axisLeft(yScale)\n    .tickFormat(format(\".0%\"))\n    .tickSize(axisTickSize)\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", `translate(0,${height})`)\n    .call(xAxis)\n    .selectAll(\"text\")\n    .attr(\"dy\", \"1.25em\")\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .call(yAxis)\n    .selectAll(\"text\")\n    .attr(\"dx\", \"-.25em\")\n\n  const area = areaD3<Point>()\n    .x((point: Point) => xScale(point.year))\n    .y0(height)\n    .y1((point: Point) => yScale(point.percent / 100))\n\n  const line = lineD3<Point>()\n    .x((d) => xScale(d.year))\n    .y((d) => yScale(d.percent / 100))\n\n  svg\n    .append(\"path\")\n    .datum(data)\n    .attr(\"class\", \"line\")\n    .attr(\"d\", line)\n    .attr(\"clip-path\", \"url(#clip)\")\n\n  svg\n    .append(\"clipPath\")\n    .attr(\"id\", \"clip\")\n    .append(\"rect\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n\n  svg\n    .append(\"path\")\n    .datum(data)\n    .attr(\"class\", \"area\")\n    .attr(\"d\", area)\n    .attr(\"clip-path\", \"url(#clip)\")\n\n  const voronoi = Delaunay.from(\n    data,\n    (point) => xScale(point.year),\n    (point) => yScale(point.percent / 100)\n  ).voronoi([\n    -margin.left,\n    -margin.top,\n    width + margin.right,\n    height + margin.bottom,\n  ])\n\n  const mouseover = (_e: unknown, d: Point) => {\n    select(`.point-${d.index}`).style(\"display\", \"block\")\n  }\n\n  const mouseleave = (_mouseEvent: unknown, point: Point) => {\n    select(`.point-${point.index}`).style(\"display\", \"none\")\n  }\n\n  svg\n    .selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n    .attr(\n      \"transform\",\n      (point: Point) =>\n        `translate(${xScale(point.year)},${yScale(point.percent / 100)})`\n    )\n    .attr(\"r\", \"5px\")\n    .attr(\n      \"class\",\n      (_point: Point, pointIndex: number) => `point point-${pointIndex}`\n    )\n    .style(\"filter\", \"url(#drop-shadow-points)\")\n\n  const voronoiGroup = svg.append(\"g\").attr(\"class\", \"voronoi\")\n\n  voronoiGroup\n    .selectAll(\"path\")\n    .data(data)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", (point: Point, pointIndex: number) => {\n      point.index = pointIndex\n\n      return voronoi.renderCell(pointIndex)\n    })\n    .on(\"mouseover\", mouseover)\n    .on(\"mouseleave\", mouseleave)\n    .append(\"title\")\n    .text(texts.pointTitle)\n\n  return {\n    toggleVoronoi: () => {\n      const currentClass = voronoiGroup.attr(\"class\")\n\n      const newClass = currentClass.includes(\"show-voronoi\")\n        ? currentClass.replace(\"show-voronoi\", \"\").trim()\n        : `${currentClass} show-voronoi`\n\n      voronoiGroup.attr(\"class\", newClass)\n    },\n  }\n}\n\nconst filterBlackOpacity = (\n  id: string,\n  svg: d3.Selection<SVGGElement, unknown, HTMLElement, unknown>,\n  deviation: number,\n  slope: number\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst main = async () => {\n  const data = await fetchData()\n  const rootElId = \"chart\"\n\n  const { toggleVoronoi } = renderChart({\n    data,\n    rootElId,\n  })\n\n  ;(document.getElementById(\"toggle-voronoi\") as HTMLElement).addEventListener(\n    \"click\",\n    (e) => {\n      e.preventDefault()\n\n      toggleVoronoi()\n    }\n  )\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/area/area\"\n\nconst Area = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      <button className=\"btn btn-info\" id=\"toggle-voronoi\" type=\"button\">\n        Toggle Voronoi\n      </button>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Area\n","type":"tsx"},"styl":".area-chart\n  path.line\n    fill none\n    stroke #25A6FC\n    stroke-width 3.5px\n\n  path.area\n    fill #6E6EA7\n    opacity .5\n\n  text\n    text-shadow 1px 1px 1px #ddd\n\n  .axis\n    shape-rendering crispEdges\n    fill #333\n\n  .chart-title\n    font-weight bold\n\n  .x.axis .minor\n    fill #000\n\n  .axis path,\n  .axis line\n    fill none\n    shape-rendering crispEdges\n    stroke #ccc\n\n  .y.axis line, .y.axis path,\n  .x.axis line, .x.axis path\n    fill none\n    stroke #ccc\n\n  .voronoi\n    fill black\n    opacity 0\n    stroke black\n    stroke-width .1\n\n  .voronoi.show-voronoi\n    fill rgba(0,0,0,0)\n    opacity 1\n    stroke-width 1\n\n  .point\n    display none\n    fill #69D895\n"},"key":"area"},"meta":{"description":"Area Chart example, using D3.js, with a transparent Voronoi overlay that gives the functionality know fast the nearest point to the mouse."}}},"staticQueryHashes":[]}