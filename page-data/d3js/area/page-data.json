{"componentChunkName":"component---src-pages-d-3-js-area-tsx","path":"/d3js/area/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"docs":[["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-shape API reference","https://github.com/d3/d3-shape#api-reference"],["d3-shape Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-shape/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-axis API reference","https://github.com/d3/d3-axis#api-reference"],["d3-axis Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-axis/index.d.ts"],["d3-delaunay API reference","https://github.com/d3/d3-delaunay#api-reference"],["d3-delaunay Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-delaunay/index.d.ts"],["Delaunay Triangulation Wikipedia Article","https://en.wikipedia.org/wiki/Delaunay_triangulation"]],"isCompleted":true,"name":"Area","notes":["Changed style","Added point and voronoi functionality"],"sources":["http://codepen.io/notno/pen/ilvsd"],"summary":["This chart is a mix of a common area + line chart plus Voronoi to properly display the points on mouse move. For the x and y axis, it uses two linear scales. It uses a SVG 'path' for printing the area, and a different SVG 'path' to print the line.","It uses an SVG 'clipPath' element with a 'rect' to limit the area and line paths. This doesn't look necessary, because after removing it, the area has the same dimensions. However I kept it because it was in the original source and it showcases this approach.","The voronoi lines are applied to a SVG 'path' element using 'voronoi.renderCell'. Because no context is passed to this method, it returns the SVG path by default. Each fragment of the voronoi chart has a fill value with opacity 0 in order to detect the mouse events.","The only return value from the render function is a function to allow toggling the visibility of the voronoi lines. This is done by changing the CSS class without re-rendering."],"category":"d3js","files":{"cssModule":".areaChart {\n  path.line {\n    fill: none;\n    stroke: #25a6fc;\n    stroke-width: 3.5px;\n  }\n\n  path.area {\n    fill: #6e6ea7;\n    opacity: 0.5;\n  }\n\n  .axis {\n    fill: #333;\n    shape-rendering: crispEdges;\n  }\n\n  .chartTitle {\n    font-weight: bold;\n  }\n\n  .x.axis .minor {\n    fill: #000;\n  }\n\n  .axis path,\n  .axis line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #ccc;\n  }\n\n  .y.axis line,\n  .y.axis path,\n  .x.axis line,\n  .x.axis path {\n    fill: none;\n    stroke: #ccc;\n  }\n\n  .voronoi {\n    fill: black;\n    opacity: 0;\n    stroke: black;\n    stroke-width: 0.1;\n  }\n\n  .voronoi.showVoronoi {\n    fill: rgba(0, 0, 0, 0);\n    opacity: 1;\n    stroke-width: 1;\n  }\n\n  .point {\n    display: none;\n    fill: #69d895;\n  }\n}\n","demo":[{"content":"import { renderChart } from \"./area-chart\"\nimport { IncomeItem, createChartConfig, fetchData } from \"./area-chart-data\"\n\nconst main = async () => {\n  const dataPoints = await fetchData()\n  const chartConfig = createChartConfig(dataPoints)\n\n  const { toggleVoronoi } = renderChart<IncomeItem>(chartConfig)\n\n  ;(document.getElementById(\"toggle-voronoi\") as HTMLElement).addEventListener(\n    \"click\",\n    (clickEvent: MouseEvent) => {\n      clickEvent.preventDefault()\n\n      toggleVoronoi()\n    }\n  )\n}\n\nexport default main\n","fileName":"area"},{"content":"import { csv } from \"d3\"\n\nimport { ChartConfig } from \"./area-chart\"\n\ntype IncomeItemBase = {\n  percent: number\n  year: number\n}\n\nexport type IncomeItem = IncomeItemBase & {\n  pointIndex: number\n}\n\nexport const fetchData = async (): Promise<IncomeItem[]> => {\n  const result = (await (csv(\n    `${ROOT_PATH}data/d3js/area/data.csv`\n  ) as unknown)) as IncomeItem[]\n\n  return result.map((p, pointIndex) => ({\n    ...p,\n    pointIndex,\n  }))\n}\n\ntype Config = ChartConfig<IncomeItem>\n\nconst getItemXValue: Config[\"getItemXValue\"] = (incomeItem) => incomeItem.year\nconst getItemYValue: Config[\"getItemYValue\"] = (incomeItem) =>\n  incomeItem.percent / 100\nconst getItemId: Config[\"getItemId\"] = (incomeItem) => incomeItem.pointIndex\nconst getItemTitle: Config[\"getItemTitle\"] = (incomeItem: IncomeItem) =>\n  `Year: ${incomeItem.year}, Percent: ${incomeItem.percent}%`\nconst getChartTitle = () =>\n  \"Share of top decile [aka top 10%] in national income\"\n\nexport const createChartConfig = (\n  dataPoints: IncomeItem[]\n): ChartConfig<IncomeItem> => ({\n  areaPoints: dataPoints,\n  getChartTitle,\n  getItemId,\n  getItemTitle,\n  getItemXValue,\n  getItemYValue,\n  rootElId: \"chart\",\n})\n","fileName":"area-chart-data"},{"content":"import {\n  Selection,\n  area as areaD3,\n  axisBottom,\n  axisLeft,\n  format,\n  line as lineD3,\n  max,\n  min,\n  scaleLinear,\n  scaleQuantize,\n  select,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./area.module.css\"\n\nconst filterBlackOpacity = (\n  id: string,\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>,\n  deviation: number,\n  slope: number\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nexport type ChartConfig<AreaPoint> = {\n  areaPoints: AreaPoint[]\n  getChartTitle: () => string\n  getItemId: (areaPoint: AreaPoint) => number\n  getItemTitle: (areaPoint: AreaPoint) => string\n  getItemXValue: (areaPoint: AreaPoint) => number\n  getItemYValue: (areaPoint: AreaPoint) => number\n  rootElId: string\n}\n\ntype ChartReturn = {\n  toggleVoronoi: () => void\n}\n\nexport const renderChart = <AreaPoint>(\n  chartConfig: ChartConfig<AreaPoint>\n): ChartReturn => {\n  const { areaPoints, rootElId } = chartConfig\n  const { width: elWidth } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n  const isSmallDevice = elWidth < 500\n\n  const margin = {\n    bottom: 50,\n    left: isSmallDevice ? 50 : 70,\n    right: isSmallDevice ? 10 : 50,\n    top: 50,\n  }\n\n  const height = 400 - margin.top - margin.bottom\n  const titleYOffset = -15\n  const axisTickSize = 10\n\n  const width = elWidth - margin.left - margin.right\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n    .attr(\"class\", styles.areaChart)\n\n  svg\n    .append(\"text\")\n    .attr(\"class\", styles.chartTitle)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"transform\", `translate(${width / 2},${titleYOffset})`)\n    .text(chartConfig.getChartTitle())\n    .style(\"font-weight\", \"bold\")\n\n  filterBlackOpacity(\"points\", svg, 2, 0.5)\n\n  const xMax = max(areaPoints, chartConfig.getItemXValue) as number\n  const xMin = min(areaPoints, chartConfig.getItemXValue) as number\n\n  const yMax = max(areaPoints, chartConfig.getItemYValue) as number\n  const yMin = min(areaPoints, chartConfig.getItemYValue) as number\n\n  const xScale = scaleLinear().domain([xMin, xMax]).range([0, width])\n  const yScale = scaleLinear()\n    .domain([yMax + 0.05, yMin - 0.05])\n    .range([0, height])\n\n  const extractXScale = (areaPoint: AreaPoint) =>\n    xScale(chartConfig.getItemXValue(areaPoint))\n  const extractYScale = (areaPoint: AreaPoint) =>\n    yScale(chartConfig.getItemYValue(areaPoint))\n\n  const getSmallDeviceTicksScale = () =>\n    scaleQuantize()\n      .domain([0, 500])\n      .range(Array.from({ length: 6 }).map((_, rangeIndex) => rangeIndex))\n\n  const ticks = isSmallDevice ? getSmallDeviceTicksScale()(elWidth) : null\n\n  const xAxis = axisBottom(xScale).tickFormat(format(\".0f\")).ticks(ticks)\n  const yAxis = axisLeft(yScale)\n    .tickFormat(format(\".0%\"))\n    .tickSize(axisTickSize)\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.x} ${styles.axis}`)\n    .attr(\"transform\", `translate(0,${height})`)\n    .call(xAxis)\n    .selectAll(\"text\")\n    .attr(\"dy\", \"1.25em\")\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", `${styles.y} ${styles.axis}`)\n    .call(yAxis)\n    .selectAll(\"text\")\n    .attr(\"dx\", \"-.25em\")\n\n  const area = areaD3<AreaPoint>().x(extractXScale).y0(height).y1(extractYScale)\n  const line = lineD3<AreaPoint>().x(extractXScale).y(extractYScale)\n\n  svg\n    .append(\"path\")\n    .datum(areaPoints)\n    .attr(\"class\", styles.line)\n    .attr(\"d\", line)\n    .attr(\"clip-path\", \"url(#clip)\")\n\n  svg\n    .append(\"clipPath\")\n    .attr(\"id\", \"clip\")\n    .append(\"rect\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n\n  svg\n    .append(\"path\")\n    .datum(areaPoints)\n    .attr(\"class\", styles.area)\n    .attr(\"d\", area)\n    .attr(\"clip-path\", \"url(#clip)\")\n\n  const voronoi = Delaunay.from(\n    areaPoints,\n    extractXScale,\n    extractYScale\n  ).voronoi([\n    -margin.left,\n    -margin.top,\n    width + margin.right,\n    height + margin.bottom,\n  ])\n\n  const mouseover = (_e: unknown, areaPoint: AreaPoint) => {\n    select(`.point-${chartConfig.getItemId(areaPoint)}`).style(\n      \"display\",\n      \"block\"\n    )\n  }\n\n  const mouseleave = (_mouseEvent: unknown, areaPoint: AreaPoint) => {\n    select(`.point-${chartConfig.getItemId(areaPoint)}`).style(\n      \"display\",\n      \"none\"\n    )\n  }\n\n  svg\n    .selectAll(\"circle\")\n    .data(areaPoints)\n    .enter()\n    .append(\"circle\")\n    .attr(\n      \"transform\",\n      (areaPoint: AreaPoint) =>\n        `translate(${extractXScale(areaPoint)},${extractYScale(areaPoint)})`\n    )\n    .attr(\"r\", \"5px\")\n    .attr(\n      \"class\",\n      (areaPoint) => `${styles.point} point-${chartConfig.getItemId(areaPoint)}`\n    )\n    .style(\"filter\", \"url(#drop-shadow-points)\")\n\n  const voronoiGroup = svg.append(\"g\").attr(\"class\", styles.voronoi)\n\n  voronoiGroup\n    .selectAll(\"path\")\n    .data(areaPoints)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", (areaPoint) =>\n      voronoi.renderCell(chartConfig.getItemId(areaPoint))\n    )\n    .on(\"mouseover\", mouseover)\n    .on(\"mouseleave\", mouseleave)\n    .attr(\"class\", \"voronoi-group\")\n    .attr(\"title\", chartConfig.getItemTitle)\n\n  $(\".voronoi-group\").tooltip({\n    track: true,\n  })\n\n  return {\n    toggleVoronoi: () => {\n      const currentClass = voronoiGroup.attr(\"class\")\n      const { showVoronoi } = styles\n\n      const newClass = currentClass.includes(showVoronoi)\n        ? currentClass.replace(showVoronoi, \"\").trim()\n        : `${currentClass} ${showVoronoi}`\n\n      voronoiGroup.attr(\"class\", newClass)\n    },\n  }\n}\n","fileName":"area-chart"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/area/area\"\n\nconst Area = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      <button className=\"btn btn-info\" id=\"toggle-voronoi\" type=\"button\">\n        Toggle Voronoi\n      </button>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Area\n","type":"tsx"}},"key":"area"},"meta":{"description":"Area Chart example, using D3.js, with a transparent Voronoi overlay that gives the functionality know fast the nearest point to the mouse."}}},"staticQueryHashes":[]}