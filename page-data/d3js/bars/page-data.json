{
    "componentChunkName": "component---src-pages-d-3-js-bars-tsx",
    "path": "/d3js/bars/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Bars","notes":["Added axis","Changed direction and added color transition for wave effect","Added transition in axis and the add item possibility","The interval stops when you place the mouse over a bar, and there is a SVG filter"],"sources":["http://codepen.io/basemoz/pen/mBoiL"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".barsChart {\n  $axisColor: #777;\n\n  rect {\n    stroke: white;\n  }\n\n  .axis {\n    path {\n      fill: none;\n      stroke: $axisColor;\n      stroke-width: 1px;\n    }\n\n    :global .tick line {\n      stroke: $axisColor;\n    }\n  }\n}\n\n#addItemButton {\n  margin-bottom: 20px;\n}\n","filePath":"src/demos/bars/bars.module.css"}],"demoTS":[{"content":"import { max } from \"d3\"\n\nimport { BarsChart } from \"./bars-chart\"\nimport { CONTAINER_ID, createChartConfig, fetchData } from \"./bars-chart-config\"\nimport * as styles from \"./bars.module.css\"\n\nconst main = async () => {\n  const initialBars = await fetchData()\n\n  const chartConfig = createChartConfig({ bars: initialBars })\n\n  const barsChart = new BarsChart(chartConfig)\n\n  barsChart.render()\n\n  const addItemEl = document.getElementById(styles.addItemButton) as HTMLElement\n\n  addItemEl.addEventListener(\"click\", () => {\n    const bars = barsChart.getBars()\n    const newId = max(bars, (bar) => bar.id)! + 1\n\n    barsChart.addBar({\n      id: newId,\n      metric:\n        Math.floor(Math.random() * (max(bars, (bar) => bar.metric) as number)) +\n        1,\n    })\n    barsChart.refresh()\n\n    if (bars.length >= 20) {\n      addItemEl.setAttribute(\"disabled\", \"disabled\")\n    }\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/bars/bars.ts"},{"content":"import { ChartConfig } from \"./bars-chart\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype BarData = number\n\nconst fetchData = async (): Promise<BarData[]> => {\n  const rawData = await fetch(`${ROOT_PATH}data/d3js/bars/data.json`)\n\n  return rawData.json()\n}\n\nconst createChartConfig = ({ bars }: { bars: BarData[] }): ChartConfig => ({\n  bars: bars.map((...[metric, metricIndex]) => ({\n    id: metricIndex,\n    metric,\n  })),\n  rootElId: CONTAINER_ID,\n})\n\nexport { CONTAINER_ID, createChartConfig, fetchData }\n","filePath":"src/demos/bars/bars-chart-config.ts"},{"content":"import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  max,\n  range,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nimport * as styles from \"./bars.module.css\"\n\ntype ChartData = {\n  id: number\n  metric: number\n}\n\nconst height = 500\nconst margin = { left: 160, top: 100 }\nconst floor = height - margin.top * 2\n\nconst barWidth = 30\nconst barHeight = 7\n\nconst colours = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\nconst barYFn = (barItem: ChartData) => floor - barHeight * barItem.metric\nconst barHeightFn = (barItem: ChartData) => barItem.metric * barHeight\n\ntype ChartConfig = {\n  bars: ChartData[]\n  rootElId: string\n}\n\ntype Interval = ReturnType<typeof setInterval>\ntype Chart = Selection<SVGGElement, ChartData, HTMLElement, unknown>\ntype ColorFn = (c: ChartData) => string\n\nclass BarsChart {\n  private readonly bars: ChartData[]\n  private readonly rootElId: string\n  private interval: Interval | null\n  private readonly barClassName: string\n  private chart: Chart | null\n  private color: ColorFn | null\n\n  public constructor({ bars, rootElId }: ChartConfig) {\n    this.bars = bars\n    this.rootElId = rootElId\n    this.barClassName = `bars-${uuidv1().slice(0, 6)}`\n\n    this.interval = null\n    this.chart = null\n    this.color = null\n  }\n\n  public render() {\n    const { bars, rootElId } = this\n    const { width } = (\n      document.getElementById(rootElId) as HTMLElement\n    ).getBoundingClientRect()\n\n    const colorScale = scaleLinear()\n      .domain(extent(bars, (bar) => bar.metric) as [number, number])\n      .range([0, 1])\n    const heatmapColour = scaleLinear<string>()\n      .domain(range(0, 1, 1.0 / colours.length))\n      .range(colours)\n\n    const color = (barItem: ChartData) =>\n      heatmapColour(colorScale(barItem.metric))\n\n    this.color = color\n\n    const svg = select<HTMLElement, ChartData>(`#${rootElId}`).append(\"svg\")\n\n    svg\n      .attr(\"height\", height)\n      .attr(\"width\", width)\n      .attr(\"class\", styles.barsChart)\n\n    svg\n      .append(\"g\")\n      .append(\"filter\")\n      .attr(\"height\", \"300%\")\n      .attr(\"x\", \"-100%\")\n      .attr(\"y\", \"-100%\")\n      .attr(\"id\", \"blur\")\n      .attr(\"width\", \"300%\")\n      .append(\"feGaussianBlur\")\n      .attr(\"stdDeviation\", \"2 2\")\n\n    const chart = svg.append(\"g\")\n\n    this.chart = chart\n\n    chart.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    this.interval = setInterval(this.getIntervalFn(), 1000)\n\n    const x = scaleLinear()\n      .domain([0.5, bars.length + 0.5])\n      .range([1, barWidth * bars.length])\n\n    const y = scaleLinear()\n      .domain([0, max(bars, (bar) => bar.metric) as number])\n      .rangeRound([\n        0,\n        -1 * barHeight * (max(bars, (bar) => bar.metric) as number),\n      ])\n\n    const xAxisG = chart.append(\"g\")\n\n    xAxisG\n      .attr(\"class\", `xAxis ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${floor})`)\n      .call(axisBottom(x))\n\n    xAxisG\n      .append(\"text\")\n      .attr(\"transform\", `translate(${(barWidth * bars.length) / 2} ,0)`)\n      .attr(\"class\", \"xAxisLabel\")\n      .attr(\"y\", 40)\n      .attr(\"font-size\", \"1.3em\")\n      .attr(\"fill\", \"black\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Number\")\n\n    const yAxisG = chart.append(\"g\")\n\n    yAxisG\n      .attr(\"class\", `yAxis ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${floor})`)\n      .call(axisLeft(y))\n\n    yAxisG\n      .append(\"text\")\n      .attr(\"transform\", `translate(-30,${(-1 * (height - 60)) / 2})`)\n      .attr(\"y\", 40)\n      .attr(\"font-size\", \"1.3em\")\n      .attr(\"fill\", \"black\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Value\")\n\n    this.drawRectangles()\n  }\n\n  public addBar(newBar: ChartData) {\n    this.bars.push(newBar)\n  }\n\n  public getBars(): ChartData[] {\n    return this.bars.slice()\n  }\n\n  public refresh() {\n    this.drawRectangles()\n    this.redraw()\n  }\n\n  private clearInterval() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  private getBarsSelection() {\n    const { chart } = this\n\n    return (chart as Chart).selectAll<SVGRectElement, ChartData>(\"rect\")\n  }\n\n  private drawRectangles() {\n    const { bars, color } = this\n\n    this.getBarsSelection()\n      .data(bars)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (...[, barIndex]) => barWidth * barIndex)\n      .attr(\"y\", barYFn)\n      .attr(\"width\", barWidth)\n      .attr(\"height\", barHeightFn)\n      .attr(\"class\", this.barClassName)\n      .attr(\"fill\", (barItem) => color!(barItem))\n      .on(\"mouseover\", (...[, mouseBar]) => {\n        this.getBarsSelection().style(\"filter\", (bar) =>\n          bar.id === mouseBar.id ? null : \"url(#blur)\"\n        )\n        this.clearInterval()\n      })\n      .on(\"mouseleave\", () => {\n        this.getBarsSelection().style(\"filter\", null)\n        this.clearInterval()\n        this.interval = setInterval(this.getIntervalFn(), 1000)\n      })\n      .attr(\"title\", (bar) => bar.metric)\n\n    $(`.${this.barClassName}`).tooltip({\n      track: true,\n    })\n  }\n\n  private getIntervalFn() {\n    return () => {\n      const { bars } = this\n\n      bars.unshift(bars.pop() as ChartData)\n\n      this.redraw()\n    }\n  }\n\n  private redraw() {\n    const { bars, chart, color } = this\n\n    if (!chart) {\n      return\n    }\n\n    const newX = scaleLinear()\n      .domain([0.5, bars.length + 0.5])\n      .range([1, barWidth * bars.length])\n\n    const newAxis = axisBottom(newX)\n\n    chart.select<SVGGElement>(\".xAxis\").transition().duration(500).call(newAxis)\n\n    chart\n      .select(\".xAxisLabel\")\n      .transition()\n      .duration(500)\n      .attr(\"transform\", `translate(${(barWidth * bars.length) / 2} ,0)`)\n\n    chart\n      .selectAll(\"rect\")\n      .data(bars)\n      .transition()\n      .duration(500)\n      .attr(\"y\", barYFn)\n      .attr(\"height\", barHeightFn)\n      .attr(\"fill\", color!)\n      .select(\"title\")\n      .text((barItem) => barItem.metric)\n  }\n}\n\nexport { BarsChart, ChartConfig }\n","filePath":"src/demos/bars/bars-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/bars/bars\"\nimport * as styles from \"@/demos/bars/bars.module.css\"\n\nconst Bars = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <form>\n      <button className=\"btn btn-info\" id={styles.addItemButton} type=\"button\">\n        Add item\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Bars\n","type":"tsx"}},"key":"bars"},"meta":{"description":"Bar Chart example with a traslation interval, a custom color scale and dynamic entry of new data. You can also see how to animate an axis change."}}},
    "staticQueryHashes": []}