{"componentChunkName":"component---src-pages-d-3-js-bars-tsx","path":"/d3js/bars/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[],"isCompleted":true,"name":"Bars","notes":["Added axis","Changed direction and added color transition for wave effect","Added transition in axis and the add item possibility","The interval stops when you place the mouse over a bar"],"sources":["http://codepen.io/basemoz/pen/mBoiL"],"summary":[],"category":"d3js","files":{"demo":{"content":"import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  max,\n  range,\n  scaleLinear,\n  select,\n} from \"d3\"\n\nimport \"./bars.styl\"\n\ntype Data = number[]\n\nconst height = 500\nconst margin = { left: 160, top: 100 }\nconst floor = height - margin.top * 2\n\nconst barWidth = 30\nconst barHeight = 7\n\nconst colours = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\nconst barYFn = (d: Data[number]) => floor - barHeight * d\nconst barHeightFn = (d: Data[number]) => d * barHeight\n\nconst fetchData = async (): Promise<Data> => {\n  const rawData = await fetch(`${ROOT_PATH}data/d3js/bars/data.json`)\n  const data = await rawData.json()\n\n  return data\n}\n\ntype BarsChartOpts = {\n  data: Data\n  rootElId: string\n}\n\ntype Interval = ReturnType<typeof setInterval>\ntype Chart = Selection<SVGGElement, unknown, HTMLElement, unknown>\ntype ColorFn = (c: Data[number]) => string\n\nclass BarsChart {\n  private data: Data\n  private rootElId: string\n  private interval: Interval | null\n  private chart: Chart | null\n  private color: ColorFn | null\n\n  public constructor({ data, rootElId }: BarsChartOpts) {\n    this.data = data\n    this.rootElId = rootElId\n\n    this.interval = null\n    this.chart = null\n    this.color = null\n  }\n\n  public render() {\n    const { data, rootElId } = this\n    const { width } = (document.getElementById(\n      rootElId\n    ) as HTMLElement).getBoundingClientRect()\n\n    const c = scaleLinear()\n      .domain(extent(data) as [number, number])\n      .range([0, 1])\n    const heatmapColour: ColorFn = scaleLinear<string>()\n      .domain(range(0, 1, 1.0 / colours.length))\n      .range(colours)\n\n    const color = (d: Data[number]) => heatmapColour(c(d))\n\n    this.color = color as ColorFn\n\n    const svg = select(`#${rootElId}`).append(\"svg\")\n\n    svg.attr(\"height\", height).attr(\"width\", width).attr(\"class\", \"bars-chart\")\n\n    const chart = svg.append(\"g\")\n\n    this.chart = chart\n\n    chart.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    this.interval = setInterval(this.getIntervalFn(), 1000)\n\n    const x = scaleLinear()\n      .domain([0.5, data.length + 0.5])\n      .range([1, barWidth * data.length])\n\n    const y = scaleLinear()\n      .domain([0, max(data) as number])\n      .rangeRound([0, -1 * barHeight * (max(data) as number)])\n\n    const xAxisG = chart.append(\"g\")\n\n    xAxisG\n      .attr(\"class\", \"x-axis axis\")\n      .attr(\"transform\", `translate(0,${floor})`)\n      .call(axisBottom(x))\n\n    xAxisG\n      .append(\"text\")\n      .attr(\"transform\", `translate(${(barWidth * data.length) / 2} ,0)`)\n      .attr(\"class\", \"x-axis-label\")\n      .attr(\"y\", 40)\n      .attr(\"font-size\", \"1.3em\")\n      .attr(\"fill\", \"black\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Number\")\n\n    const yAxisG = chart.append(\"g\")\n\n    yAxisG\n      .attr(\"class\", \"x-axis axis\")\n      .attr(\"transform\", `translate(0,${floor})`)\n      .call(axisLeft(y))\n\n    yAxisG\n      .append(\"text\")\n      .attr(\"transform\", `translate(-30,${(-1 * (height - 60)) / 2})`)\n      .attr(\"y\", 40)\n      .attr(\"font-size\", \"1.3em\")\n      .attr(\"fill\", \"black\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Value\")\n\n    this.drawRectangles()\n  }\n\n  public refresh() {\n    this.drawRectangles()\n    this.redraw()\n  }\n\n  private clearInterval() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  private drawRectangles() {\n    const { data, chart, color } = this\n\n    ;(chart as Chart)\n      .selectAll(\"rect\")\n      .data(data)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (_d: unknown, i: number) => barWidth * i)\n      .attr(\"y\", barYFn)\n      .attr(\"width\", barWidth)\n      .attr(\"height\", barHeightFn)\n      .attr(\"fill\", (d: Data[number]) => (color as ColorFn)(d))\n      .on(\"mouseover\", () => {\n        this.clearInterval()\n      })\n      .on(\"mouseleave\", () => {\n        this.clearInterval()\n        this.interval = setInterval(this.getIntervalFn(), 1000)\n      })\n      .append(\"title\")\n      .text((d: Data[number]) => d)\n  }\n\n  private getIntervalFn() {\n    return () => {\n      const { data } = this\n\n      data.unshift(data.pop() as Data[0])\n      this.redraw()\n    }\n  }\n\n  private redraw() {\n    const { data, chart, color } = this\n\n    if (!chart) {\n      return\n    }\n\n    const newX = scaleLinear()\n      .domain([0.5, data.length + 0.5])\n      .range([1, barWidth * data.length])\n\n    const newAxis = axisBottom(newX)\n\n    chart\n      .select<SVGGElement>(\".x-axis\")\n      .transition()\n      .duration(500)\n      .call(newAxis)\n\n    chart\n      .select(\".x-axis-label\")\n      .transition()\n      .duration(500)\n      .attr(\"transform\", `translate(${(barWidth * data.length) / 2} ,0)`)\n\n    chart\n      .selectAll(\"rect\")\n      .data(data)\n      .transition()\n      .duration(500)\n      .attr(\"y\", barYFn)\n      .attr(\"height\", barHeightFn)\n      .attr(\"fill\", color as ColorFn)\n      .select(\"title\")\n      .text((d: Data[number]) => d)\n  }\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  const barsChart = new BarsChart({\n    data,\n    rootElId: \"chart\",\n  })\n\n  barsChart.render()\n\n  const addItemEl = document.getElementById(\"add-item\") as HTMLElement\n\n  addItemEl.addEventListener(\"click\", () => {\n    if (data.length < 20) {\n      data.push(Math.floor(Math.random() * (max(data) as number)) + 1)\n      barsChart.refresh()\n    } else {\n      addItemEl.setAttribute(\"disabled\", \"disabled\")\n    }\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/bars/bars\"\n\nconst Bars = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      <button className=\"btn btn-info\" id=\"add-item\" type=\"button\">\n        Add item\n      </button>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Bars\n","type":"tsx"},"styl":".bars-chart\n  axis-color = #777\n\n  rect\n    stroke white\n\n  .axis\n    path\n      fill none\n      stroke axis-color\n      stroke-width 1px\n\n    .tick line\n      stroke axis-color\n"},"key":"bars"},"meta":{"description":"Bar Chart example with a traslation interval, a custom color scale and dynamic entry of new data. You can also see how to animate an axis change."}}},"staticQueryHashes":[]}