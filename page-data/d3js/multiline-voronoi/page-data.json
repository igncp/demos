{"componentChunkName":"component---src-pages-d-3-js-multiline-voronoi-js","path":"/d3js/multiline-voronoi/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"name":"Multi-Line Voronoi","notes":["Click one time to just show a line, click again to sho all","Added color and dropshadow for 3D effect","Added label data and clicked function"],"sources":["http://bl.ocks.org/mbostock/8033015"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"import * as d3next from \"d3\"\n\nconst fetchData = () => {\n  const monthFormat = d3.time.format(\"%Y-%m\")\n  const months = []\n\n  return new Promise((resolve) => {\n    d3.tsv(\n      `${ROOT_PATH}data/d3js/multiline-voronoi/data.tsv`,\n      (d, index) => {\n        if (!index) {\n          Object.keys(d)\n            .map(monthFormat.parse)\n            .filter(Number)\n            .forEach((value) => months.push(value))\n        }\n\n        const city = {\n          name: d.name.replace(/(msa|necta div|met necta|met div)$/i, \"\"),\n          values: null,\n        }\n\n        city.values = months.map((m) => ({\n          city,\n          date: m,\n          value: d[monthFormat(m)] / 100,\n        }))\n\n        return city\n      },\n      (_error, citiesResp) => {\n        resolve({ cities: citiesResp, months })\n      }\n    )\n  })\n}\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nconst margin = {\n  bottom: 70,\n  left: 80,\n  right: 70,\n  top: 60,\n}\n\nconst addFilter = (svg) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", \"drop-shadow\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 1)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \"1\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst renderChart = ({ rootElId, cities, months }) => {\n  const color = d3.scale.category20()\n  let clickToggle = false\n\n  const width =\n    document.getElementById(rootElId).getBoundingClientRect().width -\n    margin.left -\n    margin.right\n\n  const height = 500 - margin.top - margin.bottom\n\n  const x = d3.time.scale().range([0, width])\n  const y = d3next.scaleLinear().range([height, 0])\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  x.domain(d3next.extent(months))\n  y.domain([\n    0,\n    d3next.max(cities, (c) => d3next.max(c.values, (d) => d.value)),\n  ]).nice()\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"axis axis--x\")\n    .attr(\"transform\", `translate(0,${height})`)\n    .call(d3.svg.axis().scale(x).orient(\"bottom\"))\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"axis axis--y\")\n    .call(d3.svg.axis().scale(y).orient(\"left\").ticks(10, \"%\"))\n    .append(\"text\")\n    .attr(\"x\", 20)\n    .attr(\"dy\", \".32em\")\n    .style(\"font-weight\", \"bold\")\n    .text(\"US Unemployment Rate\")\n\n  addFilter(svg)\n\n  const line = d3next\n    .line()\n    .x((d) => x(d.date))\n    .y((d) => y(d.value))\n\n  const generateVoronoi = function (data) {\n    const mouseover = (d) => {\n      d3.select(d.city.line).classed(\"city--hover\", true)\n      d.city.line.parentNode.appendChild(d.city.line)\n      focus.attr(\"transform\", `translate(${x(d.date)},${y(d.value)})`)\n      focus.select(\".text1\").text(`${d.city.name.trim()}: `)\n\n      const date = `${monthNames[d.date.getMonth()]} of ${d.date.getFullYear()}`\n\n      return focus\n        .select(\".text2\")\n        .text(` ${String((d.value * 100).toFixed(2))}% - ${date}`)\n    }\n\n    const mouseout = function (d) {\n      d3.select(d.city.line).classed(\"city--hover\", false)\n\n      return focus.attr(\"transform\", \"translate(-100,-100)\")\n    }\n\n    const clicked = function (d) {\n      clickToggle = !clickToggle\n      d3.selectAll(\".cities\").remove()\n      d3.selectAll(\".voronoi\").remove()\n\n      if (clickToggle) {\n        generateLines([d.city])\n\n        return\n      }\n\n      generateLines(cities)\n\n      return\n    }\n\n    const focus = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(-100,-100)\")\n      .attr(\"class\", \"focus\")\n\n    focus.append(\"circle\").attr(\"r\", 3.5)\n    focus.append(\"text\").attr(\"class\", \"text1\").attr(\"y\", -30)\n    focus.append(\"text\").attr(\"class\", \"text2\").attr(\"y\", -10)\n\n    const voronoi = d3.geom\n      .voronoi()\n      .x((d) => x(d.date))\n      .y((d) => y(d.value))\n      .clipExtent([\n        [-margin.left, -margin.top],\n        [width + margin.right, height + margin.bottom],\n      ])\n\n    const voronoiGroup = svg.append(\"g\").attr(\"class\", \"voronoi\")\n\n    voronoiGroup\n      .selectAll(\"path\")\n      .data(\n        voronoi(\n          d3\n            .nest()\n            .key((d) => `${x(d.date)},${y(d.value)}`)\n            .rollup((v) => v[0])\n            .entries(d3.merge(data.map((d) => d.values)))\n            .map((d) => d.values)\n        )\n      )\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (d) => `M${d.join(\"L\")}Z`)\n      .datum((d) => d.point)\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseout\", mouseout)\n      .on(\"click\", clicked)\n\n    d3.select(\"#show-voronoi\")\n      .property(\"disabled\", false)\n      .on(\"change\", function () {\n        return voronoiGroup.classed(\"voronoi--show\", this.checked)\n      })\n  }\n\n  const generateLines = function (data) {\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"cities\")\n      .selectAll(\"path\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", function (d) {\n        d.line = this\n\n        return line(d.values)\n      })\n      .style(\"stroke\", (_d, i) => color(i))\n      .style(\"filter\", () => \"url(#drop-shadow)\")\n\n    return generateVoronoi(data)\n  }\n\n  generateLines(cities)\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n  const { cities, months } = await fetchData()\n\n  renderChart({\n    cities,\n    months,\n    rootElId,\n  })\n}\n\nexport default main\n","type":"js"},"page":{"content":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/multiline-voronoi/multiline-voronoi\"\nimport \"@/demos/multiline-voronoi/multiline-voronoi.styl\"\n\nconst MultilineVoronoi = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <form>\n      <input id=\"show-voronoi\" type=\"checkbox\" />{\" \"}\n      <label htmlFor=\"show-voronoi\">Show Voronoi lines</label>\n    </form>\n    <div className=\"multiline-voronoi-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default MultilineVoronoi\n","type":"js"},"styl":".multiline-voronoi-chart\n    .axis path,\n    .axis line {\n      fill: none;\n      stroke: #000;\n      shape-rendering: crispEdges;\n    }\n\n    .cities {\n      fill: none;\n      stroke: #aaa;\n      stroke-linejoin: round;\n      stroke-linecap: round;\n      stroke-width: 1.5px;\n    }\n\n    .city--hover {\n      stroke: #000;\n    }\n\n    .focus text {\n      text-anchor: middle;\n      text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;\n    }\n\n    .voronoi path {\n      fill: none;\n      pointer-events: all;\n    }\n\n    .voronoi--show path {\n      stroke: red;\n      stroke-opacity: .2;\n    }\n\n    #form {\n      position: absolute;\n      top: 20px;\n      right: 30px;\n    }"},"key":"multiline-voronoi"}}},"staticQueryHashes":[]}