{
    "componentChunkName": "component---src-pages-d-3-js-multiline-voronoi-tsx",
    "path": "/d3js/multiline-voronoi/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.tsv"],"docs":[["d3-axis API reference","https://github.com/d3/d3-axis#api-reference"],["d3-axis Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-axis/index.d.ts"],["d3-shape API reference","https://github.com/d3/d3-shape#api-reference"],["d3-shape Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-shape/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-delaunay API reference","https://github.com/d3/d3-delaunay#api-reference"],["d3-delaunay Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-delaunay/index.d.ts"],["Delaunay Triangulation Wikipedia Article","https://en.wikipedia.org/wiki/Delaunay_triangulation"],["d3-scale-chromatic API reference","https://github.com/d3/d3-scale-chromatic#api-reference"],["d3-scale-chromatic Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale-chromatic/index.d.ts"],["d3-fetch API reference","https://github.com/d3/d3-fetch#api-reference"],["d3-fetch Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-fetch/index.d.ts"]],"isCompleted":true,"name":"Multi-Line Voronoi","notes":[],"sources":["http://bl.ocks.org/mbostock/8033015"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".multilineVoronoiChart {\n  position: relative;\n\n  .axis path,\n  .axis line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #000;\n  }\n\n  .lines {\n    fill: none;\n    stroke: #aaa;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke-width: 1.5px;\n  }\n\n  .lineHover {\n    stroke: #000;\n  }\n\n  .tooltip text {\n    text-anchor: middle;\n    text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;\n  }\n\n  .voronoi path {\n    fill: none;\n    pointer-events: all;\n  }\n\n  .voronoiShow path {\n    stroke: red;\n    stroke-opacity: 0.2;\n  }\n}\n\n#formVoronoi {\n  position: absolute;\n  right: 30px;\n  top: 20px;\n}\n","filePath":"src/demos/multiline-voronoi/multiline-voronoi.module.css"}],"demoTS":[{"content":"import { select } from \"d3\"\n\nimport { MultilineVoronoiChart } from \"./multiline-voronoi-chart\"\nimport {\n  CONTAINER_ID,\n  SHOW_VORONOI_ID,\n  fetchData,\n  getChartConfig,\n} from \"./multiline-voronoi-chart-config\"\nimport * as styles from \"./multiline-voronoi.module.css\"\n\nconst main = async () => {\n  const { cities, months } = await fetchData()\n  const chartConfig = getChartConfig({ cities, months })\n\n  const chart = new MultilineVoronoiChart(chartConfig)\n\n  const form = document.getElementById(styles.formVoronoi) as HTMLElement\n  const chartEl = document.getElementById(CONTAINER_ID) as HTMLElement\n\n  chartEl.appendChild(form)\n\n  select(`#${SHOW_VORONOI_ID}`)\n    .property(\"disabled\", false)\n    .on(\"change\", (mouseEvent: MouseEvent) => {\n      chart.setVoronoi((mouseEvent.target as HTMLInputElement).checked || false)\n    })\n}\n\nexport { CONTAINER_ID, SHOW_VORONOI_ID }\n\nexport default main\n","filePath":"src/demos/multiline-voronoi/multiline-voronoi.ts"},{"content":"import { timeFormat, timeParse, tsv } from \"d3\"\n\nimport { ChartConfig } from \"./multiline-voronoi-chart\"\n\nconst CONTAINER_ID = \"chart\"\nconst SHOW_VORONOI_ID = \"show-voronoi\"\n\ntype InitialDataItem = {\n  [monthKey: string]: string\n  name: string\n}\n\ntype CityMetric = {\n  cityName: string\n  date: Date\n  employmentRate: number\n}\n\ntype City = {\n  metrics: CityMetric[]\n  name: string\n}\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nconst formatStr = \"%Y-%m\"\n\nconst fetchData = async () => {\n  const monthFormat = timeFormat(formatStr)\n  const monthParse = timeParse(formatStr)\n\n  const dataItems = (await tsv(\n    `${ROOT_PATH}data/d3js/multiline-voronoi/data.tsv`\n  )) as unknown as InitialDataItem[]\n\n  const months: Date[] = Object.keys(dataItems[0])\n    .map((v) => monthParse(v)!)\n    .filter(Number)\n\n  const cities: City[] = dataItems.map((initialCity: InitialDataItem) => {\n    const name = initialCity.name\n      .replace(/(msa|necta div|met necta|met div)$/i, \"\")\n      .trim()\n\n    return {\n      metrics: months.map((date: Date) => {\n        const itemKey = monthFormat(date)\n        const { [itemKey as keyof InitialDataItem]: itemValue } = initialCity\n        const employmentRate: number = Number(itemValue) / 100\n\n        return {\n          cityName: name,\n          date,\n          employmentRate,\n        }\n      }),\n      name,\n    }\n  })\n\n  return { cities, months }\n}\n\ntype Config = ChartConfig<City, City[\"metrics\"][number]>\n\nconst getLineId: Config[\"getLineId\"] = (city) => city.name\n\nconst getLinePoints: Config[\"getLinePoints\"] = (city) => city.metrics\nconst getPointYValue: Config[\"getPointYValue\"] = (cityMetric) =>\n  cityMetric.employmentRate\n\nconst getTooltipPart1: Config[\"getTooltipPart1\"] = (cityMetric: CityMetric) =>\n  `${cityMetric.cityName.trim()}: `\n\nconst getTooltipPart2: Config[\"getTooltipPart2\"] = (cityMetric: CityMetric) => {\n  const date = `${\n    monthNames[cityMetric.date.getMonth()]\n  } of ${cityMetric.date.getFullYear()}`\n\n  return ` ${(cityMetric.employmentRate * 100).toFixed(2)}% - ${date}`\n}\n\nconst getLineIdFromPoint: Config[\"getLineIdFromPoint\"] = (cityMetric) =>\n  cityMetric.cityName\n\nconst getPointXValue: Config[\"getPointXValue\"] = (cityMetric) => cityMetric.date\n\nconst getChartConfig = ({\n  cities,\n  months,\n}: {\n  cities: City[]\n  months: Date[]\n}): Config => ({\n  chartTitle: \"US Unemployment Rate\",\n  getLineId,\n  getLineIdFromPoint,\n  getLinePoints,\n  getPointXValue,\n  getPointYValue,\n  getTooltipPart1,\n  getTooltipPart2,\n  lines: cities,\n  rootElId: CONTAINER_ID,\n  times: months,\n})\n\nexport { CONTAINER_ID, SHOW_VORONOI_ID, fetchData, getChartConfig }\n","filePath":"src/demos/multiline-voronoi/multiline-voronoi-chart-config.ts"},{"content":"import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  line as lineD3,\n  max,\n  scaleLinear,\n  scaleOrdinal,\n  scaleTime,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./multiline-voronoi.module.css\"\n\ntype LineId = string\n\ntype ChartConfig<ChartLine, ChartPoint> = Readonly<{\n  chartTitle: string\n  getLineId: (line: ChartLine) => LineId\n  getLineIdFromPoint: (point: ChartPoint) => LineId\n  getLinePoints: (line: ChartLine) => ChartPoint[]\n  getPointXValue: (point: ChartPoint) => Date\n  getPointYValue: (point: ChartPoint) => number\n  getTooltipPart1: (point: ChartPoint) => string\n  getTooltipPart2: (point: ChartPoint) => string\n  lines: ChartLine[]\n  rootElId: string\n  times: Date[]\n}>\n\nconst addFilter = (\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", \"drop-shadow\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 1)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \"1\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst tooltipWidth = 300\nconst tooltipWidthHalf = tooltipWidth / 2\n\nconst buildTooltip = (\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const tooltip = svgG\n    .append(\"g\")\n    .attr(\"class\", styles.tooltip)\n    .attr(\"transform\", \"translate(-100,-100)\")\n\n  tooltip\n    .append(\"rect\")\n    .attr(\"transform\", \"translate(-150,-50)\")\n    .attr(\"fill\", \"white\")\n    .attr(\"height\", 50)\n    .attr(\"width\", tooltipWidth)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .style(\"filter\", \"url(#drop-shadow)\")\n    .style(\"opacity\", \"0.65\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"cursor\", \"default\")\n\n  tooltip.append(\"text\").attr(\"class\", \"text1\").attr(\"y\", -30)\n  tooltip.append(\"text\").attr(\"class\", \"text2\").attr(\"y\", -10)\n\n  return tooltip\n}\n\ntype ChartElements = Readonly<{\n  circle: Selection<SVGCircleElement, unknown, HTMLElement, unknown>\n  linesWrapper: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  tooltip: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  voronoiGroup: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  xAxis: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  yAxis: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}>\n\nclass MultilineVoronoiChart<ChartLine, ChartPoint> {\n  private readonly config: ChartConfig<ChartLine, ChartPoint>\n  private readonly elements: ChartElements\n  private readonly state: {\n    clickToggle: boolean\n    usedLines: ChartLine[]\n  }\n\n  public constructor(config: ChartConfig<ChartLine, ChartPoint>) {\n    this.config = config\n\n    const svg = select(`#${this.config.rootElId}`).append(\"svg\")\n    const svgG = svg.append(\"g\")\n    const xAxis = svgG.append(\"g\").attr(\"class\", `${styles.axis} axis--x`)\n    const yAxis = svgG.append(\"g\").attr(\"class\", `${styles.axis} axis--y`)\n\n    svgG\n      .append(\"text\")\n      .attr(\"x\", 20)\n      .attr(\"dy\", \".32em\")\n      .style(\"font-weight\", \"bold\")\n      .text(this.config.chartTitle)\n\n    addFilter(svgG)\n\n    const linesWrapper = svgG.append(\"g\").attr(\"class\", styles.lines)\n    const circle = svgG.append(\"circle\").attr(\"r\", 3.5)\n    const voronoiGroup = svgG.append(\"g\").attr(\"class\", styles.voronoi)\n\n    const tooltip = buildTooltip(svgG)\n\n    this.elements = {\n      circle,\n      linesWrapper,\n      svg,\n      svgG,\n      tooltip,\n      voronoiGroup,\n      xAxis,\n      yAxis,\n    }\n\n    this.state = {\n      clickToggle: false,\n      usedLines: this.config.lines,\n    }\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  private static getMargin(width: number) {\n    const defaultMargin = {\n      bottom: 70,\n      left: 80,\n      right: 70,\n      top: 60,\n    }\n\n    if (width < 530) {\n      return {\n        ...defaultMargin,\n        left: 35,\n        right: 5,\n      }\n    }\n\n    return defaultMargin\n  }\n\n  public setVoronoi(newValue: boolean) {\n    this.elements.voronoiGroup.classed(styles.voronoiShow, newValue)\n  }\n\n  private render() {\n    const {\n      config: { lines, rootElId, times },\n      elements,\n    } = this\n    const color = scaleOrdinal(schemePastel2)\n\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.multilineVoronoiChart)\n\n    const { width: elWidth } = rootEl.getBoundingClientRect()\n    const margin = MultilineVoronoiChart.getMargin(elWidth)\n    const width =\n      rootEl.getBoundingClientRect().width - margin.left - margin.right\n    const isSmallDevice = width < 530\n\n    const height = 500 - margin.top - margin.bottom\n\n    const xScale = scaleTime().range([0, width])\n    const yScale = scaleLinear().range([height, 0])\n\n    const lineXTransformer = (point: ChartPoint) =>\n      xScale(this.config.getPointXValue(point))\n    const lineYTransformer = (point: ChartPoint) =>\n      yScale(this.config.getPointYValue(point))\n\n    const lineIdToElement: { [lineId: string]: SVGPathElement } = {}\n\n    elements.svg\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n\n    elements.svgG.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    xScale.domain(extent<Date>(times) as [Date, Date])\n    yScale\n      .domain([\n        0,\n        max(lines, (line) =>\n          max(this.config.getLinePoints(line), this.config.getPointYValue)\n        ) as number,\n      ])\n      .nice()\n\n    elements.xAxis\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(axisBottom(xScale).ticks(isSmallDevice ? 2 : undefined))\n\n    elements.yAxis.call(axisLeft(yScale).ticks(10, \"%\"))\n\n    const line = lineD3<ChartPoint>().x(lineXTransformer).y(lineYTransformer)\n\n    const {\n      config,\n      state: { usedLines },\n    } = this\n\n    const updatedLines = elements.linesWrapper.selectAll(\"path\").data(usedLines)\n\n    updatedLines.enter().append(\"path\").style(\"filter\", \"url(#drop-shadow)\")\n    updatedLines.exit().remove()\n\n    elements.linesWrapper\n      .selectAll<SVGPathElement, ChartLine>(\"path\")\n      .attr(\"d\", function generateLine(usedLine) {\n        const usedLineId = config.getLineId(usedLine)\n\n        lineIdToElement[usedLineId] = this\n\n        const points = config.getLinePoints(usedLine)\n\n        return line(points)\n      })\n      .style(\"stroke\", (...[, lineIndex]) => color(lineIndex.toString()))\n\n    const mouseout = (...[, point]: [unknown, ChartPoint]) => {\n      const lineId = config.getLineIdFromPoint(point)\n      const { [lineId]: linePath } = lineIdToElement\n\n      select(linePath).classed(styles.lineHover, false)\n\n      return elements.tooltip.attr(\"transform\", \"translate(-100,-100)\")\n    }\n\n    const clicked = (...[, point]: [unknown, ChartPoint]) => {\n      this.state.clickToggle = !this.state.clickToggle\n\n      this.state.usedLines = (() => {\n        if (this.state.clickToggle) {\n          const lineData = lines.find(\n            (lineItem) =>\n              config.getLineId(lineItem) === config.getLineIdFromPoint(point)\n          ) as ChartLine\n\n          return [lineData]\n        }\n\n        return lines\n      })()\n\n      elements.tooltip.on(\"mouseover\", null).on(\"click\", null)\n\n      this.render()\n    }\n\n    const mouseover = (...[, point]: [unknown, ChartPoint]) => {\n      const lineId = config.getLineIdFromPoint(point)\n      const { [lineId]: linePath } = lineIdToElement\n\n      select(linePath).classed(styles.lineHover, true)\n      ;(linePath.parentNode as SVGGElement).appendChild(linePath)\n\n      const rawTranslateX = lineXTransformer(point)\n      const rawTranslateY = lineYTransformer(point)\n\n      const translateX = Math.min(\n        width - tooltipWidth / 2,\n        Math.max(tooltipWidthHalf, rawTranslateX)\n      )\n      const translateY = rawTranslateY\n\n      elements.tooltip\n        .attr(\"transform\", `translate(${translateX},${translateY})`)\n        .on(\"mouseover\", () => {\n          mouseover(null, point)\n        })\n        .on(\"click\", () => {\n          clicked(null, point)\n        })\n      elements.circle.attr(\n        \"transform\",\n        `translate(${rawTranslateX},${rawTranslateY})`\n      )\n\n      elements.tooltip.select(\".text1\").text(config.getTooltipPart1(point))\n      elements.tooltip.select(\".text2\").text(config.getTooltipPart2(point))\n    }\n\n    const flatPoints = usedLines.reduce<ChartPoint[]>((...[acc, usedLine]) => {\n      const points = config.getLinePoints(usedLine)\n\n      points.forEach((point) => {\n        acc.push(point)\n      })\n\n      return acc\n    }, [])\n\n    const voronoi = Delaunay.from(\n      flatPoints,\n      lineXTransformer,\n      lineYTransformer\n    ).voronoi([\n      -margin.left,\n      -margin.top,\n      width + margin.right,\n      height + margin.bottom,\n    ])\n\n    const updatedVoronoi = this.elements.voronoiGroup\n      .selectAll<SVGPathElement, ChartPoint>(\"path\")\n      .data(\n        flatPoints,\n        (point) =>\n          `${config.getLineIdFromPoint(point)}-${config.getPointXValue(point)}`\n      )\n\n    updatedVoronoi.enter().append(\"path\")\n    updatedVoronoi.exit().remove()\n\n    this.elements.voronoiGroup\n      .selectAll<SVGPathElement, ChartPoint>(\"path\")\n      .attr(\"d\", (...[, pointIndex]) => voronoi.renderCell(pointIndex))\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseout\", mouseout)\n      .on(\"click\", clicked)\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nexport { MultilineVoronoiChart, ChartConfig }\n","filePath":"src/demos/multiline-voronoi/multiline-voronoi-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  SHOW_VORONOI_ID,\n} from \"@/demos/multiline-voronoi/multiline-voronoi\"\nimport * as styles from \"@/demos/multiline-voronoi/multiline-voronoi.module.css\"\n\nconst MultilineVoronoi = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form id={styles.formVoronoi}>\n      <input id={SHOW_VORONOI_ID} type=\"checkbox\" />{\" \"}\n      <label htmlFor={SHOW_VORONOI_ID}>Show Voronoi lines</label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MultilineVoronoi\n","type":"tsx"}},"key":"multiline-voronoi"},"meta":{"description":"Multiline chart example using D3.js, with Voronoi functionality and the ability to show a single line after it is clicked. The label and style are also changed."}}},
    "staticQueryHashes": []}