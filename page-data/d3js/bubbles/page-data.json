{"componentChunkName":"component---src-pages-d-3-js-bubbles-js","path":"/d3js/bubbles/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Bubbles","notes":["Using the <a href=\"https://github.com/novus/nvd3\" target=\"_blank\">NV3D</a> extension for D3JS","Data taken from the Nike API (via the Codepen)","You can click the \"Maginify\" button and click a point to zoom the chart"],"sources":["http://codepen.io/linghzang3/pen/GFdzh"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"const fetchScript = (src: string) =>\n  new Promise((resolve) => {\n    const script = document.createElement(\"script\")\n\n    script.setAttribute(\"type\", \"text/javascript\")\n    script.setAttribute(\"src\", src)\n    script.onload = resolve\n\n    document.body.appendChild(script)\n  })\n\nconst fetchLink = (href: string) =>\n  new Promise((resolve) => {\n    const link = document.createElement(\"link\")\n\n    link.onload = resolve\n\n    link.href = href\n    link.setAttribute(\"rel\", \"stylesheet\")\n    link.setAttribute(\"type\", \"text/css\")\n\n    document.head.appendChild(link)\n  })\n\nconst fetchDependencies = async () => {\n  await Promise.all([\n    fetchLink(`${ROOT_PATH}vendors/nvd3/nv.d3.min.css`),\n    (async () => {\n      await fetchScript(`${ROOT_PATH}vendors/d3/d3.min.js`)\n      await fetchScript(`${ROOT_PATH}vendors/nvd3/nv.d3.min.js`)\n    })(),\n  ])\n}\n\ntype JsonData = {\n  data: Array<{\n    activityId: string\n    activityTimeZone: string\n    activityType: string\n    deviceType: string\n    links: unknown\n    metricSummary: {\n      calories: string\n      distance: string\n      duration: string\n      fuel: string\n      steps: string\n    }\n    metrics: unknown\n    startTime: string\n    status: string\n    tags: unknown\n  }>\n}\n\nconst durationToMinutes = (str: string) => {\n  const strParts = str.split(\":\")\n\n  return (\n    60 * Number(strParts[0]) + Number(strParts[1]) + Number(strParts[2]) / 60\n  )\n}\n\nconst margin = {\n  bottom: 100,\n  left: 100,\n  right: 100,\n  top: 100,\n}\n\nconst fetchData = async () => {\n  const data = await fetch(`${ROOT_PATH}data/d3js/bubbles/data.json`)\n  const jsonData = await data.json()\n\n  return jsonData\n}\n\ntype RenderChart = (o: { rootElId: string; jsonData: JsonData }) => void\n\nconst renderChart: RenderChart = ({ rootElId, jsonData }) => {\n  const { d3, nv } = window as any\n\n  const { width } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n\n  const color = d3.scale.category20b()\n\n  const chartData = [\n    {\n      key: \"Data\",\n      values: jsonData.data.map((d, i, arr) => {\n        const distance = +d.metricSummary.distance\n        const time = durationToMinutes(d.metricSummary.duration)\n        const pace = time / distance\n\n        return {\n          color: color(distance),\n          data: d,\n          size: distance,\n          x: arr.length - i,\n          y: pace,\n        }\n      }),\n    },\n  ]\n\n  type ChartData = typeof chartData\n  type ChartDataItem = ChartData[0][\"values\"][0]\n\n  const chart = nv.models.scatterChart()\n\n  chart.margin(margin)\n\n  nv.utils.windowResize(chart.update)\n\n  chart.forceY([4.5, 6.5]).forceX([0, 135])\n\n  chart.tooltipContent(\n    (_key: unknown, _x: unknown, _y: unknown, obj: { point: ChartDataItem }) =>\n      `${obj.point.size.toFixed(1)} km - ${obj.point.data.deviceType}`\n  )\n  chart.xAxis\n    .axisLabelDistance(45)\n    .tickFormat(d3.format(\"f\"))\n    .axisLabel(\"Person Number\")\n  chart.yAxis\n    .tickFormat(d3.format(\".2f\"))\n    .axisLabelDistance(10)\n    .axisLabel(\"Pace (min/km)\")\n\n  d3.select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .datum(chartData)\n    .call(chart)\n}\n\nconst main = async () => {\n  const [jsonData] = await Promise.all([fetchData(), fetchDependencies()])\n\n  renderChart({\n    jsonData,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"ts"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/bubbles/bubbles\"\n\nimport \"@/demos/bubbles/bubbles.styl\"\n\nconst Bubbles = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"bubbles-chart\" id=\"chart\" style={{ height: 600 }} />\n  </Demo>\n)\n\nexport default Bubbles\n","styl":".bubbles-chart\n    .nvd3 .nv-axis.nv-x path.domain\n        stroke-opacity .75\n    .nvd3 .nv-axis line\n        stroke-opacity .4"},"key":"bubbles"}}},"staticQueryHashes":[]}