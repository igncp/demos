{
    "componentChunkName": "component---src-pages-d-3-js-trend-line-tsx",
    "path": "/d3js/trend-line/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.tsv"],"docs":[],"isCompleted":true,"name":"Trend line","notes":["Added both line animations","Changed y scale domain"],"sources":["http://codepen.io/arundhaj/pen/ouyjd","http://big-elephants.com/2014-06/unrolling-line-charts-d3js/"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".trendLineChart {\n  .axis {\n    font: 10px sans-serif;\n  }\n\n  .axis path,\n  line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #000;\n  }\n\n  .line {\n    fill: none;\n    stroke: steelblue;\n    stroke-width: 1.5px;\n  }\n\n  .rline {\n    fill: none;\n    stroke: red;\n    stroke-dasharray: 5, 5;\n    stroke-width: 1.5px;\n  }\n}\n","filePath":"src/demos/trend-line/trend-line.module.css"}],"demoTS":[{"content":"import { selectAll } from \"d3\"\n\nimport { TrendLineChart } from \"./trend-line-chart\"\nimport {\n  CONTAINER_ID,\n  fetchData,\n  getChartConfig,\n} from \"./trend-line-chart-config\"\n\nconst main = async () => {\n  const lineData = await fetchData()\n\n  const getIsZoomed = () =>\n    (document.querySelector('input[value=\"zoom\"]') as HTMLInputElement).checked\n\n  const chartConfig = getChartConfig({\n    initialZoomed: getIsZoomed(),\n    lineData,\n  })\n\n  const chart = new TrendLineChart(chartConfig)\n\n  selectAll('input[name=\"mode\"]').on(\"change\", () => {\n    const isZoomed = getIsZoomed()\n\n    chart.renderContent(isZoomed)\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/trend-line/trend-line.ts"},{"content":"import { timeParse, tsv } from \"d3\"\n\nimport { ChartConfig } from \"./trend-line-chart\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype InitialDataItem = {\n  occurred: string\n  value: string // eslint-disable-line id-denylist\n}\n\ntype DataItem = {\n  arbitraryValue: number\n  occurred: Date\n}\n\nconst createLinearRegression = (lineData: DataItem[]) => {\n  const linearRegression: {\n    intercept?: number\n    r2?: number\n    slope?: number\n  } = {}\n  const { length: itemsNum } = lineData\n\n  let sumX = 0\n  let sumY = 0\n  let sumXY = 0\n  let sumXX = 0\n  let sumYY = 0\n\n  lineData.forEach((lineItem) => {\n    sumY += lineItem.arbitraryValue\n    sumYY += lineItem.arbitraryValue * lineItem.arbitraryValue\n    sumXY += lineItem.occurred.getTime() * lineItem.arbitraryValue\n\n    sumX += lineItem.occurred.getTime()\n    sumXX += lineItem.occurred.getTime() * lineItem.occurred.getTime()\n  })\n\n  linearRegression.slope =\n    (itemsNum * sumXY - sumX * sumY) / (itemsNum * sumXX - sumX * sumX)\n  linearRegression.intercept = (sumY - linearRegression.slope * sumX) / itemsNum\n  linearRegression.r2 = Math.pow(\n    (itemsNum * sumXY - sumX * sumY) /\n      Math.sqrt(\n        (itemsNum * sumXX - sumX * sumX) * (itemsNum * sumYY - sumY * sumY)\n      ),\n    2\n  )\n\n  return linearRegression\n}\n\nconst fetchData = async (): Promise<DataItem[]> => {\n  const response = (await tsv(\n    `${ROOT_PATH}data/d3js/trend-line/data.tsv`\n  )) as InitialDataItem[]\n\n  const timeFormat = timeParse(\"%Y-%m-%d\")\n\n  return response.map((responseItem) => ({\n    arbitraryValue: +responseItem.value,\n    occurred: timeFormat(responseItem.occurred)!,\n  }))\n}\n\ntype Config = ChartConfig<DataItem>\n\nconst getFullLineX: Config[\"getFullLineX\"] = (lineItem) => lineItem.occurred\nconst getFullLineY: Config[\"getFullLineY\"] = (lineItem) =>\n  lineItem.arbitraryValue\nconst getDashedLineX: Config[\"getDashedLineX\"] = (lineItem) => lineItem.occurred\n\nconst getChartConfig = ({\n  initialZoomed,\n  lineData,\n}: {\n  initialZoomed: boolean\n  lineData: DataItem[]\n}): Config => {\n  const linearRegression = createLinearRegression(lineData)\n  const getDashedLineY: Config[\"getDashedLineY\"] = (lineItem) =>\n    linearRegression.intercept! + linearRegression.slope! * +lineItem.occurred\n  const chartText = `Slope: ${linearRegression.slope!.toExponential(3)}`\n\n  return {\n    chartText,\n    getDashedLineX,\n    getDashedLineY,\n    getFullLineX,\n    getFullLineY,\n    initialZoomed,\n    lineData,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { CONTAINER_ID, fetchData, getChartConfig }\n","filePath":"src/demos/trend-line/trend-line-chart-config.ts"},{"content":"import {\n  Line,\n  Selection,\n  axisBottom,\n  axisLeft,\n  line as d3Line,\n  extent,\n  max,\n  min,\n  range,\n  scaleLinear,\n  scaleQuantile,\n  scaleTime,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./trend-line.module.css\"\n\nconst margin = {\n  bottom: 50,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst height = 500 - margin.top - margin.bottom\n\nconst animationTime = 2000\n\nconst getInterpolation =\n  <ChartData>({\n    line,\n    lineData,\n  }: {\n    line: Line<ChartData>\n    lineData: ChartData[]\n  }) =>\n  () => {\n    const interpolate = scaleQuantile()\n      .domain([0, 1])\n      .range(range(1, lineData.length + 1))\n\n    return (t: number): string => {\n      const interpolatedLine = lineData.slice(0, interpolate(t))\n\n      return line(interpolatedLine)!\n    }\n  }\n\ntype ChartConfig<ChartData> = {\n  chartText: string\n  getDashedLineX: (lineData: ChartData) => Date\n  getDashedLineY: (lineData: ChartData) => number\n  getFullLineX: (lineData: ChartData) => Date\n  getFullLineY: (lineData: ChartData) => number\n  initialZoomed: boolean\n  lineData: ChartData[]\n  rootElId: string\n}\n\ntype ChartElements = {\n  chartText: Selection<SVGTextElement, unknown, HTMLElement, undefined>\n  dashedLine: Selection<SVGPathElement, unknown, HTMLElement, undefined>\n  fullLine: Selection<SVGPathElement, unknown, HTMLElement, undefined>\n  rootEl: Selection<HTMLElement, unknown, HTMLElement, undefined>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, undefined>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, undefined>\n  xAxis: Selection<SVGGElement, unknown, HTMLElement, undefined>\n  yAxis: Selection<SVGGElement, unknown, HTMLElement, undefined>\n}\n\nclass TrendLineChart<ChartData> {\n  private readonly elements: ChartElements\n  private readonly config: ChartConfig<ChartData>\n  private readonly state: { isZoomed: boolean } = {\n    isZoomed: false,\n  }\n\n  public constructor(config: ChartConfig<ChartData>) {\n    const { initialZoomed, rootElId } = config\n\n    const rootEl = select<HTMLElement, unknown>(`#${rootElId}`)\n    const svg = rootEl.append(\"svg\")\n    const svgG = svg.append(\"g\")\n    const xAxis = svgG.append(\"g\")\n    const yAxis = svgG.append(\"g\")\n    const fullLine = svgG.append(\"path\")\n    const dashedLine = svgG.append(\"path\")\n    const chartText = svgG.append(\"text\")\n\n    this.elements = {\n      chartText,\n      dashedLine,\n      fullLine,\n      rootEl,\n      svg,\n      svgG,\n      xAxis,\n      yAxis,\n    }\n\n    this.config = config\n    this.renderContent(initialZoomed)\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public renderContent(isZoomed: boolean) {\n    this.state.isZoomed = isZoomed\n\n    this.render(true)\n  }\n\n  private render(withAnimation: boolean) {\n    const finalAnimationTime = withAnimation ? animationTime : 0\n    const {\n      config: {\n        getDashedLineX,\n        getDashedLineY,\n        getFullLineX,\n        getFullLineY,\n        lineData,\n        rootElId,\n      },\n      config,\n      elements: {\n        chartText,\n        dashedLine,\n        fullLine,\n        svg,\n        svgG,\n        xAxis: xAxisSel,\n        yAxis: yAxisSel,\n      },\n      state: { isZoomed },\n    } = this\n    const container = document.getElementById(rootElId) as HTMLElement\n\n    container.classList.add(styles.trendLineChart)\n\n    const width =\n      container.getBoundingClientRect().width - margin.left - margin.right\n\n    svg\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n    svgG.attr(\"transform\", `translate(${margin.left},${margin.right})`)\n\n    const x = scaleTime()\n      .range([0, width])\n      .domain(extent(lineData, getFullLineX) as [Date, Date])\n    const y = scaleLinear()\n      .range([height, 0])\n      .domain([\n        isZoomed ? (min(lineData, getFullLineY) as number) : 0,\n        max(lineData, getFullLineY) as number,\n      ])\n    const xAxis = axisBottom(x)\n    const yAxis = axisLeft(y)\n\n    const line = d3Line<ChartData>()\n      .x((lineItem) => x(getFullLineX(lineItem)))\n      .y((lineItem) => y(getFullLineY(lineItem)))\n\n    xAxisSel\n      .attr(\"class\", `x ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis)\n    yAxisSel.attr(\"class\", `y ${styles.axis}`).call(yAxis)\n\n    fullLine\n      .datum(lineData)\n      .interrupt()\n      .transition()\n      .duration(finalAnimationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.line)\n\n    const regressionLine = d3Line<ChartData>()\n      .x((lineItem) => x(getDashedLineX(lineItem)))\n      .y((lineItem) => y(getDashedLineY(lineItem)))\n\n    dashedLine\n      .datum(lineData)\n      .attr(\"d\", null)\n      .interrupt()\n      .transition()\n      .delay(finalAnimationTime)\n      .duration(finalAnimationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line: regressionLine,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.rline)\n\n    chartText\n      .attr(\"transform\", `translate(${width * 0.7},${height * 0.7})`)\n      .style(\"opacity\", finalAnimationTime ? 0 : 1)\n      .interrupt()\n      .transition()\n      .delay(finalAnimationTime * 2)\n      .text(config.chartText)\n      .style(\"opacity\", 1)\n  }\n\n  private readonly handleResize = () => {\n    this.render(false)\n  }\n}\n\nexport { TrendLineChart, ChartConfig }\n","filePath":"src/demos/trend-line/trend-line-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/trend-line/trend-line\"\n\nconst TrendLine = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      <label>\n        <input defaultChecked name=\"mode\" type=\"radio\" value=\"zoom\" /> Zoom\n      </label>\n      <label>\n        <input name=\"mode\" type=\"radio\" value=\"normal\" /> Normal\n      </label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default TrendLine\n","type":"tsx"}},"key":"trend-line"},"meta":{"description":"Example of trend-line using D3.js, with extra animations."}}},
    "staticQueryHashes": []}