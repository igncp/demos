{"componentChunkName":"component---src-pages-d-3-js-trend-line-tsx","path":"/d3js/trend-line/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.tsv"],"docs":[],"isCompleted":true,"name":"Trend line","notes":["Added both line animations","Changed y scale domain"],"sources":["http://codepen.io/arundhaj/pen/ouyjd","http://big-elephants.com/2014-06/unrolling-line-charts-d3js/"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".trendLineChart {\n  .axis {\n    font: 10px sans-serif;\n  }\n\n  .axis path,\n  line {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #000;\n  }\n\n  .line {\n    fill: none;\n    stroke: steelblue;\n    stroke-width: 1.5px;\n  }\n\n  .rline {\n    fill: none;\n    stroke: red;\n    stroke-dasharray: 5, 5;\n    stroke-width: 1.5px;\n  }\n}\n","fileName":"trend-line.module.css"}],"demoTS":[{"content":"import {\n  Line,\n  axisBottom,\n  axisLeft,\n  line as d3Line,\n  extent,\n  max,\n  min,\n  range,\n  scaleLinear,\n  scaleQuantile,\n  scaleTime,\n  select,\n  selectAll,\n  timeParse,\n  tsv,\n} from \"d3\"\n\nimport * as styles from \"./trend-line.module.css\"\n\ntype InitialDataItem = {\n  occurred: string\n  value: string // eslint-disable-line id-denylist\n}\n\ntype DataItem = {\n  arbitraryValue: number\n  occurred: Date\n}\n\nconst fetchData = async (): Promise<DataItem[]> => {\n  const response = (await tsv(\n    `${ROOT_PATH}data/d3js/trend-line/data.tsv`\n  )) as InitialDataItem[]\n\n  const timeFormat = timeParse(\"%Y-%m-%d\")\n\n  return response.map((responseItem) => ({\n    arbitraryValue: +responseItem.value,\n    occurred: timeFormat(responseItem.occurred)!,\n  }))\n}\n\nconst margin = {\n  bottom: 50,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst height = 500 - margin.top - margin.bottom\n\nconst animationTime = 2000\n\nconst getInterpolation = ({\n  line,\n  lineData,\n}: {\n  line: Line<DataItem>\n  lineData: DataItem[]\n}) => () => {\n  const interpolate = scaleQuantile()\n    .domain([0, 1])\n    .range(range(1, lineData.length + 1))\n\n  return (t: number): string => {\n    const interpolatedLine = lineData.slice(0, interpolate(t))\n\n    return line(interpolatedLine)!\n  }\n}\n\nconst createLinearRegression = (lineData: DataItem[]) => {\n  const linearRegression: {\n    intercept?: number\n    r2?: number\n    slope?: number\n  } = {}\n  const { length: itemsNum } = lineData\n\n  let sumX = 0\n  let sumY = 0\n  let sumXY = 0\n  let sumXX = 0\n  let sumYY = 0\n\n  lineData.forEach((lineItem) => {\n    sumY += lineItem.arbitraryValue\n    sumYY += lineItem.arbitraryValue * lineItem.arbitraryValue\n    sumXY += lineItem.occurred.getTime() * lineItem.arbitraryValue\n\n    sumX += lineItem.occurred.getTime()\n    sumXX += lineItem.occurred.getTime() * lineItem.occurred.getTime()\n  })\n\n  linearRegression.slope =\n    (itemsNum * sumXY - sumX * sumY) / (itemsNum * sumXX - sumX * sumX)\n  linearRegression.intercept = (sumY - linearRegression.slope * sumX) / itemsNum\n  linearRegression.r2 = Math.pow(\n    (itemsNum * sumXY - sumX * sumY) /\n      Math.sqrt(\n        (itemsNum * sumXX - sumX * sumX) * (itemsNum * sumYY - sumY * sumY)\n      ),\n    2\n  )\n\n  return linearRegression\n}\n\nconst renderGraph = ({\n  initialZoomed,\n  lineData,\n  rootElId,\n}: {\n  initialZoomed: boolean\n  lineData: DataItem[]\n  rootElId: string\n}) => {\n  const container = document.getElementById(rootElId) as HTMLElement\n\n  container.classList.add(styles.trendLineChart)\n\n  const width =\n    container.getBoundingClientRect().width - margin.left - margin.right\n\n  const renderContent = (isZoomed: boolean) => {\n    const svg = select(`#${rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.right})`)\n\n    const x = scaleTime().range([0, width])\n    const y = scaleLinear().range([height, 0])\n    const xAxis = axisBottom(x)\n    const yAxis = axisLeft(y)\n\n    const line = d3Line<DataItem>()\n      .x((lineItem) => x(lineItem.occurred))\n      .y((lineItem) => y(lineItem.arbitraryValue))\n\n    x.domain(extent(lineData, (lineItem) => lineItem.occurred) as [Date, Date])\n    y.domain([\n      isZoomed\n        ? (min(lineData, (lineItem) => lineItem.arbitraryValue) as number)\n        : 0,\n      max(lineData, (lineItem) => lineItem.arbitraryValue) as number,\n    ])\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", `x ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis)\n    svg.append(\"g\").attr(\"class\", `y ${styles.axis}`).call(yAxis)\n\n    svg\n      .append(\"path\")\n      .datum(lineData)\n      .transition()\n      .duration(animationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.line)\n\n    const linearRegression = createLinearRegression(lineData)\n\n    const regressionLine = d3Line<DataItem>()\n      .x((lineItem) => x(lineItem.occurred))\n      .y((lineItem) =>\n        y(\n          linearRegression.intercept! +\n            linearRegression.slope! * +lineItem.occurred\n        )\n      )\n\n    svg\n      .append(\"path\")\n      .datum(lineData)\n      .transition()\n      .delay(animationTime)\n      .duration(animationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line: regressionLine,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.rline)\n\n    svg\n      .append(\"text\")\n      .attr(\"transform\", `translate(${width * 0.7},${height * 0.7})`)\n      .style(\"opacity\", 0)\n      .transition()\n      .delay(animationTime * 2)\n      .text(`Slope: ${linearRegression.slope!.toExponential(3)}`)\n      .style(\"opacity\", 1)\n  }\n\n  renderContent(initialZoomed)\n\n  return {\n    renderContent,\n  }\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n  const lineData = await fetchData()\n\n  const getIsZoomed = () =>\n    (document.querySelector('input[value=\"zoom\"]') as HTMLInputElement).checked\n\n  const { renderContent } = renderGraph({\n    initialZoomed: getIsZoomed(),\n    lineData,\n    rootElId,\n  })\n\n  selectAll('input[name=\"mode\"]').on(\"change\", () => {\n    const isZoomed = getIsZoomed()\n\n    renderContent(isZoomed)\n  })\n}\n\nexport default main\n","fileName":"trend-line.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/trend-line/trend-line\"\n\nconst TrendLine = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      <label>\n        <input defaultChecked name=\"mode\" type=\"radio\" value=\"zoom\" /> Zoom\n      </label>\n      <label>\n        <input name=\"mode\" type=\"radio\" value=\"normal\" /> Normal\n      </label>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default TrendLine\n","type":"tsx"}},"key":"trend-line"},"meta":{"description":"Example of trend-line using D3.js, with extra animations."}}},"staticQueryHashes":[]}