{
    "componentChunkName": "component---src-pages-d-3-js-collapsible-tree-tsx",
    "path": "/d3js/collapsible-tree/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Collapsible Tree","notes":[],"sources":["http://bl.ocks.org/mbostock/4339083","https://observablehq.com/@d3/collapsible-tree"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".collapsibleTreeChart {\n  .node {\n    cursor: pointer;\n\n    circle {\n      fill: #fff;\n      stroke: steelblue;\n      stroke-width: 1.5px;\n    }\n\n    text {\n      font: 10px sans-serif;\n    }\n  }\n\n  .link {\n    fill: none;\n    stroke: #ccc;\n    stroke-width: 1.5px;\n  }\n}\n","fileName":"collapsible-tree.module.css"}],"demoTS":[{"content":"import { renderChart } from \"./collapsible-tree-chart\"\nimport {\n  CONTAINER_ID,\n  createChartConfig,\n  fetchData,\n} from \"./collapsible-tree-chart-config\"\n\nconst main = async () => {\n  const rootData = await fetchData()\n\n  const chartConfig = createChartConfig(rootData)\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","fileName":"collapsible-tree.ts"},{"content":"import { json } from \"d3\"\n\nimport { ChartConfig, NodeShape } from \"./collapsible-tree-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\ntype RawData = {\n  name: string\n}\n\ntype BaseData = RawData & {\n  id: number\n}\n\ntype RawNode = NodeShape<BaseData>\ntype BaseNode = NodeShape<BaseData>\n\nconst getBaseNode = ({\n  context,\n  rawNode,\n}: {\n  context: { id: number }\n  rawNode: RawNode\n}): BaseNode => {\n  const { id: nodeId } = context\n\n  context.id += 1\n\n  return {\n    ...rawNode,\n    children: (rawNode.children ?? []).map((rawNodeChildren) =>\n      getBaseNode({ context, rawNode: rawNodeChildren })\n    ),\n    id: nodeId,\n  }\n}\n\nexport const fetchData = async (): Promise<BaseNode> => {\n  const rawNode = (await json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as RawNode\n\n  return getBaseNode({ context: { id: 0 }, rawNode })\n}\n\ntype Config = ChartConfig<BaseData>\n\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeId: Config[\"getNodeId\"] = (node) => node.id\n\nexport const createChartConfig = (rootData: BaseNode): Config => ({\n  getNodeId,\n  getNodeLabel,\n  rootData,\n  rootElId: CONTAINER_ID,\n})\n","fileName":"collapsible-tree-chart-config.ts"},{"content":"import {\n  D3DragEvent,\n  HierarchyNode,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  Selection,\n  drag,\n  hierarchy,\n  linkHorizontal,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport * as styles from \"./collapsible-tree.module.css\"\n\nexport type NodeShape<Content> = Content & {\n  children?: Array<NodeShape<Content>>\n}\n\ntype DataNode<BaseData> = BaseData &\n  NodeShape<{\n    _children: Array<HierarchyPointNode<DataNode<BaseData>>> | undefined\n    x: number\n    x0: number\n    y: number\n    y0: number\n  }>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\nconst getDataNode = <BaseData>(\n  initialNode: NodeShape<BaseData>\n): DataNode<BaseData> => ({\n  ...initialNode,\n  _children: undefined,\n  children: (initialNode.children ?? []).map((subNode) => getDataNode(subNode)),\n  x: 0,\n  x0: 0,\n  y: 0,\n  y0: 0,\n})\n\nconst setupDrag = <SelectionData>(\n  svgG: Selection<SVGGElement, SelectionData, HTMLElement, unknown>\n) => {\n  const translateOffset = {\n    x: margin.left,\n    y: height / 2,\n  } as const\n\n  const draggedState = {\n    x: 0,\n    y: 0,\n  }\n\n  const dragHandler = drag<SVGSVGElement, unknown>().on(\n    \"drag\",\n    (dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>) => {\n      draggedState.x += dragEvent.dx\n      draggedState.y += dragEvent.dy\n\n      svgG.attr(\n        \"transform\",\n        `translate(${translateOffset.x + draggedState.x},${\n          translateOffset.y + draggedState.y\n        })`\n      )\n    }\n  )\n\n  svgG.attr(\"transform\", `translate(${translateOffset.x},${translateOffset.y})`)\n\n  const svg = select(svgG.node()!.parentNode as SVGSVGElement)\n\n  svg.style(\"cursor\", \"move\").call(dragHandler)\n}\n\nexport type ChartConfig<BaseData> = {\n  getNodeId: (node: DataNode<BaseData>) => number\n  getNodeLabel: (node: DataNode<BaseData>) => string\n  rootData: NodeShape<BaseData>\n  rootElId: string\n}\n\nexport const renderChart = <BaseData>(chartConfig: ChartConfig<BaseData>) => {\n  const { rootData, rootElId } = chartConfig\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  type TreeNode = HierarchyPointNode<DataNode<BaseData>>\n  type TreeLink = HierarchyPointLink<DataNode<BaseData>>\n  type HierarchyDataNode = HierarchyNode<DataNode<BaseData>>\n\n  const dataNodeRoot = getDataNode(rootData)\n\n  const rootHierarchy = hierarchy<DataNode<BaseData>>(dataNodeRoot)\n\n  rootHierarchy.data.x0 = height / 2\n  rootHierarchy.data.y0 = 0\n\n  const tree = treeD3<DataNode<BaseData>>().nodeSize([40, 250])\n\n  const rootTree = tree(rootHierarchy)\n\n  rootTree.descendants().forEach((treeNode: TreeNode) => {\n    treeNode.data._children = treeNode.children\n\n    if (treeNode.depth) {\n      treeNode.children = undefined\n    }\n  })\n\n  const diagonal = linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((diagonalNode) => diagonalNode.y)\n    .y((diagonalNode) => diagonalNode.x)\n\n  const svgG = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n\n  setupDrag(svgG)\n\n  const gLink = svgG\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svgG.append(\"g\").attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(rootHierarchy)\n\n    let left = rootHierarchy\n    let right = rootHierarchy\n\n    rootHierarchy.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) {\n        left = node\n      }\n\n      if (node.data.x > right.data.x) {\n        right = node\n      }\n    })\n\n    const node = gNode\n      .selectAll<SVGGElement, TreeNode>(\"g\")\n      .data(nodes, (treeNode) => chartConfig.getNodeId(treeNode.data))\n\n    const circleDefaultFill = (treeNode: TreeNode) =>\n      treeNode.data._children ? \"green\" : \"red\"\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"cursor\", (treeNode) =>\n        treeNode.data._children ? \"pointer\" : \"default\"\n      )\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (...[, treeNode]) => {\n        treeNode.children = treeNode.children\n          ? undefined\n          : treeNode.data._children\n\n        update(treeNode)\n      })\n      .on(\"mouseenter\", function () {\n        select<SVGGElement, TreeNode>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", (treeNode) =>\n            treeNode.data._children ? \"blue\" : circleDefaultFill(treeNode)\n          )\n      })\n      .on(\"mouseleave\", function () {\n        select<SVGGElement, TreeNode>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .attr(\"fill\", circleDefaultFill)\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"5px\")\n      .attr(\"dx\", (treeNode) => (treeNode.data._children ? \"-10px\" : \"10px\"))\n      .attr(\"x\", (treeNode) => (treeNode.data._children ? -6 : 6))\n      .style(\"font-size\", \"20px\")\n      .attr(\"text-anchor\", (treeNode) =>\n        treeNode.data._children ? \"end\" : \"start\"\n      )\n      .text((treeNode) => chartConfig.getNodeLabel(treeNode.data))\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter)\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", (treeNode) => `translate(${treeNode.y},${treeNode.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (treeLink) => chartConfig.getNodeId(treeLink.target.data))\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const diagonalNode = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return diagonal(diagonalLink)\n      })\n\n    link.merge(linkEnter).transition().duration(duration).attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"d\", () => {\n        const diagonalNode = {\n          x: source.x,\n          y: source.y,\n        }\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return diagonal(diagonalLink)\n      })\n\n    rootTree.eachBefore((treeNode) => {\n      treeNode.data.x0 = treeNode.x\n      treeNode.data.y0 = treeNode.y\n    })\n  }\n\n  update(rootTree)\n}\n","fileName":"collapsible-tree-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","type":"tsx"}},"key":"collapsible-tree"},"meta":{"description":"Collapsible Tree example using D3.js, with circular nodes and styled links. With transitions, it manages the text placing depending if the node is expanded."}}},
    "staticQueryHashes": []}