{"componentChunkName":"component---src-pages-d-3-js-collapsible-tree-js","path":"/d3js/collapsible-tree/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Collapsible Tree","notes":[],"sources":["http://bl.ocks.org/mbostock/4339083"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"const main = () => {\n  const margin = {\n    bottom: 20,\n    left: 120,\n    right: 120,\n    top: 20,\n  }\n  const width = $(\"#chart\").innerWidth() - margin.right - margin.left\n  const height = 800 - margin.top - margin.bottom\n\n  let root = null\n  let i = 0\n\n  const duration = 750\n  const tree = d3.layout.tree().size([height, width])\n\n  const diagonal = d3.svg.diagonal().projection((d) => [d.y, d.x])\n  const svg = d3\n    .select(\"#chart\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  const click = function (d) {\n    if (d.children) {\n      d._children = d.children\n      d.children = null\n    } else {\n      d.children = d._children\n      d._children = null\n    }\n\n    update(d)\n  }\n\n  const update = function (source) {\n    const nodes = tree.nodes(root).reverse()\n    const links = tree.links(nodes)\n\n    nodes.forEach((d) => {\n      d.y = d.depth * 180\n    })\n\n    const node = svg.selectAll(\"g.node\").data(nodes, (d) => {\n      if (!d.id) {\n        d.id = ++i\n      }\n\n      return d.id\n    })\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", () => `translate(${source.y0},${source.x0})`)\n      .on(\"click\", click)\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 1e-6)\n      .style(\"fill\", (d) => {\n        if (d._children) {\n          return \"lightsteelblue\"\n        }\n\n        return \"#fff\"\n      })\n    nodeEnter\n      .append(\"text\")\n      .attr(\"x\", (d) => {\n        if (d.children || d._children) {\n          return -10\n        }\n\n        return 10\n      })\n      .attr(\"dy\", \".35em\")\n      .attr(\"text-anchor\", (d) => {\n        if (d.children || d._children) {\n          return \"end\"\n        }\n\n        return \"start\"\n      })\n      .text((d) => d.name)\n      .style(\"fill-opacity\", 1e-6)\n\n    const nodeUpdate = node\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", (d) => `translate(${d.y},${d.x})`)\n\n    nodeUpdate\n      .select(\"circle\")\n      .attr(\"r\", 4.5)\n      .style(\"fill\", (d) => {\n        if (d._children) {\n          return \"lightsteelblue\"\n        }\n\n        return \"#fff\"\n      })\n    nodeUpdate.select(\"text\").style(\"fill-opacity\", 1)\n\n    const nodeExit = node\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .remove()\n\n    nodeExit.select(\"circle\").attr(\"r\", 1e-6)\n    nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6)\n\n    const link = svg.selectAll(\"path.link\").data(links, (d) => d.target.id)\n\n    link\n      .enter()\n      .insert(\"path\", \"g\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", () => {\n        const o = {\n          x: source.x0,\n          y: source.y0,\n        }\n\n        return diagonal({\n          source: o,\n          target: o,\n        })\n      })\n    link.transition().duration(duration).attr(\"d\", diagonal)\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"d\", () => {\n        const o = {\n          x: source.x,\n          y: source.y,\n        }\n\n        return diagonal({\n          source: o,\n          target: o,\n        })\n      })\n      .remove()\n\n    nodes.forEach((d) => {\n      d.x0 = d.x\n      d.y0 = d.y\n    })\n  }\n\n  d3.json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`,\n    (_error, data) => {\n      root = data\n      root.x0 = height / 2\n      root.y0 = 0\n\n      const collapse = function (d) {\n        if (d.children) {\n          d._children = d.children\n          d._children.forEach(collapse)\n          d.children = null\n        }\n      }\n\n      root.children.forEach(collapse)\n\n      update(root)\n    }\n  )\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/collapsible-tree/collapsible-tree\"\n\nimport \"@/demos/collapsible-tree/collapsible-tree.styl\"\n\nconst CollapsibleTree = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"collapsible-tree-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","styl":".collapsible-tree-chart\n    .node \n      cursor: pointer;\n    \n\n    .node circle \n      fill: #fff;\n      stroke: steelblue;\n      stroke-width: 1.5px;\n    \n\n    .node text \n      font: 10px sans-serif;\n    \n\n    .link \n      fill: none;\n      stroke: #ccc;\n      stroke-width: 1.5px;"},"key":"collapsible-tree"}}},"staticQueryHashes":[]}