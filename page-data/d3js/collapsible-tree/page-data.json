{"componentChunkName":"component---src-pages-d-3-js-collapsible-tree-tsx","path":"/d3js/collapsible-tree/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[],"name":"Collapsible Tree","notes":[],"sources":["http://bl.ocks.org/mbostock/4339083","https://observablehq.com/@d3/collapsible-tree"],"summary":[],"category":"d3js","files":{"demo":{"content":"import * as d3 from \"d3\"\n\nimport \"./collapsible-tree.styl\"\n\ntype DataNode = {\n  _children: TreeNode[] | undefined\n  children: DataNode[]\n  id: number\n  name: string\n  x0: number\n  x: number\n  y0: number\n  y: number\n}\ntype HierarchyDataNode = d3.HierarchyNode<DataNode>\ntype TreeNode = d3.HierarchyPointNode<DataNode>\ntype TreeLink = d3.HierarchyPointLink<DataNode>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst fetchData = async (): Promise<DataNode> => {\n  const data = (await d3.json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as DataNode\n\n  return data\n}\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\ntype RenderChart = (o: { rootElId: string; rootData: DataNode }) => void\n\nconst renderChart: RenderChart = ({ rootElId, rootData }) => {\n  const root = d3.hierarchy<DataNode>(rootData)\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"collapsible-tree-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  root.data.x0 = height / 2\n  root.data.y0 = 0\n\n  const tree = d3.tree<DataNode>().nodeSize([20, 100])\n\n  const rootTree = tree(root)\n\n  rootTree.descendants().forEach((d: TreeNode, i: number) => {\n    d.data.id = i\n    d.data._children = d.children\n\n    if (d.depth) {\n      d.children = undefined\n    }\n  })\n\n  const diagonal = d3\n    .linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((d: DiagonalNode) => d.y)\n    .y((d: DiagonalNode) => d.x)\n\n  const svg = d3\n    .select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${height / 2})`)\n\n  const gLink = svg\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svg\n    .append(\"g\")\n    .attr(\"cursor\", \"pointer\")\n    .attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(root)\n\n    let left = root\n    let right = root\n\n    root.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) left = node\n      if (node.data.x > right.data.x) right = node\n    })\n\n    const toggleFn = () => {\n      svg.dispatch(\"toggle\")\n    }\n\n    const transition = svg\n      .transition()\n      .duration(duration)\n      .tween(\"resize\", window.ResizeObserver ? null : ((() => toggleFn) as any))\n\n    const node = gNode\n      .selectAll<SVGElement, TreeNode>(\"g\")\n      .data(nodes, (d: TreeNode) => d.data.id)\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (_event, d: TreeNode) => {\n        d.children = d.children ? undefined : d.data._children\n\n        update(d)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 2.5)\n      .attr(\"fill\", (d: TreeNode) => (d.data._children ? \"#555\" : \"#999\"))\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", (d: TreeNode) => (d.data._children ? -6 : 6))\n      .attr(\"text-anchor\", (d: TreeNode) =>\n        d.data._children ? \"end\" : \"start\"\n      )\n      .text((d: TreeNode) => d.data.name)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter as any)\n      .transition(transition as any)\n      .attr(\"transform\", (d: TreeNode) => `translate(${d.y},${d.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (d: TreeLink) => d.target.data.id)\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const o = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    link\n      .merge(linkEnter as any)\n      .transition(transition as any)\n      .attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition(transition as any)\n      .remove()\n      .attr(\"d\", () => {\n        const o = { x: source.x, y: source.y }\n\n        return diagonal({ source: o, target: o })\n      })\n\n    rootTree.eachBefore((d: TreeNode) => {\n      d.data.x0 = d.x\n      d.data.y0 = d.y\n    })\n  }\n\n  update(rootTree)\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n\n  const rootData = await fetchData()\n\n  renderChart({\n    rootData,\n    rootElId,\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","type":"tsx"},"styl":".collapsible-tree-chart\n  .node\n    cursor: pointer\n\n  .node circle\n    fill: #fff\n    stroke-width: 1.5px\n    stroke: steelblue\n\n  .node text\n    font: 10px sans-serif\n\n  .link\n    fill: none\n    stroke-width: 1.5px\n    stroke: #ccc\n"},"key":"collapsible-tree"}}},"staticQueryHashes":[]}