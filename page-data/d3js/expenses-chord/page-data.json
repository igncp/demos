{"componentChunkName":"component---src-pages-d-3-js-expenses-chord-tsx","path":"/d3js/expenses-chord/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":false,"name":"Expenses Chord","notes":["TODO: Review checklist for remaining refactors","TODO: add textPath: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath","performance is not great when displaying all elements due to the large number of elements, canvas may be a better solution"],"sources":["https://datos.gob.es/en/catalogo/ea0010587-distribucion-del-gasto-en-destino-de-cada-pais-de-residencia-segun-comunidad-autonoma-gdve-identificador-api-37671","https://observablehq.com/@d3/directed-chord-diagram"],"summary":[],"category":"d3js","files":{"cssModule":".chartWrapper {\n  border: solid 1px black;\n  overflow: hidden;\n}\n\n.chordGroup {\n  cursor: pointer;\n}\n\n.countriesSelect {\n  margin-right: 20px;\n}\n\n.groupText {\n  fill: black;\n  user-select: none;\n}\n\n.ribbon {\n  cursor: pointer;\n  mix-blend-mode: multiply;\n}\n\ndiv.sliderTime {\n  background: #c4dcf9;\n  margin: 20px 0;\n}\n","demo":[{"content":"import { renderChart } from \"./expenses-chord-chart\"\nimport {\n  ALL_ID,\n  createChartConfig,\n  createInitialState,\n  fetchData,\n  getAreas,\n} from \"./expenses-chord-chart-data\"\n\nconst main = async () => {\n  const chordData = await fetchData()\n  const state = createInitialState()\n  const { countries, regions } = getAreas(chordData)\n  const chartConfig = createChartConfig({\n    chordData,\n    countries,\n    regions,\n    state,\n  })\n\n  const { renderItems } = renderChart(chartConfig)\n\n  $(\"#slider-time\").slider({\n    change: (...[, { value: timeValue }]) => {\n      if (timeValue === 3) {\n        // @TODO: error in this case, find why\n        return\n      }\n\n      state.timeIndex = timeValue!\n      renderItems()\n    },\n    max: chordData[countries[0]][regions[0]].length - 1,\n    min: 0,\n  })\n\n  const setupSelect = ({\n    id,\n    onChange,\n    selectOptions,\n  }: {\n    id: string\n    onChange: (v: string) => void\n    selectOptions: string[]\n  }) => {\n    const selectEl = document.getElementById(id) as HTMLSelectElement\n\n    ;[ALL_ID].concat(selectOptions).forEach((selectOption) => {\n      const option = document.createElement(\"option\")\n\n      option.setAttribute(\"value\", selectOption)\n      option.innerText = selectOption\n\n      selectEl.appendChild(option)\n    })\n\n    selectEl.addEventListener(\"change\", () => {\n      onChange(selectEl.value)\n    })\n  }\n\n  setupSelect({\n    id: \"countries-select\",\n    onChange: (newSelected: string) => {\n      state.selectedCountry = newSelected\n      renderItems()\n    },\n    selectOptions: countries,\n  })\n  setupSelect({\n    id: \"regions-select\",\n    onChange: (newSelected: string) => {\n      state.selectedRegion = newSelected\n      renderItems()\n    },\n    selectOptions: regions,\n  })\n}\n\nexport default main\n","fileName":"expenses-chord"},{"content":"import { json } from \"d3\"\n\nimport { ChartConfig, DisplayType, RibbonType } from \"./expenses-chord-chart\"\n\nexport const ALL_ID = \"All\"\n\ntype State = {\n  selectedCountry: string\n  selectedRegion: string\n  timeIndex: number\n}\n\ntype DataItem = {\n  value: number | null // eslint-disable-line id-denylist\n  year: number\n}\n\ntype ChordData = {\n  [country: string]: {\n    [region: string]: DataItem[]\n  }\n}\n\nexport const createInitialState = (): State => ({\n  selectedCountry: ALL_ID,\n  selectedRegion: ALL_ID,\n  timeIndex: 0,\n})\n\nexport const getAreas = (chordData: ChordData) => {\n  const countries = Object.keys(chordData).sort()\n  const regions = Object.keys(chordData[countries[0]]).sort()\n\n  return { countries, regions }\n}\n\nexport const fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/expenses-chord/data.json`\n  ) as unknown) as Promise<ChordData>\n\nexport const createChartConfig = ({\n  chordData,\n  countries,\n  regions,\n  state,\n}: {\n  chordData: ChordData\n  countries: string[]\n  regions: string[]\n  state: State\n}): ChartConfig => {\n  const names = countries.concat(regions)\n\n  const getChordMatrix: ChartConfig[\"getChordMatrix\"] = () => {\n    const matrix = names.map((maybeCountry) => {\n      if (!chordData[maybeCountry] as unknown) {\n        return names.map(() => 0)\n      }\n\n      if (![ALL_ID, maybeCountry].includes(state.selectedCountry)) {\n        return names.map(() => 0)\n      }\n\n      return names.map((maybeRegion) => {\n        const {\n          [maybeCountry]: { [maybeRegion]: dataItem },\n        } = chordData\n\n        if (!dataItem as unknown) {\n          return 0\n        }\n\n        if (![ALL_ID, maybeRegion].includes(state.selectedRegion)) {\n          return 0\n        }\n\n        return dataItem[state.timeIndex].value\n      })\n    }) as number[][]\n\n    return matrix\n  }\n\n  // @TODO: confirm title\n  const getChordTitle: ChartConfig[\"getChordTitle\"] = (\n    ...[sourceIndex, targetIndex, sourceValue]\n  ) =>\n    `People from \"${names[sourceIndex]}\" spend into \"${names[targetIndex]}\": ${sourceValue}`\n\n  const getChordGroupTitle: ChartConfig[\"getChordGroupTitle\"] = (\n    chordItemLabel\n  ) => chordItemLabel\n\n  const getRibbonGroupIdColor: ChartConfig[\"getRibbonGroupIdColor\"] = (\n    ...[sourceGroupId, targetGroupId]\n  ) => (state.selectedRegion === ALL_ID ? targetGroupId : sourceGroupId)\n\n  const getDisplayTypeOnGroupClick: ChartConfig[\"getDisplayTypeOnGroupClick\"] = (\n    chordGroupId\n  ) =>\n    countries.includes(chordGroupId) ? DisplayType.Source : DisplayType.Target\n\n  const getRibbonType: ChartConfig[\"getRibbonType\"] = () =>\n    state.selectedCountry !== ALL_ID && state.selectedRegion !== ALL_ID\n      ? RibbonType.Common\n      : RibbonType.Arrow\n\n  return {\n    chordGroupsIds: names,\n    getChordGroupTitle,\n    getChordMatrix,\n    getChordTitle,\n    getDisplayTypeOnGroupClick,\n    getRibbonGroupIdColor,\n    getRibbonType,\n    rootElId: \"chart\",\n  }\n}\n","fileName":"expenses-chord-chart-data"},{"content":"import {\n  Chord,\n  ChordGroup,\n  arc as arcD3,\n  chordDirected,\n  descending as descendingD3,\n  easeCircle,\n  interpolate,\n  ribbonArrow as ribbonArrowD3,\n  ribbon as ribbonD3,\n  scaleOrdinal,\n  schemeTableau10,\n  select,\n  zoom,\n} from \"d3\"\nimport { v1 as uuid } from \"uuid\"\n\nimport * as styles from \"./expenses-chord.module.css\"\n\nconst height = 800\n\nexport enum DisplayType {\n  Source = \"source\",\n  Target = \"target\",\n}\n\nexport enum RibbonType {\n  Arrow = \"arrow\",\n  Common = \"common\",\n}\n\ntype ChartState = {\n  lastFocused: string | null\n}\n\nconst durations = {\n  ribbonAnimation: 1000,\n  zoom: 500,\n} as const\n\nconst easingFn = easeCircle\n\n// eslint-disable-next-line max-params,@typescript-eslint/no-explicit-any\nconst zoomed = function (this: Element, zoomEvent: any) {\n  select(this)\n    .transition()\n    .duration(durations.zoom)\n    .attr(\"transform\", zoomEvent.transform)\n}\n\nexport type ChartConfig = {\n  chordGroupsIds: string[]\n  getChordGroupTitle: (groupId: string) => string\n  getChordMatrix: () => number[][]\n  getChordTitle: (\n    sourceIndex: number,\n    targetIndex: number,\n    sourceValue: number,\n    targetValue: number\n  ) => string\n  getDisplayTypeOnGroupClick: (chordGroupId: string) => DisplayType\n  getRibbonGroupIdColor: (\n    sourceGroupId: string,\n    targetGroupId: string\n  ) => string\n  getRibbonType: () => RibbonType\n  rootElId: string\n}\n\nexport const renderChart = (chartConfig: ChartConfig) => {\n  const { rootElId } = chartConfig\n\n  const chartState: ChartState = {\n    lastFocused: null,\n  }\n\n  const { chordGroupsIds } = chartConfig\n\n  const color = scaleOrdinal(chordGroupsIds, schemeTableau10)\n\n  const { width } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n\n  const innerRadius = Math.min(width, height) * 0.5 - 20\n  const outerRadius = innerRadius + 20\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const ribbonCommon = (r: any) =>\n    r.radius(innerRadius - 0.5).padAngle(1 / innerRadius)\n\n  const ribbonArrow = ribbonCommon(ribbonArrowD3())\n  const ribbon = ribbonCommon(ribbonD3())\n\n  const zoomBehavior = zoom()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const totalHeight = height + 50\n\n  const svg = select(`#${rootElId}`)\n    .attr(\"class\", styles.chartWrapper)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", totalHeight)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${width / 2}, ${totalHeight / 2})`)\n    .append(\"g\")\n    .call(zoomBehavior as any) // eslint-disable-line @typescript-eslint/no-explicit-any\n    .on(\"dblclick.zoom\", null)\n\n  // this rect is to allow zooming\n  svg\n    .append(\"rect\")\n    .attr(\"fill\", \"#fff\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"transform\", `translate(-${width / 2}, -${totalHeight / 2})`)\n\n  const textId = uuid()\n\n  const chord = chordDirected()\n    .padAngle(12 / innerRadius)\n    .sortSubgroups(descendingD3)\n    .sortChords(descendingD3)\n\n  svg\n    .append(\"path\")\n    .attr(\"fill\", \"none\")\n    .attr(\"id\", textId)\n    .attr(\n      \"d\",\n      arcD3()({\n        endAngle: 2 * Math.PI,\n        innerRadius: 0,\n        outerRadius,\n        startAngle: 0,\n      }) as string\n    )\n\n  const arc = arcD3<d3.ChordGroup>()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius)\n\n  const ribbonContainer = svg.append(\"g\").attr(\"fill-opacity\", 0.75)\n  const groupContainer = svg\n    .append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", 10)\n\n  const renderItems = () => {\n    const usedRibbon =\n      chartConfig.getRibbonType() === RibbonType.Common ? ribbon : ribbonArrow\n\n    const matrix = chartConfig.getChordMatrix()\n    const chords = chord(matrix)\n\n    const initialRibbonsData = ribbonContainer\n      .selectAll<SVGPathElement, Chord>(`.${styles.ribbon}`)\n      .data()\n      .reduce((...[acc, ribbonNode]) => {\n        acc[\n          `${ribbonNode.source.index}_${ribbonNode.target.index}`\n        ] = ribbonNode\n\n        return acc\n      }, {} as { [k: string]: Chord | undefined })\n\n    const fillRibbon = (chordItem: Chord) =>\n      color(\n        chartConfig.getRibbonGroupIdColor(\n          chordGroupsIds[chordItem.source.index],\n          chordGroupsIds[chordItem.target.index]\n        )\n      )\n\n    const ribbons = ribbonContainer\n      .selectAll<SVGPathElement, Chord>(`.${styles.ribbon}`)\n      .data<Chord>(\n        chords,\n        (chordItem) => `${chordItem.source.index}_${chordItem.target.index}`\n      )\n      .join(\n        (enter) =>\n          enter\n            .append(\"path\")\n            .attr(\"class\", styles.ribbon)\n            .attr(\"fill\", fillRibbon)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attrTween(\"d\", (finalRibbon) => {\n              const initialRibbon = {\n                source: {\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n                target: {\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n              }\n              const interpolateSource = interpolate(\n                initialRibbon.source,\n                finalRibbon.source\n              )\n              const interpolateTarget = interpolate(\n                initialRibbon.target,\n                finalRibbon.target\n              )\n\n              return (t) => {\n                const interpolated = {\n                  source: interpolateSource(t),\n                  target: interpolateTarget(t),\n                }\n\n                return usedRibbon(interpolated)\n              }\n            }),\n        (update) => {\n          update\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attr(\"fill\", fillRibbon)\n            .attrTween(\"d\", (finalRibbon) => {\n              const {\n                [`${finalRibbon.source.index}_${finalRibbon.target.index}`]: initialRibbon,\n              } = initialRibbonsData\n\n              if (!initialRibbon) {\n                return () => usedRibbon(finalRibbon)\n              }\n\n              const interpolateSource = interpolate(\n                initialRibbon.source,\n                finalRibbon.source\n              )\n              const interpolateTarget = interpolate(\n                initialRibbon.target,\n                finalRibbon.target\n              )\n\n              return (t) => {\n                const interpolated = {\n                  source: interpolateSource(t),\n                  target: interpolateTarget(t),\n                }\n\n                return usedRibbon(interpolated)\n              }\n            })\n\n          return update\n        }\n      )\n\n    ribbons\n      .attr(\"title\", (chordItem) =>\n        chartConfig.getChordTitle(\n          chordItem.source.index,\n          chordItem.target.index,\n          chordItem.source.value,\n          chordItem.target.value\n        )\n      )\n      .on(\"click\", function (...[, chordItem]) {\n        const chordSelection = select(this)\n        const chordGroupId = `${chordGroupsIds[chordItem.source.index]}_${\n          chordGroupsIds[chordItem.target.index]\n        }`\n\n        if (chartState.lastFocused === chordGroupId) {\n          ribbons.attr(\"display\", \"block\")\n          chartState.lastFocused = null\n        } else {\n          ribbons.attr(\"display\", \"none\")\n          chordSelection.attr(\"display\", \"block\")\n          chartState.lastFocused = chordGroupId\n        }\n      })\n\n    $(`.${styles.ribbon}`).tooltip({\n      track: true,\n    })\n\n    const getGroupText = (chordItem: ChordGroup) => {\n      if (chordItem.endAngle - chordItem.startAngle < 0.07) {\n        return \"\"\n      }\n\n      return chartConfig.getChordGroupTitle(chordGroupsIds[chordItem.index])\n    }\n\n    const initialGroupData = groupContainer\n      .selectAll(`.${styles.chordGroup}`)\n      .data()\n\n    groupContainer\n      .selectAll<SVGGElement, ChordGroup>(`.${styles.chordGroup}`)\n      .data<ChordGroup>(chords.groups, (chordGroup) => chordGroup.index)\n      .join(\n        (enter) => {\n          const groupSelection = enter\n            .append(\"g\")\n            .attr(\"class\", styles.chordGroup)\n            .attr(\"title\", (groupItem) =>\n              chartConfig.getChordGroupTitle(chordGroupsIds[groupItem.index])\n            )\n\n          groupSelection\n            .append(\"path\")\n            .attr(\"class\", \"group-path\")\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .ease(easingFn)\n            .attrTween(\"d\", (finalGroup) => {\n              const interpolateFn = interpolate<ChordGroup>(\n                {\n                  ...finalGroup,\n                  endAngle: 0,\n                  startAngle: 0,\n                },\n                finalGroup\n              )\n\n              return (t) => arc(interpolateFn(t))!\n            })\n            .attr(\"fill\", (groupItem) => color(chordGroupsIds[groupItem.index]))\n            .attr(\"stroke\", \"#fff\")\n\n          groupSelection\n            .append(\"text\")\n            .attr(\"dy\", -3)\n            .append(\"textPath\")\n            .attr(\"xlink:href\", `#${textId}`)\n            .attr(\"class\", styles.groupText)\n            .text(getGroupText)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .ease(easingFn)\n            .attr(\n              \"startOffset\",\n              (groupItem) => groupItem.startAngle * outerRadius\n            )\n\n          groupSelection.on(\"click\", (...[, groupItem]) => {\n            const { [groupItem.index]: chordGroupId } = chordGroupsIds\n            const latestRibbons = ribbonContainer.selectAll<\n              SVGPathElement,\n              Chord\n            >(`.${styles.ribbon}`)\n\n            if (chartState.lastFocused === chordGroupId) {\n              latestRibbons.attr(\"display\", () => \"block\")\n              chartState.lastFocused = null\n\n              return\n            }\n\n            chartState.lastFocused = chordGroupId\n\n            if (\n              chartConfig.getDisplayTypeOnGroupClick(chordGroupId) ===\n              DisplayType.Source\n            ) {\n              latestRibbons.attr(\"display\", (otherGroupItem) =>\n                otherGroupItem.source.index === groupItem.index\n                  ? \"block\"\n                  : \"none\"\n              )\n\n              return\n            }\n\n            latestRibbons.attr(\"display\", (otherGroupItem) =>\n              otherGroupItem.target.index === groupItem.index ? \"block\" : \"none\"\n            )\n          })\n\n          $(`.${styles.chordGroup}`).tooltip({\n            track: true,\n          })\n\n          return groupSelection\n        },\n        (update) => {\n          update\n            .select(\".group-path\")\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attrTween(\"d\", (...[finalGroup, finalGroupIndex]) => {\n              const { [finalGroupIndex]: initialGroup } = initialGroupData\n              const interpolateFn = interpolate(initialGroup, finalGroup)\n\n              return (t) => arc(interpolateFn(t)) as string\n            })\n\n          update\n            .select(`.${styles.groupText}`)\n            .text(getGroupText)\n            .transition()\n            .duration(durations.ribbonAnimation)\n            .attr(\n              \"startOffset\",\n              (groupItem) => groupItem.startAngle * outerRadius\n            )\n\n          return update\n        },\n        (exit) => exit.remove()\n      )\n      .attr(\"class\", styles.chordGroup)\n  }\n\n  renderItems()\n\n  return {\n    renderItems,\n  }\n}\n","fileName":"expenses-chord-chart"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/expenses-chord/expenses-chord\"\nimport * as styles from \"@/demos/expenses-chord/expenses-chord.module.css\"\n\nconst ExpensesChord = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div>Time Item:</div>\n    <div className={styles.sliderTime} id=\"slider-time\" />\n    <p>\n      <span>Countries:</span>\n      <select className={styles.countriesSelect} id=\"countries-select\" />\n      <span>Regions:</span>\n      <select id=\"regions-select\" />\n    </p>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default ExpensesChord\n","type":"tsx"}},"key":"expenses-chord"},"meta":{"description":""}}},"staticQueryHashes":[]}