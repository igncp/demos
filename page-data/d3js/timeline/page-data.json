{"componentChunkName":"component---src-pages-d-3-js-timeline-js","path":"/d3js/timeline/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"name":"Timeline","notes":["Change to bootstrap tooltip","Add dynamic text lengths (adding two dots)","Improve performance (a lot) removing the drop-shadow while brushing"],"sources":["http://bl.ocks.org/rengel-de/5603464"],"category":"d3js","files":{"d3utils":"import merge from \"lodash/merge\"\n\nconst d3utils = {\n  colorsScale(colors, extent) {\n    const c = d3.scale.linear().domain(extent).range([0, 1])\n    const colorScale = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      height: \"500%\",\n      id: `drop-shadow-${id}`,\n      width: \"500%\",\n      x: \"-200%\",\n      y: \"-200%\",\n    })\n\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"SourceAlpha\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feOffset\").attr({\n      dx: 1,\n      dy: 1,\n    })\n    filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(id, svg, deviation, slope, extra) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr({\n      id: `drop-shadow-${id}`,\n    })\n\n    if (extra) {\n      filter.attr({\n        height: \"500%\",\n        width: \"500%\",\n        x: \"-200%\",\n        y: \"-200%\",\n      })\n    }\n\n    filter.append(\"feOffset\").attr({\n      dx: 0.5,\n      dy: 0.5,\n      in: \"SourceGraphic\",\n      result: \"offOut\",\n    })\n    filter.append(\"feGaussianBlur\").attr({\n      in: \"offOut\",\n      result: \"blurOut\",\n      stdDeviation: deviation,\n    })\n    filter.append(\"feBlend\").attr({\n      in: \"SourceGraphic\",\n      in2: \"blurOut\",\n      mode: \"normal\",\n    })\n\n    return filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n      slope,\n      type: \"linear\",\n    })\n  },\n  middleTitle(svg, width, text, top) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr({\n        class: \"chart-title\",\n        \"text-anchor\": \"middle\",\n        transform: `translate(${String(width / 2)},${top})`,\n      })\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector, width, height, margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr({\n        height: height + margin.top + margin.bottom,\n        width: width + margin.left + margin.right,\n      })\n      .append(\"g\")\n      .attr({\n        transform: `translate(${margin.left},${margin.top})`,\n      })\n  },\n  tooltip(selector, customOpts) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = merge(defaultOpts, customOpts)\n\n    $(selector).tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import * as d3next from \"d3\"\nimport d3utils from \"@/demos/_utils/d3utils\"\n\nconst fetchData = () =>\n  new Promise((resolve) => {\n    d3.csv(`${ROOT_PATH}data/d3js/timeline/data.csv`, (dataset) =>\n      resolve(dataset)\n    )\n  })\n\nconst margin = {\n  bottom: 0,\n  left: 20,\n  right: 20,\n  top: 60,\n}\n\nconst outerHeight = 700\nconst height = outerHeight - margin.top - margin.bottom\nconst bandGap = 25\n\nconst parseDate = function (dateString) {\n  const format = d3.time.format(\"%Y-%m-%d\")\n\n  let date = format.parse(dateString)\n\n  if (date !== null) {\n    return date\n  }\n\n  const year = isNaN(dateString)\n    ? -dateString.replace(/[^0-9]/g, \"\")\n    : +dateString\n\n  if (year < 0 || year > 99) {\n    date = new Date(year, 6, 1)\n  } else if (year === 0) {\n    date = new Date(-1, 6, 1)\n  } else {\n    date = new Date(year, 6, 1)\n    date.setUTCFullYear(`0000${year}`.slice(-4))\n  }\n\n  return date\n}\n\nconst toYear = function (date, bcString) {\n  bcString = bcString || \" BC\"\n\n  const year = date.getUTCFullYear()\n\n  if (year > 0) {\n    return year.toString()\n  }\n\n  if (bcString[0] === \"-\") {\n    return bcString - year\n  }\n\n  return bcString - year\n}\n\nconst createTimeline = function ({ rootElId }) {\n  const outerWidth = document.getElementById(rootElId).getBoundingClientRect()\n    .width\n  const width = outerWidth - margin.left - margin.right\n\n  let bandY = 0\n  let bandNum = 0\n\n  const timeline = {}\n  const data = {}\n  const components = []\n  const bands = {}\n\n  const svg = d3utils.svg(`#${rootElId}`, outerWidth, outerHeight, margin)\n\n  d3utils.middleTitle(svg, outerWidth, \"Philosophers through History\", -20)\n  d3utils.filterBlackOpacity(\"intervals\", svg, 1, 0.2)\n\n  svg\n    .append(\"clipPath\")\n    .attr(\"id\", \"chart-area\")\n    .append(\"rect\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  svg.on(\"mouseup\", () =>\n    d3\n      .selectAll(\".interval rect\")\n      .style(\"filter\", \"url(#drop-shadow-intervals)\")\n  )\n\n  const chart = svg\n    .append(\"g\")\n    .attr(\"class\", \"chart\")\n    .attr(\"clip-path\", \"url(#chart-area)\")\n\n  timeline.data = function (timelineItems) {\n    const today = new Date()\n\n    const tracks = []\n    const yearMillis = 31622400000\n    const instantOffset = 100 * yearMillis\n\n    data.items = timelineItems\n\n    const compareAscending = function (item1, item2) {\n      let result = item1.start - item2.start\n\n      if (result < 0) {\n        return -1\n      }\n\n      if (result > 0) {\n        return 1\n      }\n\n      result = item2.end - item1.end\n\n      if (result < 0) {\n        return -1\n      }\n\n      if (result > 0) {\n        return 1\n      }\n\n      return 0\n    }\n\n    const compareDescending = function (item1, item2) {\n      let result = item1.start - item2.start\n\n      if (result < 0) {\n        return 1\n      }\n\n      if (result > 0) {\n        return -1\n      }\n\n      result = item2.end - item1.end\n\n      if (result < 0) {\n        return 1\n      }\n\n      if (result > 0) {\n        return -1\n      }\n\n      return 0\n    }\n\n    const calculateTracks = function (items, sortOrder, timeOrder) {\n      sortOrder = sortOrder || \"descending\"\n      timeOrder = timeOrder || \"backward\"\n\n      const sortBackward = function () {\n        return items.forEach((item) => {\n          let track = 0\n\n          for (\n            let i = 0, _i = 0, _ref = tracks.length;\n            0 <= _ref ? _i < _ref : _i > _ref;\n            i = 0 <= _ref ? ++_i : --_i\n          ) {\n            if (item.end < tracks[i]) {\n              break\n            }\n\n            track++\n          }\n\n          item.track = track\n\n          tracks[track] = item.start\n        })\n      }\n\n      const sortForward = function () {\n        return items.forEach((item) => {\n          let track = 0\n\n          for (\n            let i = 0, _i = 0, _ref = tracks.length;\n            0 <= _ref ? _i < _ref : _i > _ref;\n            i = 0 <= _ref ? ++_i : --_i\n          ) {\n            if (item.start > tracks[i]) {\n              break\n            }\n\n            track++\n          }\n\n          item.track = track\n\n          tracks[track] = item.end\n        })\n      }\n\n      if (sortOrder === \"ascending\") {\n        data.items.sort(compareAscending)\n      } else {\n        data.items.sort(compareDescending)\n      }\n\n      if (timeOrder === \"forward\") {\n        return sortForward()\n      }\n\n      return sortBackward()\n    }\n\n    data.items.forEach((item) => {\n      item.start = parseDate(item.start)\n\n      if (item.end === \"\") {\n        item.end = new Date(item.start.getTime() + instantOffset)\n        item.instant = true\n      } else {\n        item.end = parseDate(item.end)\n        item.instant = false\n      }\n\n      if (item.end > today) {\n        item.end = today\n      }\n    })\n\n    calculateTracks(data.items, \"descending\", \"backward\")\n\n    data.nTracks = tracks.length\n    data.minDate = d3next.min(data.items, (d) => d.start)\n    data.maxDate = d3next.max(data.items, (d) => d.end)\n\n    return timeline\n  }\n\n  timeline.tooltip = {\n    create() {\n      d3utils.tooltip(\".part.instant, .part.interval\", {\n        followMouse: true,\n        leftOffst: 80,\n      })\n\n      return timeline\n    },\n  }\n\n  timeline.band = function (bandName, sizeFactor) {\n    const band = {}\n\n    band.id = `band${bandNum}`\n    band.x = 0\n    band.y = bandY\n    band.w = width\n    band.h = height * (sizeFactor || 1)\n    band.trackOffset = 0\n    band.trackHeight = Math.min((band.h - band.trackOffset) / data.nTracks, 20)\n    band.itemHeight = band.trackHeight * 0.7\n    band.parts = []\n    band.instantWidth = 100\n    band.xScale = d3.time\n      .scale()\n      .domain([data.minDate, data.maxDate])\n      .range([0, band.w])\n\n    band.yScale = function (track) {\n      return band.trackOffset + track * band.trackHeight\n    }\n\n    band.yearsScale =\n      data.maxDate.getUTCFullYear() - data.minDate.getUTCFullYear()\n    band.g = chart\n      .append(\"g\")\n      .attr(\"id\", band.id)\n      .attr(\"transform\", `translate(0,${band.y})`)\n    band.g\n      .append(\"rect\")\n      .attr(\"class\", \"band\")\n      .attr(\"width\", band.w)\n      .attr(\"height\", band.h)\n\n    const items = band.g\n      .selectAll(\"g\")\n      .data(data.items)\n      .enter()\n      .append(\"svg\")\n      .attr(\"y\", (d) => band.yScale(d.track))\n      .attr(\"height\", band.itemHeight)\n      .attr(\"data-title\", (d) => {\n        if (d.instant) {\n          return `${d.label}: ${toYear(d.start)}`\n        }\n\n        return `${d.label}: ${toYear(d.start)} - ${toYear(d.end)}`\n      })\n      .attr(\"class\", (d) => {\n        if (d.instant) {\n          return \"part instant\"\n        }\n\n        return \"part interval\"\n      })\n\n    const intervals = d3.select(`#band${bandNum}`).selectAll(\".interval\")\n\n    intervals\n      .append(\"rect\")\n      .attr(\"height\", \"80%\")\n      .attr(\"width\", \"80%\")\n      .attr(\"x\", \"1px\")\n      .attr(\"y\", \".5px\")\n      .style(\"filter\", \"url(#drop-shadow-intervals)\")\n\n    intervals\n      .append(\"text\")\n      .attr(\"class\", \"intervalLabel\")\n      .attr(\"x\", 3)\n      .attr(\"y\", 9.5)\n\n    const instants = d3.select(`#band${bandNum}`).selectAll(\".instant\")\n\n    instants\n      .append(\"circle\")\n      .attr(\"cx\", band.itemHeight / 2)\n      .attr(\"cy\", band.itemHeight / 2)\n      .attr(\"r\", 5)\n    instants\n      .append(\"text\")\n      .attr(\"class\", \"instantLabel\")\n      .attr(\"x\", 15)\n      .attr(\"y\", 10)\n\n    band.addActions = function (actions) {\n      return actions.forEach((action) => items.on(action[0], action[1]))\n    }\n\n    band.redraw = function () {\n      items\n        .attr(\"x\", (d) => band.xScale(d.start))\n        .attr(\"width\", (d) => band.xScale(d.end) - band.xScale(d.start))\n        .select(\"text\")\n        .text((d) => {\n          const scale = band.xScale(d.end) - band.xScale(d.start)\n          const maxLetters = scale / 9\n\n          if (d.label.length > maxLetters) {\n            return `${d.label.substr(0, maxLetters - 1)}..`\n          }\n\n          return d.label\n        })\n\n      return band.parts.forEach((part) => part.redraw())\n    }\n\n    bands[bandName] = band\n    components.push(band)\n    bandY += band.h + bandGap\n    bandNum += 1\n\n    return timeline\n  }\n\n  timeline.labels = function (bandName) {\n    const band = bands[bandName]\n    const labelWidth = 46\n    const labelHeight = 20\n    const labelTop = band.y + band.h - 10\n    const yText = 15\n    const labelDefs = [\n      [\n        \"start\",\n        \"bandMinMaxLabel\",\n        0,\n        4,\n        function (min) {\n          return toYear(min)\n        },\n        \"Start of the selected interval\",\n        band.x + 30,\n        labelTop,\n      ],\n      [\n        \"end\",\n        \"bandMinMaxLabel\",\n        band.w - labelWidth,\n        band.w - 4,\n        function (_min, max) {\n          return toYear(max)\n        },\n        \"End of the selected interval\",\n        band.x + band.w - 152,\n        labelTop,\n      ],\n      [\n        \"middle\",\n        \"bandMidLabel\",\n        (band.w - labelWidth) / 2,\n        band.w / 2,\n        function (min, max) {\n          return max.getUTCFullYear() - min.getUTCFullYear()\n        },\n        \"Length of the selected interval\",\n        band.x + band.w / 2 - 75,\n        labelTop,\n      ],\n    ]\n    const bandLabels = chart\n      .append(\"g\")\n      .attr(\"id\", `${bandName}Labels`)\n      .attr(\"transform\", `translate(0,${band.y + band.h + 1})`)\n      .selectAll(`#${bandName}Labels`)\n      .data(labelDefs)\n      .enter()\n      .append(\"g\")\n\n    bandLabels\n      .append(\"rect\")\n      .attr(\"class\", \"bandLabel\")\n      .attr(\"x\", (d) => d[2])\n      .attr(\"width\", labelWidth)\n      .attr(\"height\", labelHeight)\n      .style(\"opacity\", 1)\n\n    const labels = bandLabels\n      .append(\"text\")\n      .attr(\"class\", (d) => d[1])\n      .attr(\"id\", (d) => d[0])\n      .attr(\"x\", (d) => d[3])\n      .attr(\"y\", yText)\n      .attr(\"text-anchor\", (d) => d[0])\n\n    labels.redraw = function () {\n      const min = band.xScale.domain()[0]\n      const max = band.xScale.domain()[1]\n\n      return labels.text((d) => d[4](min, max))\n    }\n\n    band.parts.push(labels)\n    components.push(labels)\n\n    return timeline\n  }\n\n  timeline.xAxis = function (bandName, orientation) {\n    const band = bands[bandName]\n    const axis = d3.svg\n      .axis()\n      .scale(band.xScale)\n      .orient(orientation || \"bottom\")\n      .tickSize(6, 0)\n      .tickFormat((d) => toYear(d))\n    const xAxis = chart\n      .append(\"g\")\n      .attr(\"class\", \"axis\")\n      .attr(\"transform\", `translate(0,${band.y + band.h})`)\n\n    xAxis.redraw = function () {\n      return xAxis.call(axis)\n    }\n\n    band.parts.push(xAxis)\n    components.push(xAxis)\n\n    return timeline\n  }\n\n  timeline.brush = function (bandName, targetNames) {\n    const band = bands[bandName]\n    const brush = d3.svg.brush().x(band.xScale.range([0, band.w]))\n\n    brush.on(\"brush\", () => {\n      const domain = brush.empty() ? band.xScale.domain() : brush.extent()\n\n      d3.selectAll(\".interval rect\").style(\"filter\", \"none\")\n\n      targetNames.forEach((d) => {\n        bands[d].xScale.domain(domain)\n\n        bands[d].redraw()\n      })\n    })\n\n    const xBrush = band.g.append(\"svg\").attr(\"class\", \"x brush\").call(brush)\n\n    xBrush\n      .selectAll(\"rect\")\n      .attr(\"y\", 1)\n      .attr(\"height\", band.h - 1)\n\n    return timeline\n  }\n\n  timeline.redraw = function () {\n    return components.forEach((component) => component.redraw())\n  }\n\n  return timeline\n}\n\nconst renderChart = ({ dataset, rootElId }) => {\n  createTimeline({ rootElId })\n    .data(dataset)\n    .band(\"mainBand\", 0.82)\n    .band(\"naviBand\", 0.08)\n    .xAxis(\"mainBand\")\n    .xAxis(\"naviBand\")\n    .labels(\"mainBand\")\n    .labels(\"naviBand\")\n    .brush(\"naviBand\", [\"mainBand\"])\n    .tooltip[\"create\"]()\n    .redraw()\n}\n\nconst main = async () => {\n  const dataset = await fetchData()\n\n  renderChart({\n    dataset,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"js"},"page":{"content":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/timeline/timeline\"\n\nimport \"@/demos/timeline/timeline.styl\"\n\nconst Timeline = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"timeline-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Timeline\n","type":"js"},"styl":".timeline-chart\n  text\n    text-shadow: .5px .5px .5px #ccc;\n  .axis\n    fill: #808080;\n    font-family: sans-serif;\n    font-size: 10px;\n\n  .axis line\n    stroke-width : 1;\n    stroke: grey;\n    shape-rendering: crispEdges;\n\n  .axis path\n    stroke-width : 1;\n    stroke: grey;\n    shape-rendering: crispEdges;\n\n  .band\n    fill: #FFFFFF;\n\n  .bandLabel\n    fill: #F0F0F0;\n    font: 10px sans-serif;\n    font-weight: bold;\n\n  .bandMinMaxLabel\n    fill: #11AA6A;\n    font: 10px sans-serif;\n    font-weight: bold;\n\n  .bandMidLabel\n    cursor: default;\n    fill: #BC79C5;\n    font: 10px sans-serif;\n    font-style: italic;\n    font-weight: bold;\n\n  .brush .extent\n    stroke: gray;\n    fill: #71D7E5;\n    fill-opacity: .1;\n\n  .chart\n    fill: #EEEEEE;\n\n  .interval\n    fill: #ECF7F7;\n    cursor : default;\n    pointer-events: true;\n    rect\n      stroke-width: .5px;\n      stroke: black;\n\n  .instant\n    fill: #AFCAE7;\n    cursor : default;\n\n  .instantLabel\n    fill : #7E7E7E;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n\n  .intervalLabel\n    fill : black;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n\n  .item\n    cursor : default;\n    pointer-events: auto;"},"key":"timeline"}}},"staticQueryHashes":[]}