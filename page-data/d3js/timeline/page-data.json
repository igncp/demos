{"componentChunkName":"component---src-pages-d-3-js-timeline-tsx","path":"/d3js/timeline/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"docs":[],"isCompleted":true,"name":"Timeline","notes":["Change to bootstrap tooltip","Add dynamic text lengths (adding two dots)","Improve performance (a lot) removing the drop-shadow while brushing"],"sources":["http://bl.ocks.org/rengel-de/5603464"],"summary":[],"category":"d3js","files":{"cssModule":".timelineChart {\n  text {\n    text-shadow: 0.5px 0.5px 0.5px #ccc;\n  }\n\n  .axis {\n    fill: #808080;\n    font-family: sans-serif;\n    font-size: 10px;\n  }\n\n  .axis line {\n    shape-rendering: crispEdges;\n    stroke: grey;\n    stroke-width: 1;\n  }\n\n  .axis path {\n    shape-rendering: crispEdges;\n    stroke: grey;\n    stroke-width: 1;\n  }\n\n  .band {\n    fill: #fff;\n  }\n\n  .bandLabel {\n    fill: #f0f0f0;\n    font: 10px sans-serif;\n    font-weight: bold;\n  }\n\n  .bandMinMaxLabel {\n    fill: #11aa6a;\n    font: 10px sans-serif;\n    font-weight: bold;\n  }\n\n  .bandMidLabel {\n    cursor: default;\n    fill: #bc79c5;\n    font: 10px sans-serif;\n    font-style: italic;\n    font-weight: bold;\n  }\n\n  .chart {\n    fill: #eee;\n  }\n\n  .interval {\n    cursor: default;\n    fill: #ecf7f7;\n    pointer-events: true;\n\n    rect {\n      stroke: black;\n      stroke-width: 0.5px;\n    }\n  }\n\n  .instant {\n    cursor: default;\n    fill: #afcae7;\n  }\n\n  .instantLabel {\n    fill: #7e7e7e;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n  }\n\n  .intervalLabel {\n    fill: black;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n  }\n}\n","demo":[{"content":"import {\n  Selection,\n  axisBottom,\n  brushX,\n  csv,\n  max as maxD3,\n  min as minD3,\n  scaleTime,\n  select,\n  selectAll,\n  timeParse,\n} from \"d3\"\n\nimport * as styles from \"./timeline.module.css\"\n\ntype DataItem = {\n  end: Date\n  instant: boolean\n  label: string\n  start: Date\n  track: number\n}\n\ntype RedrawComp = {\n  redraw?: () => void\n}\n\nconst fetchData = () =>\n  (csv(`${ROOT_PATH}data/d3js/timeline/data.csv`) as unknown) as Promise<\n    DataItem[]\n  >\n\nconst margin = {\n  bottom: 0,\n  left: 20,\n  right: 20,\n  top: 60,\n}\n\ntype Action = [string, () => void]\n\ntype Band = RedrawComp & {\n  addActions: (a: Action[]) => void\n  g: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  h: number\n  id: string\n  instantWidth: number\n  itemHeight: number\n  parts: RedrawComp[]\n  trackHeight: number\n  trackOffset: number\n  w: number\n  x: number\n  xScale: any\n  y: number\n  yScale: any\n  yearsScale: any\n}\n\nconst outerHeight = 700\nconst height = outerHeight - margin.top - margin.bottom\nconst bandGap = 25\n\nconst parseDate = function (dateString: string) {\n  const format = timeParse(\"%Y-%m-%d\")\n\n  let date = format(dateString)\n\n  if (date !== null) {\n    return date\n  }\n\n  const year = isNaN(Number(dateString))\n    ? -dateString.replace(/[^0-9]/g, \"\")\n    : +dateString\n\n  if (year < 0 || year > 99) {\n    date = new Date(year, 6, 1)\n  } else if (year === 0) {\n    date = new Date(-1, 6, 1)\n  } else {\n    date = new Date(year, 6, 1)\n    date.setUTCFullYear(year)\n  }\n\n  return date\n}\n\nconst toYear = (date: Date) => {\n  const bcString = \" BC\"\n  const year = date.getUTCFullYear()\n\n  if (year >= 0) {\n    return year.toString()\n  }\n\n  return bcString + Math.abs(year)\n}\n\nconst filterBlackOpacity = (\n  id: string,\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>,\n  deviation: number,\n  slope: number\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nclass Timeline {\n  private readonly chart: Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n  private bandY: number\n  private bandNum: number\n  private dataContent: {\n    items?: DataItem[]\n    maxDate?: Date\n    minDate?: Date\n    nTracks?: number\n  }\n\n  private readonly components: RedrawComp[]\n  private bands: { [k: string]: Band }\n  private readonly width: number\n\n  public constructor({ rootElId }: { rootElId: string }) {\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.timelineChart)\n\n    const { width: outerWidth } = rootEl.getBoundingClientRect()\n\n    this.width = outerWidth - margin.left - margin.right\n\n    this.bandY = 0\n    this.bandNum = 0\n\n    this.dataContent = {}\n    this.components = []\n    this.bands = {}\n\n    const svg = select(`#${rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", outerHeight + margin.top + margin.bottom)\n      .attr(\"width\", outerWidth + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${outerWidth / 2},-20)`)\n      .text(\"Philosophers through History\")\n      .style(\"font-weight\", \"bold\")\n\n    filterBlackOpacity(\"intervals\", svg, 1, 0.2)\n\n    svg\n      .append(\"clipPath\")\n      .attr(\"id\", \"chart-area\")\n      .append(\"rect\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", height)\n\n    svg.on(\"mouseup\", () =>\n      selectAll(`.${styles.interval} rect`).style(\n        \"filter\",\n        \"url(#drop-shadow-intervals)\"\n      )\n    )\n\n    this.chart = svg\n      .append(\"g\")\n      .attr(\"class\", styles.chart)\n      .attr(\"clip-path\", \"url(#chart-area)\")\n  }\n\n  public data(timelineItems: DataItem[]) {\n    const today = new Date()\n\n    const tracks: Date[] = []\n\n    const yearMillis = 31622400000\n    const instantOffset = 100 * yearMillis\n\n    this.dataContent.items = timelineItems\n\n    const compareAscending = function (item1: any, item2: any) {\n      let result = item1.start - item2.start\n\n      if (result < 0) {\n        return -1\n      }\n\n      if (result > 0) {\n        return 1\n      }\n\n      result = item2.end - item1.end\n\n      if (result < 0) {\n        return -1\n      }\n\n      if (result > 0) {\n        return 1\n      }\n\n      return 0\n    }\n\n    const compareDescending = function (item1: any, item2: any) {\n      let result = item1.start - item2.start\n\n      if (result < 0) {\n        return 1\n      }\n\n      if (result > 0) {\n        return -1\n      }\n\n      result = item2.end - item1.end\n\n      if (result < 0) {\n        return 1\n      }\n\n      if (result > 0) {\n        return -1\n      }\n\n      return 0\n    }\n\n    const calculateTracks = (items: any, sortOrder: any, timeOrder: any) => {\n      sortOrder = sortOrder || \"descending\"\n      timeOrder = timeOrder || \"backward\"\n\n      const sortBackward = () =>\n        items.forEach((item: any) => {\n          let track = 0\n\n          for (\n            let i = 0, _i = 0, { length: _ref } = tracks;\n            0 <= _ref ? _i < _ref : _i > _ref;\n            i = 0 <= _ref ? ++_i : --_i\n          ) {\n            if (item.end < tracks[i]) {\n              break\n            }\n\n            track++\n          }\n\n          item.track = track\n\n          tracks[track] = item.start\n        })\n\n      const sortForward = function () {\n        return items.forEach((item: any) => {\n          let track = 0\n\n          for (\n            let i = 0, _i = 0, { length: _ref } = tracks;\n            0 <= _ref ? _i < _ref : _i > _ref;\n            i = 0 <= _ref ? ++_i : --_i\n          ) {\n            if (item.start > tracks[i]) {\n              break\n            }\n\n            track++\n          }\n\n          item.track = track\n\n          tracks[track] = item.end\n        })\n      }\n\n      if (sortOrder === \"ascending\") {\n        this.dataContent.items!.sort(compareAscending)\n      } else {\n        this.dataContent.items!.sort(compareDescending)\n      }\n\n      if (timeOrder === \"forward\") {\n        return sortForward()\n      }\n\n      return sortBackward()\n    }\n\n    this.dataContent.items.forEach((item: any) => {\n      item.start = parseDate(item.start)\n\n      if (item.end === \"\") {\n        item.end = new Date(item.start.getTime() + instantOffset)\n        item.instant = true\n      } else {\n        item.end = parseDate(item.end)\n        item.instant = false\n      }\n\n      if (item.end > today) {\n        item.end = today\n      }\n    })\n\n    calculateTracks(this.dataContent.items, \"descending\", \"backward\")\n\n    this.dataContent.nTracks = tracks.length\n    this.dataContent.minDate = minD3(this.dataContent.items, (d) => d.start)\n    this.dataContent.maxDate = maxD3(\n      this.dataContent.items,\n      (d: DataItem) => d.end\n    )\n\n    return this\n  }\n\n  public xAxis(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n\n    const axis = axisBottom<Date>(band.xScale)\n      .tickSize(6)\n      .tickFormat((d: Date) => toYear(d))\n\n    const xAxis: RedrawComp &\n      Selection<SVGGElement, unknown, HTMLElement, unknown> = this.chart\n      .append(\"g\")\n      .attr(\"class\", styles.axis)\n      .attr(\"transform\", `translate(0,${band.y + band.h})`)\n\n    xAxis.redraw = function () {\n      xAxis.call(axis)\n    }\n\n    band.parts.push(xAxis)\n    this.components.push(xAxis)\n\n    return this\n  }\n\n  public createTooltip() {\n    $(`.part.${styles.instant}, .part.${styles.interval}`).tooltip({\n      track: true,\n    })\n\n    return this\n  }\n\n  public band(bandName: string, sizeFactor: number) {\n    const band: Partial<Band> = {}\n\n    band.id = `band${this.bandNum}`\n    band.x = 0\n    band.y = this.bandY\n    band.w = this.width\n    band.h = height * (sizeFactor || 1)\n    band.trackOffset = 0\n    band.trackHeight = Math.min(\n      (band.h - band.trackOffset) / this.dataContent.nTracks!,\n      20\n    )\n    band.itemHeight = band.trackHeight * 0.7\n    band.parts = []\n    band.instantWidth = 100\n    band.xScale = scaleTime()\n      .domain([this.dataContent.minDate!, this.dataContent.maxDate!])\n      .range([0, band.w])\n\n    band.yScale = (track: any) => band.trackOffset! + track * band.trackHeight!\n\n    band.yearsScale =\n      this.dataContent.maxDate!.getUTCFullYear() -\n      this.dataContent.minDate!.getUTCFullYear()\n    band.g = this.chart\n      .append(\"g\")\n      .attr(\"id\", band.id)\n      .attr(\"transform\", `translate(0,${band.y})`)\n    band.g\n      .append(\"rect\")\n      .attr(\"class\", styles.band)\n      .attr(\"width\", band.w)\n      .attr(\"height\", band.h)\n\n    const items = band.g\n      .selectAll(\"g\")\n      .data<DataItem>(this.dataContent.items!)\n      .enter()\n      .append<SVGSVGElement>(\"svg\")\n      .attr(\"y\", (d: DataItem) => band.yScale(d.track))\n      .attr(\"height\", band.itemHeight)\n      .attr(\"title\", (d: DataItem) => {\n        if (d.instant) {\n          return `${d.label}: ${toYear(d.start)}`\n        }\n\n        return `${d.label}: ${toYear(d.start)} - ${toYear(d.end)}`\n      })\n      .attr(\"class\", (d: DataItem) => {\n        if (d.instant) {\n          return `part ${styles.instant}`\n        }\n\n        return `part ${styles.interval}`\n      })\n\n    const intervals = select(`#band${this.bandNum}`).selectAll(\n      `.${styles.interval}`\n    )\n\n    intervals\n      .append(\"rect\")\n      .attr(\"height\", \"80%\")\n      .attr(\"width\", \"80%\")\n      .attr(\"x\", \"1px\")\n      .attr(\"y\", \".5px\")\n      .style(\"filter\", \"url(#drop-shadow-intervals)\")\n\n    intervals\n      .append(\"text\")\n      .attr(\"class\", styles.intervalLabel)\n      .attr(\"x\", 3)\n      .attr(\"y\", 9.5)\n\n    const instants = select(`#band${this.bandNum}`).selectAll(\n      `.${styles.instant}`\n    )\n\n    instants\n      .append(\"circle\")\n      .attr(\"cx\", band.itemHeight / 2)\n      .attr(\"cy\", band.itemHeight / 2)\n      .attr(\"r\", 5)\n    instants\n      .append(\"text\")\n      .attr(\"class\", styles.instantLabel)\n      .attr(\"x\", 15)\n      .attr(\"y\", 10)\n\n    band.addActions = function (actions: Action[]) {\n      actions.forEach((action) => items.on(action[0], action[1]))\n    }\n\n    band.redraw = function () {\n      items\n        .attr(\"x\", (d: DataItem) => band.xScale(d.start))\n        .attr(\n          \"width\",\n          (d: DataItem) => band.xScale(d.end) - band.xScale(d.start)\n        )\n        .select(\"text\")\n        .text((d: DataItem) => {\n          const scale = band.xScale(d.end) - band.xScale(d.start)\n          const maxLetters = scale / 9\n\n          if (d.label.length > maxLetters) {\n            return `${d.label.substr(0, maxLetters - 1)}..`\n          }\n\n          return d.label\n        })\n\n      band.parts!.forEach((part) => part.redraw!())\n    }\n\n    this.bands[bandName] = band as Band\n    this.components.push(band)\n    this.bandY += band.h + bandGap\n    this.bandNum += 1\n\n    return this\n  }\n\n  public labels(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n    const labelWidth = 46\n    const labelHeight = 20\n    const labelTop = band.y + band.h - 10\n    const yText = 15\n    const labelDefs = [\n      [\n        \"start\",\n        styles.bandMinMaxLabel,\n        0,\n        4,\n        function (min: Date) {\n          return toYear(min)\n        },\n        \"Start of the selected interval\",\n        band.x + 30,\n        labelTop,\n      ],\n      [\n        \"end\",\n        styles.bandMinMaxLabel,\n        band.w - labelWidth,\n        band.w - 4,\n        function (_min: Date, max: Date) {\n          return toYear(max)\n        },\n        \"End of the selected interval\",\n        band.x + band.w - 152,\n        labelTop,\n      ],\n      [\n        \"middle\",\n        styles.bandMidLabel,\n        (band.w - labelWidth) / 2,\n        band.w / 2,\n        function (min: Date, max: Date) {\n          const result = max.getUTCFullYear() - min.getUTCFullYear()\n\n          return result\n        },\n        \"Length of the selected interval\",\n        band.x + band.w / 2 - 75,\n        labelTop,\n      ],\n    ]\n    const bandLabels = this.chart\n      .append(\"g\")\n      .attr(\"id\", `${bandName}Labels`)\n      .attr(\"transform\", `translate(0,${band.y + band.h + 1})`)\n      .selectAll(`#${bandName}Labels`)\n      .data(labelDefs)\n      .enter()\n      .append(\"g\")\n\n    bandLabels\n      .append(\"rect\")\n      .attr(\"class\", styles.bandLabel)\n      .attr(\"x\", (d: any) => d[2])\n      .attr(\"width\", labelWidth)\n      .attr(\"height\", labelHeight)\n      .style(\"opacity\", 1)\n\n    const labels: RedrawComp &\n      Selection<SVGTextElement, any, SVGGElement, unknown> = bandLabels\n      .append(\"text\")\n      .attr(\"class\", (d: any) => d[1])\n      .attr(\"id\", (d: any) => d[0])\n      .attr(\"x\", (d: any) => d[3])\n      .attr(\"y\", yText)\n      .attr(\"text-anchor\", (d: any) => d[0])\n\n    labels.redraw = function () {\n      const min = band.xScale.domain()[0]\n      const max = band.xScale.domain()[1]\n\n      return labels.text((d: any) => d[4](min, max))\n    }\n\n    band.parts.push(labels)\n    this.components.push(labels)\n\n    return this\n  }\n\n  public brush(bandName: string, targetNames: string[]) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n    const brush = brushX()\n\n    const selectionScale = scaleTime()\n      .domain([0, 1000])\n      .range([\n        this.dataContent.minDate!.getTime(),\n        this.dataContent.maxDate!.getTime(),\n      ])\n\n    brush.on(\"brush\", (e) => {\n      let newDomain = band.xScale.domain()\n\n      if (e.selection) {\n        newDomain = [\n          selectionScale(e.selection[0]),\n          selectionScale(e.selection[1]),\n        ]\n      }\n\n      selectAll(`.${styles.interval} rect`).style(\"filter\", \"none\")\n\n      targetNames.forEach((d: any) => {\n        this.bands[d].xScale.domain(newDomain)\n\n        this.bands[d].redraw!()\n      })\n    })\n\n    const xBrush = band.g\n      .append(\"svg\")\n      .attr(\"class\", `x`)\n      .call(brush as any)\n\n    xBrush\n      .selectAll(\"rect\")\n      .attr(\"y\", 1)\n      .attr(\"height\", band.h - 1)\n\n    return this\n  }\n\n  public redraw() {\n    this.components.forEach((component: RedrawComp) => component.redraw!())\n\n    return this\n  }\n}\n\nconst main = async () => {\n  const dataset = await fetchData()\n\n  new Timeline({ rootElId: \"chart\" })\n    .data(dataset)\n    .band(\"mainBand\", 0.82)\n    .band(\"naviBand\", 0.08)\n    .xAxis(\"mainBand\")\n    .xAxis(\"naviBand\")\n    .labels(\"mainBand\")\n    .labels(\"naviBand\")\n    .brush(\"naviBand\", [\"mainBand\"])\n    .redraw()\n    .createTooltip()\n}\n\nexport default main\n","fileName":"timeline"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/timeline/timeline\"\n\nconst Timeline = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Timeline\n","type":"tsx"}},"key":"timeline"},"meta":{"description":"Example of historical timeline using D3.js, where a legend is place to ease the navigation, as well as a more depurated style with tooltips."}}},"staticQueryHashes":[]}