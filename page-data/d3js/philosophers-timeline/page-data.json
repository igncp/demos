{"componentChunkName":"component---src-pages-d-3-js-philosophers-timeline-tsx","path":"/d3js/philosophers-timeline/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.csv"],"docs":[],"isCompleted":true,"name":"Philosophers Timeline","notes":["Change to bootstrap tooltip","Add dynamic text lengths (adding two dots)","Improve performance (a lot) removing the drop-shadow while brushing","Click item to search","Window resize is not supported"],"sources":["http://bl.ocks.org/rengel-de/5603464"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".timelineChart {\n  text {\n    text-shadow: 0.5px 0.5px 0.5px #ccc;\n  }\n\n  .axis {\n    fill: #808080;\n    font-family: sans-serif;\n    font-size: 10px;\n  }\n\n  .axis line {\n    shape-rendering: crispEdges;\n    stroke: grey;\n    stroke-width: 1;\n  }\n\n  .axis path {\n    shape-rendering: crispEdges;\n    stroke: grey;\n    stroke-width: 1;\n  }\n\n  .band {\n    fill: #fff;\n  }\n\n  .bandLabel {\n    fill: #f0f0f0;\n    font: 10px sans-serif;\n    font-weight: bold;\n  }\n\n  .bandMinMaxLabel {\n    fill: #11aa6a;\n    font: 10px sans-serif;\n    font-weight: bold;\n  }\n\n  .bandMidLabel {\n    cursor: default;\n    fill: #bc79c5;\n    font: 10px sans-serif;\n    font-style: italic;\n    font-weight: bold;\n  }\n\n  .chart {\n    fill: #eee;\n  }\n\n  .interval {\n    cursor: default;\n    fill: #ecf7f7;\n    pointer-events: true;\n\n    rect {\n      stroke: black;\n      stroke-width: 0.5px;\n    }\n  }\n\n  .instant {\n    cursor: default;\n    fill: #afcae7;\n  }\n\n  .instantLabel {\n    fill: #7e7e7e;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n  }\n\n  .intervalLabel {\n    fill: black;\n    font: 10px sans-serif;\n    shape-rendering: crispEdges;\n  }\n}\n","fileName":"timeline-bands-brush-chart.module.css"}],"demoTS":[{"content":"import {\n  TimeBandItem,\n  fetchData,\n  getChartConfig,\n} from \"./philosophers-timeline-chart-data\"\nimport { Timeline } from \"./timeline-bands-brush-chart\"\n\nenum BandName {\n  Main = \"mainBand\",\n  Navi = \"naviBand\",\n}\n\nconst main = async () => {\n  const timelineData = await fetchData()\n  const chartConfig = getChartConfig()\n\n  new Timeline<TimeBandItem>(chartConfig)\n    .addChartData(timelineData)\n    .addBand({ bandName: BandName.Main, sizeFactor: 0.82 })\n    .addBand({ bandName: BandName.Navi, sizeFactor: 0.08 })\n    .xAxis(BandName.Main)\n    .xAxis(BandName.Navi)\n    .labels(BandName.Main)\n    .labels(BandName.Navi)\n    .addBrush({ brushBandName: BandName.Navi, targetBandName: BandName.Main })\n    .redraw()\n    .createTooltip()\n}\n\nexport default main\n","fileName":"philosophers-timeline.ts"},{"content":"import { csv, timeParse } from \"d3\"\nimport qs from \"query-string\"\n\nimport { ChartConfig, SortOrder } from \"./timeline-bands-brush-chart\"\n\nexport type TimeBandItem = {\n  end: Date\n  instant: boolean\n  label: string\n  start: Date\n  track: number\n}\n\nconst toYear = (date: Date) => {\n  const bcString = \" BC\"\n  const year = date.getUTCFullYear()\n\n  if (year >= 0) {\n    return year.toString()\n  }\n\n  return bcString + Math.abs(year)\n}\n\nconst parseDate = function (dateString: string) {\n  const format = timeParse(\"%Y-%m-%d\")\n\n  let date = format(dateString)\n\n  if (date !== null) {\n    return date\n  }\n\n  const year = isNaN(Number(dateString))\n    ? -dateString.replace(/[^0-9]/g, \"\")\n    : +dateString\n\n  if (year < 0 || year > 99) {\n    date = new Date(year, 6, 1)\n  } else if (year === 0) {\n    date = new Date(-1, 6, 1)\n  } else {\n    date = new Date(year, 6, 1)\n    date.setUTCFullYear(year)\n  }\n\n  return date\n}\n\nconst yearMillis = 31622400000\n\nexport const fetchData = async (): Promise<TimeBandItem[]> => {\n  const timeBandItems = ((await csv(\n    `${ROOT_PATH}data/d3js/philosophers-timeline/data.csv`\n  )) as unknown) as TimeBandItem[]\n  const today = new Date()\n  const instantOffset = 100 * yearMillis\n\n  timeBandItems.forEach((timeBandItem) => {\n    timeBandItem.start = parseDate(timeBandItem.start.toString())\n\n    if ((timeBandItem.end as unknown) === \"\") {\n      timeBandItem.end = new Date(timeBandItem.start.getTime() + instantOffset)\n      timeBandItem.instant = true\n    } else {\n      timeBandItem.end = parseDate(timeBandItem.end.toString())\n      timeBandItem.instant = false\n    }\n\n    if (timeBandItem.end > today) {\n      timeBandItem.end = today\n    }\n  })\n\n  return timeBandItems\n}\n\ntype Config = ChartConfig<TimeBandItem>\n\nconst getItemLimitLeft: Config[\"getItemLimitLeft\"] = (timeBandItem) =>\n  timeBandItem.start\n\nconst getItemLimitRight: Config[\"getItemLimitRight\"] = (timeBandItem) =>\n  timeBandItem.end\n\nconst getSortFn: Config[\"getSortFn\"] = (sortOrder) => (\n  ...[timeBandItemA, timeBandItemB]: [TimeBandItem, TimeBandItem]\n) => {\n  const factor = sortOrder === SortOrder.Ascending ? 1 : -1\n  const startDiff = Number(timeBandItemA.start) - Number(timeBandItemB.start)\n\n  if (startDiff !== 0) {\n    return startDiff * factor\n  }\n\n  return (Number(timeBandItemB.end) - Number(timeBandItemA.end)) * factor\n}\n\nconst getItemText: Config[\"getItemText\"] = ({\n  chartItem: timeBandItem,\n  maxLetters,\n}) => {\n  if (timeBandItem.label.length > maxLetters) {\n    return `${timeBandItem.label.substr(0, maxLetters - 1)}..`\n  }\n\n  return timeBandItem.label\n}\n\nconst getItemTitle: Config[\"getItemTitle\"] = (timeBandItem) => {\n  if (timeBandItem.instant) {\n    return `${timeBandItem.label}: ${toYear(timeBandItem.start)}`\n  }\n\n  return `${timeBandItem.label}: ${toYear(timeBandItem.start)} - ${toYear(\n    timeBandItem.end\n  )}`\n}\n\nconst onChartItemClick: Config[\"onChartItemClick\"] = (timelineChart) => {\n  const query = !timelineChart.instant\n    ? `Philosopher ${timelineChart.label} ${\n        (timelineChart.end as unknown) ? timelineChart.end.getFullYear() : \"\"\n      }`.trim()\n    : timelineChart.label\n\n  window.open(\n    `https://www.google.com/search?${qs.stringify({\n      q: query,\n    })}`\n  )\n}\n\nconst chartTitle = \"Philosophers through History\"\n\nexport const getChartConfig = (): Config => ({\n  chartTitle,\n  getItemLimitLeft,\n  getItemLimitRight,\n  getItemText,\n  getItemTitle,\n  getSortFn,\n  onChartItemClick,\n  rootElId: \"chart\",\n})\n","fileName":"philosophers-timeline-chart-data.ts"},{"content":"import {\n  BaseType,\n  ScaleTime,\n  Selection,\n  axisBottom,\n  brushX,\n  min as minD3,\n  scaleTime,\n  select,\n  selectAll,\n} from \"d3\"\n\nimport * as styles from \"./timeline-bands-brush-chart.module.css\"\n\nexport enum SortOrder {\n  Ascending = \"ascending\",\n  Descending = \"descending\",\n}\n\nenum TimeOrder {\n  Backward = \"backward\",\n  Forward = \"forward\",\n}\n\ntype RedrawComp = {\n  redraw?: () => void\n}\n\nconst margin = {\n  bottom: 0,\n  left: 20,\n  right: 20,\n  top: 60,\n}\n\ntype Band = RedrawComp & {\n  g: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  h: number\n  id: string\n  instantWidth: number\n  itemHeight: number\n  parts: RedrawComp[]\n  trackHeight: number\n  trackOffset: number\n  w: number\n  x: number\n  xScale: ScaleTime<number, number, number>\n  y: number\n  yScale: (track: number) => number\n}\n\nconst outerHeight = 700\nconst height = outerHeight - margin.top - margin.bottom\nconst bandGap = 25\n\nconst toYear = (date: Date) => {\n  const bcString = \" BC\"\n  const year = date.getUTCFullYear()\n\n  if (year >= 0) {\n    return year.toString()\n  }\n\n  return bcString + Math.abs(year)\n}\n\nconst filterBlackOpacity = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\ntype ChartDataBase = {\n  instant: boolean\n  track: number\n}\n\nexport type ChartConfig<ChartData extends ChartDataBase> = {\n  chartTitle: string\n  getItemLimitLeft: (chartItem: ChartData) => Date\n  getItemLimitRight: (chartItem: ChartData) => Date\n  getItemText: (o: { chartItem: ChartData; maxLetters: number }) => string\n  getItemTitle: (chartItem: ChartData) => string\n  getSortFn: (\n    sortOrder: SortOrder\n  ) => (itemA: ChartData, itemB: ChartData) => number\n  onChartItemClick: (chartItem: ChartData) => void\n  rootElId: string\n}\n\nexport class Timeline<ChartData extends ChartDataBase> {\n  private readonly chart: Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n  private bandY: number\n  private bandNum: number\n  private dataContent: {\n    chartItems?: ChartData[]\n    maxDate?: Date\n    minDate?: Date\n    nTracks?: number\n  }\n\n  private readonly components: RedrawComp[]\n  private bands: { [k: string]: Band }\n  private readonly width: number\n  private readonly chartConfig: ChartConfig<ChartData>\n\n  public constructor(chartConfig: ChartConfig<ChartData>) {\n    this.chartConfig = chartConfig\n\n    const rootEl = document.getElementById(chartConfig.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.timelineChart)\n\n    const { width: outerWidth } = rootEl.getBoundingClientRect()\n\n    this.width = outerWidth - margin.left - margin.right\n\n    this.bandY = 0\n    this.bandNum = 0\n\n    this.dataContent = {}\n    this.components = []\n    this.bands = {}\n\n    const svg = select(`#${chartConfig.rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", outerHeight + margin.top + margin.bottom)\n      .attr(\"width\", outerWidth + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${outerWidth / 2},-20)`)\n      .text(chartConfig.chartTitle)\n      .style(\"font-weight\", \"bold\")\n\n    filterBlackOpacity({ deviation: 1, id: \"intervals\", slope: 0.2, svg })\n\n    svg\n      .append(\"clipPath\")\n      .attr(\"id\", \"chart-area\")\n      .append(\"rect\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", height)\n\n    svg.on(\"mouseup\", () =>\n      selectAll(`.${styles.interval} rect`).style(\n        \"filter\",\n        \"url(#drop-shadow-intervals)\"\n      )\n    )\n\n    this.chart = svg\n      .append(\"g\")\n      .attr(\"class\", styles.chart)\n      .attr(\"clip-path\", \"url(#chart-area)\")\n  }\n\n  public addChartData(timelineItems: ChartData[]) {\n    const tracks: Date[] = []\n\n    this.dataContent.chartItems = timelineItems\n\n    const calculateTracks = ({\n      chartItems,\n      sortOrderInitial,\n      timeOrderInitial,\n    }: {\n      chartItems: ChartData[]\n      sortOrderInitial?: SortOrder\n      timeOrderInitial?: TimeOrder\n    }) => {\n      const sortOrder = sortOrderInitial ?? SortOrder.Descending\n      const timeOrder = timeOrderInitial ?? TimeOrder.Forward\n\n      const sortBackward = () => {\n        chartItems.forEach((chartItem) => {\n          let trackIndex = 0\n\n          for (trackIndex = 0; trackIndex < tracks.length; trackIndex += 1) {\n            if (\n              this.chartConfig.getItemLimitRight(chartItem) < tracks[trackIndex]\n            ) {\n              break\n            }\n          }\n\n          chartItem.track = trackIndex\n          tracks[trackIndex] = this.chartConfig.getItemLimitLeft(chartItem)\n        })\n      }\n\n      const sortForward = () => {\n        chartItems.forEach((chartItem) => {\n          let trackIndex = 0\n\n          for (trackIndex = 0; trackIndex < tracks.length; trackIndex += 1) {\n            if (\n              this.chartConfig.getItemLimitLeft(chartItem) > tracks[trackIndex]\n            ) {\n              break\n            }\n          }\n\n          chartItem.track = trackIndex\n\n          tracks[trackIndex] = this.chartConfig.getItemLimitRight(chartItem)\n        })\n      }\n\n      const sortFn = this.chartConfig.getSortFn(sortOrder)\n\n      this.dataContent.chartItems!.sort(sortFn)\n\n      if (timeOrder === TimeOrder.Forward) {\n        sortForward()\n\n        return\n      }\n\n      sortBackward()\n    }\n\n    calculateTracks({\n      chartItems: this.dataContent.chartItems,\n      sortOrderInitial: SortOrder.Descending,\n      timeOrderInitial: TimeOrder.Backward,\n    })\n\n    this.dataContent.nTracks = tracks.length\n    this.dataContent.minDate = minD3(\n      this.dataContent.chartItems,\n      this.chartConfig.getItemLimitLeft\n    )\n    this.dataContent.maxDate = new Date()\n\n    return this\n  }\n\n  public xAxis(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n\n    const axis = axisBottom<Date>(band.xScale)\n      .tickSize(6)\n      .tickFormat((axisTick) => toYear(axisTick))\n\n    const xAxis: RedrawComp &\n      Selection<SVGGElement, unknown, HTMLElement, unknown> = this.chart\n      .append(\"g\")\n      .attr(\"class\", styles.axis)\n      .attr(\"transform\", `translate(0,${band.y + band.h})`)\n\n    xAxis.redraw = function () {\n      xAxis.call(axis)\n    }\n\n    band.parts.push(xAxis)\n    this.components.push(xAxis)\n\n    return this\n  }\n\n  public createTooltip() {\n    $(`.part.${styles.instant}, .part.${styles.interval}`).tooltip({\n      track: true,\n    })\n\n    return this\n  }\n\n  public addBand({\n    bandName,\n    sizeFactor,\n  }: {\n    bandName: string\n    sizeFactor: number\n  }) {\n    const band: Partial<Band> = {}\n\n    band.id = `band${this.bandNum}`\n    band.x = 0\n    band.y = this.bandY\n    band.w = this.width\n    band.h = height * (sizeFactor || 1)\n    band.trackOffset = 0\n    band.trackHeight = Math.min(\n      (band.h - band.trackOffset) / this.dataContent.nTracks!,\n      20\n    )\n    band.itemHeight = band.trackHeight * 0.7\n    band.parts = []\n    band.instantWidth = 100\n    band.xScale = scaleTime()\n      .domain([this.dataContent.minDate!, this.dataContent.maxDate!])\n      .range([0, band.w])\n\n    band.yScale = (track: number) =>\n      band.trackOffset! + track * band.trackHeight!\n\n    band.g = this.chart\n      .append(\"g\")\n      .attr(\"id\", band.id)\n      .attr(\"transform\", `translate(0,${band.y})`)\n\n    band.g\n      .append(\"rect\")\n      .attr(\"class\", styles.band)\n      .attr(\"width\", band.w)\n      .attr(\"height\", band.h)\n\n    const bandElements = band.g\n      .selectAll(\"g\")\n      .data<ChartData>(this.dataContent.chartItems!)\n      .enter()\n      .append<SVGSVGElement>(\"svg\")\n      .attr(\"y\", (chartItem) => band.yScale!(chartItem.track))\n      .attr(\"height\", band.itemHeight)\n      .attr(\"title\", this.chartConfig.getItemTitle)\n      .attr(\n        \"class\",\n        (chartItem) =>\n          `part ${chartItem.instant ? styles.instant : styles.interval}`\n      )\n\n    const intervals = select(`#band${this.bandNum}`).selectAll<\n      BaseType,\n      ChartData\n    >(`.${styles.interval}`)\n\n    const instants = select(`#band${this.bandNum}`).selectAll<\n      BaseType,\n      ChartData\n    >(`.${styles.instant}`)\n\n    intervals\n      .append(\"rect\")\n      .attr(\"height\", \"100%\")\n      .attr(\"width\", \"100%\")\n      .attr(\"x\", \"1px\")\n      .attr(\"y\", \".5px\")\n      .style(\"filter\", \"url(#drop-shadow-intervals)\")\n\n    intervals\n      .append(\"text\")\n      .attr(\"class\", styles.intervalLabel)\n      .attr(\"x\", 3)\n      .attr(\"y\", 9.5)\n\n    instants\n      .append(\"circle\")\n      .attr(\"cx\", band.itemHeight / 2)\n      .attr(\"cy\", band.itemHeight / 2)\n      .attr(\"r\", 5)\n\n    instants\n      .append(\"text\")\n      .attr(\"class\", styles.instantLabel)\n      .attr(\"x\", 15)\n      .attr(\"y\", 10)\n\n    const itemsSelections = [intervals, instants]\n\n    itemsSelections.forEach((selection) => {\n      selection.on(\"click\", (...[, chartItem]) =>\n        this.chartConfig.onChartItemClick(chartItem)\n      )\n      selection.style(\"cursor\", \"pointer\")\n    })\n\n    const {\n      chartConfig: { getItemLimitLeft, getItemLimitRight },\n    } = this\n\n    band.redraw = () => {\n      bandElements\n        .attr(\"x\", (chartItem: ChartData) =>\n          band.xScale!(getItemLimitLeft(chartItem))\n        )\n        .attr(\n          \"width\",\n          (chartItem: ChartData) =>\n            band.xScale!(getItemLimitRight(chartItem)) -\n            band.xScale!(getItemLimitLeft(chartItem))\n        )\n        .select(\"text\")\n        .text((chartItem: ChartData) => {\n          const scale =\n            band.xScale!(getItemLimitRight(chartItem)) -\n            band.xScale!(getItemLimitLeft(chartItem))\n          const maxLetters = scale / 9\n\n          return this.chartConfig.getItemText({ chartItem, maxLetters })\n        })\n\n      band.parts!.forEach((part) => part.redraw!())\n    }\n\n    this.bands[bandName] = band as Band\n    this.components.push(band)\n    this.bandY += band.h + bandGap\n    this.bandNum += 1\n\n    return this\n  }\n\n  public labels(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n    const labelWidth = 46\n    const labelHeight = 20\n    const labelTop = band.y + band.h - 10\n    const yText = 15\n\n    type LabelDef = {\n      className: string\n      getText: (min: Date, max: Date) => string\n      id: string\n      left: number\n      textAnchor: string\n      textLeft: number\n      top: number\n    }\n\n    const labelDefs: LabelDef[] = [\n      {\n        className: styles.bandMinMaxLabel,\n        getText: (min: Date) => toYear(min),\n        id: \"Start of the selected interval\",\n        left: 0,\n        textAnchor: \"start\",\n        textLeft: 4,\n        top: labelTop,\n      },\n      {\n        className: styles.bandMinMaxLabel,\n        getText: (...[, max]: [unknown, Date]) => toYear(max),\n        id: \"End of the selected interval\",\n        left: band.w - labelWidth,\n        textAnchor: \"end\",\n        textLeft: band.w - 4,\n        top: labelTop,\n      },\n      {\n        className: styles.bandMidLabel,\n        getText: (...[min, max]: [Date, Date]) =>\n          (max.getUTCFullYear() - min.getUTCFullYear()).toString(),\n        id: \"Length of the selected interval\",\n        left: (band.w - labelWidth) / 2,\n        textAnchor: \"middle\",\n        textLeft: band.w / 2,\n        top: labelTop,\n      },\n    ]\n\n    const bandLabels = this.chart\n      .append(\"g\")\n      .attr(\"id\", `${bandName}Labels`)\n      .attr(\"transform\", `translate(0,${band.y + band.h + 1})`)\n      .selectAll(`#${bandName}Labels`)\n      .data(labelDefs)\n      .enter()\n      .append(\"g\")\n\n    bandLabels\n      .append(\"rect\")\n      .attr(\"class\", styles.bandLabel)\n      .attr(\"x\", (label) => label.left)\n      .attr(\"width\", labelWidth)\n      .attr(\"height\", labelHeight)\n      .style(\"opacity\", 1)\n\n    const labels: RedrawComp &\n      Selection<SVGTextElement, LabelDef, SVGGElement, unknown> = bandLabels\n      .append(\"text\")\n      .attr(\"class\", (label) => label.className)\n      .attr(\"id\", (label) => label.id)\n      .attr(\"x\", (label) => label.textLeft)\n      .attr(\"y\", yText)\n      .attr(\"text-anchor\", (label) => label.textAnchor)\n\n    labels.redraw = () => {\n      const min = band.xScale.domain()[0]\n      const max = band.xScale.domain()[1]\n\n      labels.text((label) => label.getText(min, max))\n    }\n\n    band.parts.push(labels)\n    this.components.push(labels)\n\n    return this\n  }\n\n  public addBrush({\n    brushBandName,\n    targetBandName,\n  }: {\n    brushBandName: string\n    targetBandName: string\n  }) {\n    const {\n      bands: { [brushBandName]: brushBand },\n    } = this\n    const brush = brushX()\n\n    const {\n      dataContent: { maxDate, minDate },\n    } = this\n    const totalRange = [minDate!.getTime(), maxDate!.getTime()]\n\n    const selectionScale = scaleTime<number, Date>()\n      .domain([0, this.width])\n      .range(totalRange)\n\n    brush.on(\"brush\", (brushEvent) => {\n      let newDomain = brushBand.xScale.domain()\n\n      if (brushEvent.selection) {\n        const {\n          selection: [selectionStart, selectionEnd],\n        } = brushEvent\n\n        newDomain = [\n          selectionScale(Math.max(0, selectionStart)),\n          selectionScale(Math.min(this.width, selectionEnd)),\n        ]\n      }\n\n      selectAll(`.${styles.interval} rect`).style(\"filter\", \"none\")\n\n      this.bands[targetBandName].xScale.domain(newDomain)\n      this.bands[targetBandName].redraw!()\n    })\n\n    const xBrush = brushBand.g\n      .append(\"svg\")\n      .attr(\"class\", `x`)\n      .call(brush as any) // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    xBrush\n      .selectAll(\"rect\")\n      .attr(\"y\", 1)\n      .attr(\"height\", brushBand.h - 1)\n\n    return this\n  }\n\n  public redraw() {\n    this.components.forEach((component: RedrawComp) => component.redraw!())\n\n    return this\n  }\n}\n","fileName":"timeline-bands-brush-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/philosophers-timeline/philosophers-timeline\"\n\nconst PhilosophersTimeline = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default PhilosophersTimeline\n","type":"tsx"}},"key":"philosophers-timeline"},"meta":{"description":"Example of historical timeline using D3.js, where a legend is place to ease the navigation, as well as a more depurated style with tooltips."}}},"staticQueryHashes":[]}