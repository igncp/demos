{"componentChunkName":"component---src-pages-d-3-js-map-distorsions-tsx","path":"/d3js/map-distorsions/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.tsv"],"docs":[["d3-shape API reference","https://github.com/d3/d3-shape#api-reference"],["d3-shape Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-shape/index.d.ts"],["d3-axis API reference","https://github.com/d3/d3-axis#api-reference"],["d3-axis Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-axis/index.d.ts"],["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"]],"isCompleted":true,"name":"Map Distorsions","notes":["Dynamic (for performance) shadow","Custom color scale related to index","Tooltip and minor style changes"],"sources":["http://bl.ocks.org/mbostock/3709000"],"summary":["This chart has some special characteristics like multiple vertical axis, color scale with many values, and the interaction with the mouse.","When hovering a line, the rest are converted to gray, and this one gets appended to the parent element, so it renders on top.","There is a drop-shadow filter applied but only to the focused line, which improves a lot the performance."],"category":"d3js","files":{"demoCSS":[{"content":".mapDistorsionsChart {\n  svg {\n    font-family: sans-serif;\n    text-shadow: 1px 1px 1px #ddd;\n  }\n\n  .background path {\n    fill: none;\n    pointer-events: stroke;\n    stroke: none;\n    stroke-width: 20px;\n  }\n\n  .foreground path {\n    fill: none;\n    stroke-width: 1.5px;\n  }\n\n  .axis {\n    font-size: 12px;\n  }\n\n  .axis .title {\n    font-family: Times New Roman, sans-serif;\n    font-size: 11px;\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n\n  .axis line,\n  .axis path {\n    fill: none;\n    shape-rendering: crispEdges;\n    stroke: #000;\n  }\n\n  .label {\n    -webkit-transition: fill 125ms linear;\n\n    &.inactive {\n      fill: #ccc !important;\n    }\n  }\n\n  .active .label:not(.inactive) {\n    font-weight: bold;\n  }\n\n  .foreground path.inactive {\n    stroke: #ccc !important;\n    stroke-opacity: 0.5;\n    stroke-width: 1px;\n  }\n}\n","fileName":"map-distorsions.module.css"}],"demoTS":[{"content":"import {\n  Selection,\n  axisLeft,\n  extent,\n  line as lineD3,\n  range,\n  scaleLinear,\n  scalePoint,\n  scaleSqrt,\n  select,\n  tsv,\n} from \"d3\"\nimport qs from \"query-string\"\n\nimport * as styles from \"./map-distorsions.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype ProjectionItem = {\n  \"Acc. 40ยบ 150%\": string\n  \"Angular\": string\n  \"Areal\": string\n  \"Scale\": string\n  \"name\": string\n}\n\nconst fetchData = () =>\n  (tsv(`${ROOT_PATH}data/d3js/map-distorsions/data.tsv`) as unknown) as Promise<\n    ProjectionItem[]\n  >\n\nconst maxNameLength = 20\nconst getShortName = (name: string) =>\n  name.length > maxNameLength ? `${name.slice(0, maxNameLength)}...` : name\n\nconst margin = {\n  bottom: 20,\n  left: 200,\n  right: 40,\n  top: 90,\n}\nconst height = 750 - margin.top - margin.bottom\nconst axisYOffset = -9\n\nconst colors = [\"#7C7CC9\", \"#429742\", \"#63BD28\", \"#D14141\"]\n\nconst texts = {\n  title:\n    \"Comparison of 41 map projections by four different types of distortion. Lower is better.\",\n}\n\ntype RenderChart = (o: {\n  mapsDistorsions: ProjectionItem[]\n  rootElId: string\n}) => void\n\nenum DimensionName {\n  Acc40 = \"Acc. 40ยบ 150%\",\n  Angular = \"Angular\",\n  Areal = \"Areal\",\n  Scale = \"Scale\",\n}\n\nenum DimensionType {\n  Number = \"number\",\n  String = \"string\",\n}\n\nconst tooltipText = function (projectionItem: ProjectionItem) {\n  const dimensionsNames = [\n    DimensionName.Acc40,\n    DimensionName.Scale,\n    DimensionName.Areal,\n    DimensionName.Angular,\n  ] as Array<keyof ProjectionItem>\n  const valuesWithDimension = dimensionsNames.map(\n    (dimensionName) =>\n      `${Number(projectionItem[dimensionName]).toFixed(2)} (${dimensionName})`\n  )\n\n  return `${projectionItem.name}: ${valuesWithDimension.join(\", \")}`\n}\n\ntype Dimension = {\n  name: DimensionName | \"name\"\n  scale: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  type: DimensionType\n}\n\nconst filterColor = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n  filter\n    .append(\"feOffset\")\n    .attr(\"dx\", 0.5)\n    .attr(\"dy\", 0.5)\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"result\", \"offOut\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"offOut\")\n    .attr(\"result\", \"blurOut\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter\n    .append(\"feBlend\")\n    .attr(\"in\", \"SourceGraphic\")\n    .attr(\"in2\", \"blurOut\")\n    .attr(\"mode\", \"normal\")\n\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n}\n\nconst colorsScale = <P extends number>(domain: [number, number]) => {\n  const c = scaleLinear().domain(domain).range([0, 1])\n  const colorScale = scaleLinear<string>()\n    .domain(range(0, 1, 1.0 / colors.length))\n    .range(colors)\n\n  return (color: P) => colorScale(c(color))\n}\n\nconst renderChart: RenderChart = ({ mapsDistorsions, rootElId }) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.mapDistorsionsChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const dimensions: Dimension[] = [\n    {\n      name: \"name\",\n      scale: scalePoint().range([0, height]),\n      type: DimensionType.String,\n    },\n    {\n      name: DimensionName.Acc40,\n      scale: scaleLinear().range([0, height]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Scale,\n      scale: scaleLinear().range([height, 0]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Areal,\n      scale: scaleSqrt().range([height, 0]),\n      type: DimensionType.Number,\n    },\n    {\n      name: DimensionName.Angular,\n      scale: scaleLinear().range([height, 0]),\n      type: DimensionType.Number,\n    },\n  ]\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  svg\n    .append(\"text\")\n    .attr(\"class\", \"chart-title\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"transform\", `translate(${width / 2},-60)`)\n    .text(texts.title)\n    .style(\"font-weight\", \"bold\")\n\n  const x = scalePoint()\n    .domain(dimensions.map((dimension) => dimension.name))\n    .range([0, width])\n\n  const line = lineD3().defined((lineData) => !isNaN(lineData[1]))\n\n  const dimensionSelection = svg\n    .selectAll(\".dimension\")\n    .data(dimensions)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"dimension\")\n    .attr(\"transform\", (dimension) => `translate(${x(dimension.name)})`)\n\n  filterColor({ deviation: 2, id: \"lines\", slope: 0.4, svg })\n\n  const sortedData: ProjectionItem[] = mapsDistorsions\n    .slice(0)\n    .sort((...[{ name: nameA }, { name: nameB }]) => {\n      if (nameA === nameB) {\n        return 0\n      }\n\n      return nameA < nameB ? -1 : 1\n    })\n\n  const colorFn = colorsScale([0, sortedData.length - 1])\n\n  dimensions.forEach((dimItem: Dimension) =>\n    dimItem.scale.domain(\n      dimItem.type === DimensionType.Number\n        ? extent(\n            sortedData,\n            (projection: ProjectionItem) =>\n              +projection[dimItem.name as keyof ProjectionItem]\n          )\n        : sortedData\n            .map((projection: ProjectionItem) => {\n              const {\n                [dimItem.name as keyof ProjectionItem]: name,\n              } = projection\n\n              return getShortName(name)\n            })\n            .sort()\n    )\n  )\n\n  const draw = (projectionItem: ProjectionItem) => {\n    const allPoints: Array<[number, number]> = dimensions.map((dimItem) => {\n      const {\n        [dimItem.name as keyof ProjectionItem]: projectionValue,\n      } = projectionItem\n\n      return [\n        x(dimItem.name) as number,\n        dimItem.scale(\n          typeof projectionValue === \"string\"\n            ? getShortName(projectionValue)\n            : projectionValue\n        ),\n      ]\n    })\n\n    return line(allPoints)\n  }\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", styles.background)\n    .selectAll(\"path\")\n    .data<ProjectionItem>(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .style(\"cursor\", \"pointer\")\n    .attr(\"title\", tooltipText)\n    .on(\"click\", (...[, projectionItem]) => {\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          q: `${projectionItem.name} map projection`,\n          tbm: \"isch\", // Google Images\n        })}`\n      )\n    })\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", styles.foreground)\n    .selectAll(\"path\")\n    .data(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .attr(\"data-title\", tooltipText)\n\n  dimensionSelection\n    .append(\"g\")\n    .attr(\"class\", styles.axis)\n    .each(function (dimensionItem: Dimension) {\n      const yAxis = axisLeft(dimensionItem.scale)\n\n      return select(this).call(yAxis)\n    })\n    .append(\"text\")\n    .attr(\"class\", styles.title)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"y\", axisYOffset)\n    .text((dimensionItem) => dimensionItem.name)\n\n  svg\n    .select(`.${styles.axis}`)\n    .selectAll<SVGElement, ProjectionItem>(`text:not(.${styles.title})`)\n    .attr(\"class\", styles.label)\n    .data(sortedData, (projectionItem: ProjectionItem) => projectionItem.name)\n    .style(\"fill\", (...[, projectionIndex]: [unknown, number]) =>\n      colorFn(projectionIndex)\n    )\n\n  const moveToFront = function (this: SVGElement) {\n    const parentNode = this.parentNode as HTMLElement\n\n    parentNode.appendChild(this)\n  }\n\n  const projection = svg.selectAll<SVGElement, ProjectionItem>(\n    `.${styles.axis} text,.${styles.background} path,.${styles.foreground} path`\n  )\n\n  const mouseover = (...[, overProjection]: [unknown, ProjectionItem]) => {\n    svg.selectAll(`.${styles.foreground} path`).style(\"filter\", \"none\")\n    svg.classed(styles.active, true)\n    projection.classed(\n      styles.inactive,\n      (otherProjection: ProjectionItem) =>\n        otherProjection.name !== overProjection.name\n    )\n\n    projection\n      .filter(\n        (otherProjection: ProjectionItem) =>\n          otherProjection.name === overProjection.name\n      )\n      .each(moveToFront)\n  }\n\n  const mouseout = () => {\n    svg\n      .selectAll(`.${styles.foreground} path`)\n      .style(\"filter\", \"url(#drop-shadow-lines)\")\n    svg.classed(styles.active, false)\n    projection.classed(styles.inactive, false)\n  }\n\n  svg\n    .selectAll(`.${styles.foreground} path`)\n    .style(\"filter\", \"url(#drop-shadow-lines)\")\n    .style(\"stroke\", (...[, projectionItemIndex]) =>\n      colorFn(projectionItemIndex)\n    )\n\n  projection.on(\"mouseover\", mouseover).on(\"mouseout\", mouseout)\n\n  $(`.${styles.background} path, .${styles.foreground} path`).tooltip({\n    track: true,\n  })\n}\n\nconst main = async () => {\n  const mapsDistorsions = await fetchData()\n  const rootElId = CONTAINER_ID\n\n  renderChart({ mapsDistorsions, rootElId })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","fileName":"map-distorsions.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/map-distorsions/map-distorsions\"\n\nconst MapDistorsions = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MapDistorsions\n","type":"tsx"}},"key":"map-distorsions"},"meta":{"description":"Cuadruple variable example using D3.js, with a colored chart and four axis that are connected by lines and with an improved and depurated style."}}},"staticQueryHashes":[]}