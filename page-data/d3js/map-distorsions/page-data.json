{"componentChunkName":"component---src-pages-d-3-js-map-distorsions-tsx","path":"/d3js/map-distorsions/","result":{"pageContext":{"demoInfo":{"data":["data.tsv"],"docs":[],"name":"Map Distorsions","notes":["Dynamic (for performance) shadow","Custom color scale related to index","Tooltip and minor style changes"],"sources":["http://bl.ocks.org/mbostock/3709000"],"summary":[],"category":"d3js","files":{"d3utils":"import * as d3 from \"d3\"\nimport merge from \"lodash/merge\"\n\ntype Margin = {\n  bottom: number\n  left: number\n  right: number\n  top: number\n}\n\ntype SVG = d3.Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n// @TODO: types\n\nconst d3utils = {\n  colorsScale<P extends number = any>(colors: any, extent: any) {\n    const c = d3.scaleLinear().domain(extent).range([0, 1])\n    const colorScale = d3\n      .scaleLinear()\n      .domain(d3.range(0, 1, 1.0 / colors.length))\n      .range(colors)\n\n    return function (p: P) {\n      return colorScale(c(p))\n    }\n  },\n  filterBlackOpacity(id: string, svg: SVG, deviation: number, slope: number) {\n    const defs = svg.append(\"defs\")\n    const filter = defs\n      .append(\"filter\")\n      .attr(\"height\", \"500%\")\n      .attr(\"id\", `drop-shadow-${id}`)\n      .attr(\"width\", \"500%\")\n      .attr(\"x\", \"-200%\")\n      .attr(\"y\", \"-200%\")\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"SourceAlpha\")\n      .attr(\"stdDeviation\", deviation)\n\n    filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n    filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", slope)\n      .attr(\"type\", \"linear\")\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  },\n  filterColor(\n    id: string,\n    svg: SVG,\n    deviation: number,\n    slope: number,\n    extra?: any\n  ) {\n    if (extra == null) {\n      extra = false\n    }\n\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n    if (extra) {\n      filter\n        .attr(\"height\", \"500%\")\n        .attr(\"width\", \"500%\")\n        .attr(\"x\", \"-200%\")\n        .attr(\"y\", \"-200%\")\n    }\n\n    filter\n      .append(\"feOffset\")\n      .attr(\"dx\", 0.5)\n      .attr(\"dy\", 0.5)\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"result\", \"offOut\")\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"offOut\")\n      .attr(\"result\", \"blurOut\")\n      .attr(\"stdDeviation\", deviation)\n\n    filter\n      .append(\"feBlend\")\n      .attr(\"in\", \"SourceGraphic\")\n      .attr(\"in2\", \"blurOut\")\n      .attr(\"mode\", \"normal\")\n\n    return filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", slope)\n      .attr(\"type\", \"linear\")\n  },\n\n  middleTitle(svg: SVG, width: number, text: string, top: number | null) {\n    if (top == null) {\n      top = -15\n    }\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${String(width / 2)},${top})`)\n      .text(text)\n      .style(\"font-weight\", \"bold\")\n  },\n  svg(selector: string, width: number, height: number, margin: Margin) {\n    return d3\n      .select(selector)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n  },\n  tooltip(selector: string, customOpts: any) {\n    if (customOpts == null) {\n      customOpts = {}\n    }\n\n    const defaultOpts = {\n      elementSelector: \"\",\n      followElement: false,\n      followMouse: false,\n      leftOffst: 60,\n      tOpts: {\n        container: \"body\",\n        viewport: {\n          selector: \"#chart svg\",\n        },\n      },\n      topOffst: 40,\n    }\n\n    const opts = merge(defaultOpts, customOpts)\n\n    const sel: any = $(selector)\n\n    sel.tooltip(opts.tOpts)\n\n    if (opts.followMouse) {\n      $(selector).hover((e) =>\n        $(\".tooltip\").css({\n          left: `${String(e.pageX - opts.leftOffst)}px`,\n          top: `${String(e.pageY - opts.topOffst)}px`,\n        })\n      )\n    } else if (opts.followElement) {\n      $(selector).hover(() =>\n        $(\".tooltip\").css({\n          left: `${String(\n            $(opts.elementSelector).position().left - opts.leftOffst\n          )}px`,\n          top: `${String(\n            $(opts.elementSelector).position().top - opts.topOffst\n          )}px`,\n        })\n      )\n    }\n  },\n}\n\nexport default d3utils\n","demo":{"content":"import * as d3 from \"d3\"\nimport sortBy from \"lodash/sortBy\"\n\nimport d3utils from \"@/demos/_utils/d3utils\"\n\nimport \"./map-distorsions.styl\"\n\ntype Data = {\n  \"Acc. 40ยบ 150%\": string\n  Angular: string\n  Areal: string\n  Scale: string\n  name: string\n}\n\nconst fetchData = (): Promise<Data[]> =>\n  d3.tsv(`${ROOT_PATH}data/d3js/map-distorsions/data.tsv`) as Promise<any>\n\nconst margin = {\n  bottom: 20,\n  left: 200,\n  right: 40,\n  top: 90,\n}\nconst height = 750 - margin.top - margin.bottom\n\nconst colors = [\"#7C7CC9\", \"#429742\", \"#63BD28\", \"#D14141\"]\n\nconst texts = {\n  title:\n    \"Comparison of 41 map projections by four different types of distortion. Lower is better.\",\n}\n\ntype RenderChart = (o: { data: Data[]; rootElId: string }) => void\n\ntype Dimension = {\n  name: string\n  scale: any\n  type: Function\n}\n\nconst renderChart: RenderChart = ({ data, rootElId }) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"map-distorsions-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n\n  const dimensions: Dimension[] = [\n    {\n      name: \"name\",\n      scale: d3.scalePoint().range([0, height]),\n      type: String,\n    },\n    {\n      name: \"Acc. 40ยบ 150%\",\n      scale: d3.scaleLinear().range([0, height]),\n      type: Number,\n    },\n    {\n      name: \"Scale\",\n      scale: d3.scaleLinear().range([height, 0]),\n      type: Number,\n    },\n    {\n      name: \"Areal\",\n      scale: d3.scaleSqrt().range([height, 0]),\n      type: Number,\n    },\n    {\n      name: \"Angular\",\n      scale: d3.scaleLinear().range([height, 0]),\n      type: Number,\n    },\n  ]\n\n  const svg = d3utils.svg(`#${rootElId}`, width, height, margin)\n\n  d3utils.middleTitle(svg, width, texts.title, -60)\n\n  const x = d3\n    .scalePoint()\n    .domain(dimensions.map((d) => d.name))\n    .range([0, width])\n\n  const line = d3.line().defined((d) => !isNaN(d[1]))\n\n  const dimension = svg\n    .selectAll(\".dimension\")\n    .data(dimensions)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"dimension\")\n    .attr(\"transform\", (d) => `translate(${x(d.name)})`)\n\n  d3utils.filterColor(\"lines\", svg, 2, 0.4)\n\n  const sortedData: Data[] = sortBy<Data>(data, \"name\")\n  const colorFn = d3utils.colorsScale(colors, [0, sortedData.length - 1])\n\n  dimensions.forEach((dimItem: Dimension) =>\n    dimItem.scale.domain(\n      dimItem.type === Number\n        ? d3.extent(sortedData, (d: Data) => +d[dimItem.name as keyof Data])\n        : sortedData.map((d: Data) => d[dimItem.name as keyof Data]).sort()\n    )\n  )\n\n  const draw = function (d: any) {\n    return line(\n      dimensions.map((dimItem) => [\n        x(dimItem.name),\n        dimItem.scale(d[dimItem.name]),\n      ]) as any\n    )\n  }\n\n  const tooltipText = function (d: Data) {\n    const keys = [\n      \"Acc. 40ยบ 150%\",\n      \"Scale\",\n      \"Areal\",\n      \"Angular\",\n    ] as (keyof Data)[]\n    const vals = keys.map((item) => String(Number(d[item]).toFixed(2)))\n\n    return `${d.name}:  ${vals.join(\" - \")}`\n  }\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"background\")\n    .selectAll(\"path\")\n    .data<Data>(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .attr(\"data-title\", tooltipText)\n\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"foreground\")\n    .selectAll(\"path\")\n    .data(sortedData)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", draw)\n    .attr(\"data-title\", tooltipText)\n\n  dimension\n    .append(\"g\")\n    .attr(\"class\", \"axis\")\n    .each(function (d: Dimension) {\n      const yAxis = d3.axisLeft(d.scale)\n\n      return d3.select(this).call(yAxis)\n    })\n    .append(\"text\")\n    .attr(\"class\", \"title\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"y\", -9)\n    .text((d) => d.name)\n\n  svg\n    .select(\".axis\")\n    .selectAll<SVGElement, Data>(\"text:not(.title)\")\n    .attr(\"class\", \"label\")\n    .data(sortedData, (d: any) => d.name || d)\n    .style(\"fill\", (_d, i) => colorFn(i))\n\n  const moveToFront = function (this: SVGElement) {\n    const el = this.parentNode as HTMLElement\n\n    el.appendChild(this)\n  }\n\n  const mouseover = (_e: unknown, d: Data) => {\n    svg.selectAll(\".foreground path\").style(\"filter\", \"none\")\n    svg.classed(\"active\", true)\n    projection.classed(\"inactive\", (p: Data) => p.name !== d.name)\n\n    projection.filter((p: Data) => p.name === d.name).each(moveToFront)\n  }\n\n  const mouseout = () => {\n    svg.selectAll(\".foreground path\").style(\"filter\", \"url(#drop-shadow-lines)\")\n    svg.classed(\"active\", false)\n    projection.classed(\"inactive\", false)\n  }\n\n  svg\n    .selectAll(\".foreground path\")\n    .style(\"filter\", \"url(#drop-shadow-lines)\")\n    .style(\"stroke\", (_d, i) => colorFn(i))\n\n  const projection = svg\n    .selectAll<SVGElement, Data>(\".axis text,.background path,.foreground path\")\n    .on(\"mouseover\", mouseover)\n    .on(\"mouseout\", mouseout)\n\n  d3utils.tooltip(\".background path, .foreground path\", {\n    followMouse: true,\n    leftOffst: 100,\n    topOffst: 50,\n  })\n}\n\nconst main = async () => {\n  const data = await fetchData()\n  const rootElId = \"chart\"\n\n  renderChart({ data, rootElId })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/map-distorsions/map-distorsions\"\n\nconst MapDistorsions = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default MapDistorsions\n","type":"tsx"},"styl":".map-distorsions-chart\n  svg\n    font-family: sans-serif\n    text-shadow 1px 1px 1px #ddd\n\n  .background path\n    fill: none\n    pointer-events: stroke\n    stroke-width: 20px\n    stroke: none\n\n  .foreground path\n    fill: none\n    stroke-width: 1.5px\n\n  .axis\n    font-size 12px\n\n  .axis .title\n    font-family: Times New Roman\n    font-size: 11px\n    font-weight: bold\n    text-transform: uppercase\n\n  .axis line,\n  .axis path\n    fill: none\n    shape-rendering: crispEdges\n    stroke: #000\n\n  .label\n    -webkit-transition: fill 125ms linear\n\n    &.inactive\n      fill: #ccc !important\n\n  .active .label:not(.inactive)\n    font-weight: bold\n\n  .foreground path.inactive\n    stroke-opacity: .5\n    stroke-width: 1px\n    stroke: #ccc !important\n"},"key":"map-distorsions"}}},"staticQueryHashes":[]}