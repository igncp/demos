{"componentChunkName":"component---src-pages-d-3-js-force-js","path":"/d3js/force/","result":{"pageContext":{"demoInfo":{"data":["links.json","nodes.json"],"name":"Force","notes":[],"sources":["http://codepen.io/MidnightLightning/pen/dclbA"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"const main = () => {\n  const data = {}\n\n  const renderGraph = function () {\n    let links = data.links.filter((el) => el.source !== el.target)\n\n    const { nodes } = data\n    const width = $(\"#chart\").innerWidth()\n    const height = 600\n\n    const tick = function () {\n      path.attr(\"d\", (d) => {\n        const dx = d.target.x - d.source.x\n        const dy = d.target.y - d.source.y\n        const dr = Math.sqrt(dx * dx + dy * dy)\n\n        return `M${d.source.x},${d.source.y}A${dr},${dr} 0 0,1 ${d.target.x},${d.target.y}`\n      })\n      linkLabel\n        .attr(\"x\", (d) => {\n          const deltaX = d.target.x - d.source.x\n\n          if (d.source.y < d.target.y) {\n            return d.source.x + deltaX * 0.3 + 15\n          }\n\n          return d.source.x + deltaX * 0.3 - 15\n        })\n        .attr(\"y\", (d) => {\n          const deltaY = d.target.y - d.source.y\n\n          return d.source.y + deltaY * 0.3\n        })\n        .attr(\"text-anchor\", (d) => {\n          if (d.source.y < d.target.y) {\n            return \"beginning\"\n          }\n\n          return \"end\"\n        })\n\n      return node.attr(\"transform\", (d) => `translate(${d.x},${d.y})`)\n    }\n\n    const force = d3.layout\n      .force()\n      .nodes(nodes)\n      .links(links)\n      .size([width, height])\n      .linkDistance(60)\n      .charge(-400)\n      .linkStrength((d) => d.strength)\n      .on(\"tick\", tick)\n      .start()\n\n    const svg = d3\n      .select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n\n    svg\n      .append(\"svg:defs\")\n      .selectAll(\"marker\")\n      .data([\"end\"])\n      .enter()\n      .append(\"svg:marker\")\n      .attr(\"id\", String)\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 15)\n      .attr(\"refY\", -1.5)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"svg:path\")\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\n    links = svg\n      .selectAll(\".link\")\n      .data(force.links())\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"link\")\n\n    const path = links\n      .append(\"svg:path\")\n      .attr(\"class\", \"link\")\n      .attr(\"marker-end\", \"url(#end)\")\n\n    const linkLabel = links.append(\"text\").text((d) => d.name)\n\n    const node = svg\n      .selectAll(\".node\")\n      .data(force.nodes())\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .call(force.drag)\n\n    node.append(\"circle\").attr(\"r\", 5)\n\n    return node\n      .append(\"text\")\n      .attr(\"x\", 12)\n      .attr(\"dy\", \".35em\")\n      .text((d) => d.name)\n  }\n\n  return async.parallel(\n    [\n      function (next) {\n        return d3.json(\n          `${ROOT_PATH}data/d3js/force/nodes.json`,\n          (_error, root) => {\n            data.nodes = root\n\n            return next()\n          }\n        )\n      },\n      function (next) {\n        return d3.json(\n          `${ROOT_PATH}data/d3js/force/links.json`,\n          (_error, root) => {\n            data.links = root\n\n            return next()\n          }\n        )\n      },\n    ],\n    renderGraph\n  )\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/force/force\"\nimport \"@/demos/force/force.styl\"\n\nconst Force = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"force-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Force\n","styl":".force-chart\n    path.link \n      fill: none;\n      stroke: #666;\n      stroke-width: 1.5px;\n    \n\n    circle \n      fill: #9c9;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    \n\n    text \n      fill: #999;\n      font: 10px sans-serif;\n      pointer-events: none;\n    \n\n    .node text  \n      font-size:12px;\n      fill:#000;"},"key":"force"}}},"staticQueryHashes":[]}