{"componentChunkName":"component---src-pages-d-3-js-force-tsx","path":"/d3js/force/","result":{"pageContext":{"demoInfo":{"dataFiles":["links.json","nodes.json"],"docs":[],"isCompleted":true,"name":"Force","notes":[],"sources":["http://codepen.io/MidnightLightning/pen/dclbA"],"summary":[],"category":"d3js","files":{"cssModule":".forceChart {\n  .linkCurved {\n    fill: none;\n    stroke: #666;\n    stroke-width: 1.5px;\n  }\n\n  circle {\n    fill: #9c9;\n    stroke: #fff;\n    stroke-width: 1.5px;\n  }\n\n  text {\n    fill: #999;\n    font: 20px sans-serif;\n    pointer-events: none;\n  }\n\n  .node text {\n    fill: #000;\n    font-size: 12px;\n  }\n}\n","demo":[{"content":"import {\n  drag,\n  forceCenter,\n  forceLink as forceLinkD3,\n  forceManyBody,\n  forceSimulation,\n  json,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./force.module.css\"\n\ntype Node = {\n  fx: number | null\n  fy: number | null\n  index: number // eslint-disable-line id-denylist\n  name: string\n  x: number\n  y: number\n}\n\ntype Link = {\n  id: number\n  name: string\n  source: Node\n  target: Node\n}\n\ntype ForceData = {\n  links: Link[]\n  nodes: Node[]\n}\n\ntype CustomDragEvent = DragEvent & { active: boolean }\n\nconst fetchForceData = async (): Promise<ForceData> => {\n  const [nodes, links] = await Promise.all([\n    json(`${ROOT_PATH}data/d3js/force/nodes.json`),\n    json(`${ROOT_PATH}data/d3js/force/links.json`),\n  ])\n\n  return {\n    links,\n    nodes,\n  } as ForceData\n}\n\nconst settings = {\n  circleRadius: 5,\n  defaultTextOpacity: 0.5,\n  strength: -40,\n  textDY: 5,\n}\n\nconst height = 600\n\ntype RenderGraph = (o: { forceData: ForceData; rootElId: string }) => void\n\nconst renderGraph: RenderGraph = ({ forceData, rootElId }) => {\n  const { links, nodes } = forceData\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.forceChart)\n\n  const { width } = rootEl.getBoundingClientRect()\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  const ticked = () => {\n    /* eslint-disable @typescript-eslint/no-use-before-define */\n    updateLinks()\n    updateNodes()\n    /* eslint-enable @typescript-eslint/no-use-before-define */\n  }\n\n  const simulation = forceSimulation(nodes)\n    .force(\"charge\", forceManyBody().strength(settings.strength))\n    .force(\"center\", forceCenter(width / 2, height / 2))\n    .force(\"link\", forceLinkD3().links(links))\n    .on(\"tick\", ticked)\n\n  const dragstarted = (...[dragEvent, forceNode]: [CustomDragEvent, Node]) => {\n    if (!dragEvent.active) {\n      simulation.alphaTarget(0.3).restart()\n    }\n\n    forceNode.fx = forceNode.x\n    forceNode.fy = forceNode.y\n  }\n\n  const dragged = (...[dragEvent, forceNode]: [CustomDragEvent, Node]) => {\n    forceNode.fx = dragEvent.x\n    forceNode.fy = dragEvent.y\n  }\n\n  const dragended = (...[dragEvent, forceNode]: [CustomDragEvent, Node]) => {\n    if (!dragEvent.active) {\n      simulation.alphaTarget(0)\n    }\n\n    forceNode.fx = null\n    forceNode.fy = null\n  }\n\n  const updateLinks = () => {\n    const linksEls = svg\n      .selectAll<SVGPathElement, ForceData[\"links\"]>(`.${styles.linkCurved}`)\n      .data(links)\n\n    linksEls\n      .enter()\n      .append<SVGPathElement>(\"path\")\n      .merge(linksEls)\n      .attr(\"d\", (forceLink) => {\n        const dx = forceLink.target.x - forceLink.source.x\n        const dy = forceLink.target.y - forceLink.source.y\n        const dr = Math.sqrt(dx * dx + dy * dy) * 1.3\n\n        return `M${forceLink.source.x},${forceLink.source.y}A${dr},${dr} 0 0,1 ${forceLink.target.x},${forceLink.target.y}`\n      })\n      .attr(\"class\", styles.linkCurved)\n\n    linksEls.exit().remove()\n  }\n\n  const updateNodes = () => {\n    const nodesEls = svg\n      .selectAll<SVGCircleElement, ForceData[\"nodes\"]>(\"circle\")\n      .data(nodes)\n    const textsEls = svg\n      .selectAll<SVGTextElement, ForceData[\"nodes\"]>(\"text\")\n      .data(nodes)\n\n    nodesEls\n      .enter()\n      .append(\"circle\")\n      .merge(nodesEls)\n      .attr(\"cx\", (forceNode) => forceNode.x)\n      .attr(\"cy\", (forceNode) => forceNode.y)\n      .attr(\"r\", () => settings.circleRadius)\n      .attr(\"fill\", \"black\")\n      .each(function () {\n        select<SVGCircleElement, ForceData[\"nodes\"][0]>(this)\n          .on(\"mouseover\", (...[, forceNode]) => {\n            select(`#node-text-${forceNode.index}`).style(\"opacity\", 1)\n          })\n          .on(\"mouseleave\", (...[, forceNode]) => {\n            select(`#node-text-${forceNode.index}`).style(\n              \"opacity\",\n              settings.defaultTextOpacity\n            )\n          })\n      })\n      .call(\n        drag<SVGCircleElement, ForceData[\"nodes\"][0]>()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      )\n\n    textsEls\n      .enter()\n      .append(\"text\")\n      .merge(textsEls)\n      .text((forceNode) => forceNode.name)\n      .attr(\"x\", (forceNode) => forceNode.x)\n      .attr(\"y\", (forceNode) => forceNode.y)\n      .attr(\"dy\", () => settings.textDY)\n      .attr(\"id\", (forceNode) => `node-text-${forceNode.index}`)\n      .style(\"opacity\", settings.defaultTextOpacity)\n\n    nodesEls.exit().remove()\n    textsEls.exit().remove()\n  }\n\n  svg\n    .selectAll(`.${styles.linkCurved}`)\n    .data(links)\n    .enter()\n    .append(\"svg:path\")\n    .attr(\"class\", styles.linkCurved)\n    .attr(\"marker-end\", \"url(#end)\")\n    .attr(\"id\", (...[, forceLinkIndex]) => `link-${forceLinkIndex}`)\n}\n\nconst main = async () => {\n  const forceData = await fetchForceData()\n\n  renderGraph({\n    forceData,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","fileName":"force"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/force/force\"\n\nconst Force = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Force\n","type":"tsx"}},"key":"force"},"meta":{"description":"Force Chart example using D3.js with two source files of data, that shows how a process with several cycles and paths can be represented."}}},"staticQueryHashes":[]}