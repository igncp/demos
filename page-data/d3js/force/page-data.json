{"componentChunkName":"component---src-pages-d-3-js-force-tsx","path":"/d3js/force/","result":{"pageContext":{"demoInfo":{"data":["links.json","nodes.json"],"docs":[],"name":"Force","notes":[],"sources":["http://codepen.io/MidnightLightning/pen/dclbA"],"summary":[],"category":"d3js","files":{"demo":{"content":"import * as d3 from \"d3\"\n\nimport \"./force.styl\"\n\ntype Node = {\n  fx: number | null\n  fy: number | null\n  index: number\n  name: string\n  x: number\n  y: number\n}\n\ntype Data = {\n  links: Array<{\n    index: number\n    name: string\n    source: Node\n    target: Node\n  }>\n  nodes: Node[]\n}\n\ntype CustomDragEvent = DragEvent & { active: boolean }\n\nconst fetchData = async (): Promise<Data> => {\n  const [nodes, links] = await Promise.all([\n    d3.json(`${ROOT_PATH}data/d3js/force/nodes.json`),\n    d3.json(`${ROOT_PATH}data/d3js/force/links.json`),\n  ])\n\n  return {\n    links,\n    nodes,\n  } as Data\n}\n\nconst settings = {\n  circleRadius: 5,\n  defaultTextOpacity: 0.5,\n  strength: -40,\n  textDY: 5,\n}\n\nconst height = 600\n\ntype RenderGraph = (o: { rootElId: string; data: Data }) => void\n\nconst renderGraph: RenderGraph = ({ rootElId, data }) => {\n  const { nodes, links } = data\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"force-chart\")\n\n  const { width } = rootEl.getBoundingClientRect()\n\n  const ticked = () => {\n    updateLinks()\n    updateNodes()\n  }\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody().strength(settings.strength))\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n    .force(\"link\", d3.forceLink().links(links))\n    .on(\"tick\", ticked)\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  svg\n    .selectAll(\".link-curved\")\n    .data(links)\n    .enter()\n    .append(\"svg:path\")\n    .attr(\"class\", \"link-curved\")\n    .attr(\"marker-end\", \"url(#end)\")\n    .attr(\"id\", (_d, i) => `link-${i}`)\n\n  const updateLinks = () => {\n    const linksEls = svg\n      .selectAll<SVGPathElement, Data[\"links\"]>(\".link-curved\")\n      .data(links)\n\n    linksEls\n      .enter()\n      .append<SVGPathElement>(\"path\")\n      .merge(linksEls)\n      .attr(\"d\", (d) => {\n        const dx = d.target.x - d.source.x\n        const dy = d.target.y - d.source.y\n        const dr = Math.sqrt(dx * dx + dy * dy) * 1.3\n\n        return `M${d.source.x},${d.source.y}A${dr},${dr} 0 0,1 ${d.target.x},${d.target.y}`\n      })\n      .attr(\"class\", \"link-curved\")\n\n    linksEls.exit().remove()\n  }\n\n  const updateNodes = () => {\n    const nodesEls = svg\n      .selectAll<SVGCircleElement, Data[\"nodes\"]>(\"circle\")\n      .data(nodes)\n    const textsEls = svg\n      .selectAll<SVGTextElement, Data[\"nodes\"]>(\"text\")\n      .data(nodes)\n\n    nodesEls\n      .enter()\n      .append(\"circle\")\n      .merge(nodesEls)\n      .attr(\"cx\", (d) => d.x)\n      .attr(\"cy\", (d) => d.y)\n      .attr(\"r\", () => settings.circleRadius)\n      .attr(\"fill\", \"black\")\n      .each(function () {\n        d3.select<SVGCircleElement, Data[\"nodes\"][0]>(this)\n          .on(\"mouseover\", (_ev, d) => {\n            d3.select(`#node-text-${d.index}`).style(\"opacity\", 1)\n          })\n          .on(\"mouseleave\", (_ev, d) => {\n            d3.select(`#node-text-${d.index}`).style(\n              \"opacity\",\n              settings.defaultTextOpacity\n            )\n          })\n      })\n      .call(\n        d3\n          .drag<SVGCircleElement, Data[\"nodes\"][0]>()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      )\n\n    textsEls\n      .enter()\n      .append(\"text\")\n      .merge(textsEls)\n      .text((d) => d.name)\n      .attr(\"x\", (d) => d.x)\n      .attr(\"y\", (d) => d.y)\n      .attr(\"dy\", () => settings.textDY)\n      .attr(\"id\", (d) => `node-text-${d.index}`)\n      .style(\"opacity\", settings.defaultTextOpacity)\n\n    nodesEls.exit().remove()\n    textsEls.exit().remove()\n  }\n\n  const dragstarted = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) simulation.alphaTarget(0.3).restart()\n    d.fx = d.x\n    d.fy = d.y\n  }\n\n  const dragged = (event: CustomDragEvent, d: Node) => {\n    d.fx = event.x\n    d.fy = event.y\n  }\n\n  const dragended = (event: CustomDragEvent, d: Node) => {\n    if (!event.active) simulation.alphaTarget(0)\n    d.fx = null\n    d.fy = null\n  }\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderGraph({\n    data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/force/force\"\n\nconst Force = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Force\n","type":"tsx"},"styl":".force-chart\n  .link-curved\n    fill: none;\n    stroke-width: 1.5px;\n    stroke: #666;\n\n  circle\n    fill: #9c9;\n    stroke-width: 1.5px;\n    stroke: #fff;\n\n  text\n    fill: #999;\n    font: 20px sans-serif;\n    pointer-events: none;\n\n  .node text\n    fill:#000;\n    font-size:12px;\n"},"key":"force"}}},"staticQueryHashes":[]}