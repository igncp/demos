{"componentChunkName":"component---src-pages-d-3-js-chord-js","path":"/d3js/chord/","result":{"pageContext":{"demoInfo":{"data":["data.csv"],"name":"Chord","notes":["Added filters with drop shadow and low opacity","Changed scheme and match each color with a country"],"sources":["http://bl.ocks.org/mbostock/1308257"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"const main = () => {\n  const height = 500\n  const width = $(\"#chart\").innerWidth() / 2 - 20\n  const margin = {\n    bottom: 20,\n    top: 50,\n  }\n\n  const r1 = Math.min(width, height) / 2 - 4\n  const r0 = r1 - 20\n  const format = d3.format(\",.3r\")\n  const debits = []\n  const credits = []\n\n  const arc = d3.svg.arc().innerRadius(r0).outerRadius(r1)\n  const chord = d3.svg.chord().radius(r0)\n  const svg = d3.select(\"#chart\")\n\n  const charts = svg\n    .selectAll(\"div\")\n    .data([debits, credits])\n    .enter()\n    .append(\"div\")\n    .style(\"display\", \"inline-block\")\n    .style(\"width\", `${width}px`)\n    .style(\"height\", `${height + margin.top + margin.bottom}px`)\n    .append(\"svg:svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"svg:g\")\n    .attr(\n      \"transform\",\n      `translate(${width / 2},${String(height / 2 + margin.top)})`\n    )\n\n  const leftChart = charts.filter((_d, i) => i === 0)\n  const rightChart = charts.filter((_d, i) => i === 1)\n\n  const setLabel = function (chart, label) {\n    return chart\n      .append(\"text\")\n      .text(label)\n      .attr(\"transform\", `translate(0,${(-1 * height) / 2 - 10})`)\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n  }\n\n  setLabel(leftChart, \"Debits\")\n  setLabel(rightChart, \"Credits\")\n\n  d3.csv(`${ROOT_PATH}data/d3js/chord/data.csv`, (data) => {\n    const countries = {}\n    const array = []\n\n    let n = 0\n\n    const country = function (d) {\n      if (!countries[d]) {\n        countries[d] = {\n          id: n++,\n          name: d,\n        }\n      }\n\n      return countries[d]\n    }\n\n    const value = function () {\n      return +this.amount\n    }\n\n    data.forEach((d) => {\n      d.creditor = country(d.creditor)\n      d.debtor = country(d.debtor)\n      d.debtor.risk = d.risk\n      d.valueOf = value\n    })\n\n    for (\n      let i = 0, _i = 0;\n      0 <= n ? _i < n : _i > n;\n      i = 0 <= n ? ++_i : --_i\n    ) {\n      debits[i] = []\n      credits[i] = []\n\n      for (\n        let j = 0, _j = 0;\n        0 <= n ? _j < n : _j > n;\n        j = 0 <= n ? ++_j : --_j\n      ) {\n        debits[i][j] = 0\n        credits[i][j] = 0\n      }\n    }\n\n    data.forEach((d) => {\n      debits[d.creditor.id][d.debtor.id] = d\n      credits[d.debtor.id][d.creditor.id] = d\n      array[d.creditor.id] = d.creditor\n      array[d.debtor.id] = d.debtor\n    })\n\n    const layout = d3.layout\n      .chord()\n      .sortGroups(d3.descending)\n      .sortSubgroups(d3.descending)\n      .sortChords(d3.descending)\n      .padding(0.04)\n\n    const addDropShadowFilter = function (id, deviation, slope) {\n      const defs = charts.append(\"defs\")\n      const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n      filter.append(\"feOffset\").attr({\n        dx: 0.5,\n        dy: 0.5,\n        in: \"SourceGraphic\",\n        result: \"offOut\",\n      })\n\n      filter.append(\"feGaussianBlur\").attr({\n        in: \"offOut\",\n        result: \"blurOut\",\n        stdDeviation: deviation,\n      })\n\n      filter.append(\"feBlend\").attr({\n        in: \"SourceGraphic\",\n        in2: \"blurOut\",\n        mode: \"normal\",\n      })\n\n      filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n        slope,\n        type: \"linear\",\n      })\n    }\n\n    addDropShadowFilter(\"chords\", 2, 0.4)\n    addDropShadowFilter(\"headings\", 3, 0.5)\n\n    const colours = [\n      \"#39B347\",\n      \"#C92E47\",\n      \"#DB704D\",\n      \"#FFA22C\",\n      \"#5E92AA\",\n      \"#F8EDD3\",\n    ]\n\n    const c = d3.scale\n      .linear()\n      .domain(d3.extent([0, n - 1]))\n      .range([0, 1])\n\n    const heatmapColour = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colours.length))\n      .range(colours)\n\n    const fill = function (d) {\n      return heatmapColour(c(d))\n    }\n\n    return charts.each(function (matrix, jj) {\n      const svgComp = d3.select(this)\n\n      layout.matrix(matrix)\n\n      svgComp\n        .selectAll(\"path.chord\")\n        .data(layout.chords)\n        .enter()\n        .append(\"svg:path\")\n        .attr(\"class\", \"chord\")\n        .style(\"fill\", (d) => fill(d.target.index))\n        .style(\"filter\", \"url(#drop-shadow-chords)\")\n        .style(\"stroke\", (d) => d3.rgb(fill(d.target.index)).darker())\n        .style(\"stroke-width\", 2)\n        .attr(\"d\", chord)\n        .append(\"svg:title\")\n        .text(\n          (d) =>\n            `${d.source.value.debtor.name} owes ${\n              d.source.value.creditor.name\n            } $${format(d.source.value)}B.`\n        )\n\n      const g = svgComp\n        .selectAll(\"g.group\")\n        .data(layout.groups)\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"class\", \"group\")\n\n      g.append(\"svg:path\")\n        .style(\"fill\", (d) => fill(d.index))\n        .attr(\"id\", (d) => `group${d.index}-${jj}`)\n        .attr(\"d\", arc)\n        .style(\"filter\", () => \"url(#drop-shadow-headings)\")\n        .append(\"svg:title\")\n        .text(\n          (d) =>\n            `${array[d.index].name} ${jj ? \"owes\" : \"is owed\"} $${format(\n              d.value\n            )}B.`\n        )\n\n      g.append(\"svg:text\")\n        .attr(\"x\", 6)\n        .attr(\"dy\", 15)\n        .filter((d) => d.value > 150)\n        .append(\"svg:textPath\")\n        .attr(\"xlink:href\", (d) => `#group${d.index}-${jj}`)\n        .text((d) => array[d.index].name)\n        .attr(\"class\", \"heading-title\")\n    })\n  })\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/chord/chord\"\n\nimport \"@/demos/chord/chord.styl\"\n\nconst Chord = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"chord-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Chord\n","styl":".chord-chart\n    path.chord {\n      stroke-width: .75;\n      fill-opacity: .75;\n    }\n    \n    .chart-title\n        font-weight bold\n\n    .group text {\n      font: 11px sans-serif;\n      pointer-events: none;\n    }\n\n    .group path {\n      stroke: #000;\n    }\n\n    .heading-title\n        font-weight bold\n        font-size 15px"},"key":"chord"}}},"staticQueryHashes":[]}