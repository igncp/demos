{"componentChunkName":"component---src-pages-d-3-js-world-map-tsx","path":"/d3js/world-map/","result":{"pageContext":{"demoInfo":{"data":["world.json"],"name":"World Map","notes":["Added the mouse over stroke and the zooming-unzooming when clicking in countries (from third source)","Click a country to zoom, click in the water to set zoom back to normal"],"sources":["http://bost.ocks.org/mike/map/","http://bl.ocks.org/mbostock/raw/4090846/world-50m.json","http://bl.ocks.org/mbostock/2206590"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"import * as d3 from \"d3\"\nimport * as topojson from \"topojson-client\"\n\ntype Data = {\n  id: number\n} & d3.GeoPermissibleObjects\n\nconst fetchData = () => d3.json(`${ROOT_PATH}data/d3js/world-map/world.json`)\n\nconst color = d3.scaleOrdinal(d3.schemePastel2)\n\ntype RenderChart = (o: { world: any; rootElId: string }) => void\n\nconst renderChart: RenderChart = ({ world, rootElId }) => {\n  const { width } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n  const height = 500\n\n  const colorFn = function (d: Data) {\n    return color(d.id.toString())\n  }\n\n  const setZoom = function (_e: unknown, d: Data) {\n    if (!d) {\n      countries\n        .transition()\n        .duration(3500)\n        .attr(\n          \"transform\",\n          `translate(${width / 2},${height / 2})scale(${1})translate(${\n            -width / 2\n          },${-height / 2})`\n        )\n\n      return\n    }\n\n    const centroid = path.centroid(d)\n\n    const x = centroid[0]\n    const y = centroid[1]\n\n    countries\n      .transition()\n      .duration(3500)\n      .attr(\n        \"transform\",\n        `translate(${width / 2},${height / 2})scale(${8})translate(${-x},${-y})`\n      )\n  }\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  svg\n    .append(\"rect\")\n    .attr(\"class\", \"background\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n    .on(\"click\", setZoom as any)\n    .style(\"fill\", \"#daedff\")\n\n  const content = svg.append(\"g\")\n\n  const projection = d3\n    .geoMercator()\n    .center([0, 45.4])\n    .scale(150)\n    .translate([width / 2, height / 2])\n\n  const path = d3.geoPath().projection(projection)\n  const data = (topojson.feature(world, world.objects.countries) as any)\n    .features\n\n  const countries = content\n    .selectAll(\".country\")\n    .data<Data>(data)\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", (d: Data) => `country ${d.id}`)\n    .attr(\"d\", path)\n    .style(\"fill\", colorFn)\n    .style(\"stroke\", \"#FFF\")\n    .style(\"stroke-width\", 0.2)\n\n  countries.on(\"mouseover\", function () {\n    return d3.select(this).style(\"stroke\", \"black\").style(\"stroke-width\", \"1px\")\n  })\n\n  countries.on(\"mouseout\", function () {\n    return d3\n      .select(this)\n      .style(\"stroke\", \"white\")\n      .style('\"stroke-width\"', \".2px\")\n  })\n\n  countries.on(\"click\", setZoom)\n}\n\nconst main = async () => {\n  const world = await fetchData()\n\n  renderChart({\n    rootElId: \"chart\",\n    world,\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/world-map/world-map\"\n\nconst WorldMap = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"world-map-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default WorldMap\n","type":"tsx"},"styl":null},"key":"world-map"}}},"staticQueryHashes":[]}