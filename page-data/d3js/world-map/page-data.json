{"componentChunkName":"component---src-pages-d-3-js-world-map-tsx","path":"/d3js/world-map/","result":{"pageContext":{"demoInfo":{"data":["world.json"],"docs":[],"isCompleted":true,"name":"World Map","notes":["Added the mouse over stroke and the zooming-unzooming when clicking in countries (from third source)","Click a country to zoom, click in the water or the same country to set zoom back to normal"],"sources":["http://bost.ocks.org/mike/map/","http://bl.ocks.org/mbostock/raw/4090846/world-50m.json","http://bl.ocks.org/mbostock/2206590"],"summary":[],"category":"d3js","files":{"cssModule":"","demo":[{"content":"import {\n  GeoPermissibleObjects,\n  geoMercator,\n  geoPath,\n  interpolateRdYlGn,\n  json,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { feature } from \"topojson-client\"\n\ntype CountryData = GeoPermissibleObjects & {\n  id: number\n}\n\nconst fetchData = () => json(`${ROOT_PATH}data/d3js/world-map/world.json`)\n\nconst transitionDuration = 1500\n\ntype RenderChart = (o: { rootElId: string; world: any }) => void\n\nconst renderChart: RenderChart = ({ rootElId, world }) => {\n  const state: {\n    lastZoomId: number | null\n  } = {\n    lastZoomId: null,\n  }\n\n  const { features: featuresData } = feature(\n    world,\n    world.objects.countries\n  ) as any\n\n  const colorScale = scaleLinear()\n    .domain([0, featuresData.length - 1])\n    .range([0, 1])\n  const colorFn = (_: CountryData, countryIndex: number) =>\n    interpolateRdYlGn(colorScale(countryIndex))\n\n  const { width } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n  const height = 500\n\n  const setZoom = (_zoomEvent: unknown, countryData: CountryData) => {\n    if (!(countryData as unknown) || state.lastZoomId === countryData.id) {\n      state.lastZoomId = null\n\n      countries // eslint-disable-line @typescript-eslint/no-use-before-define\n        .transition()\n        .duration(transitionDuration)\n        .attr(\n          \"transform\",\n          `translate(${width / 2},${height / 2})scale(${1})translate(${\n            -width / 2\n          },${-height / 2})`\n        )\n\n      return\n    }\n\n    state.lastZoomId = countryData.id\n\n    const centroid = path.centroid(countryData) // eslint-disable-line @typescript-eslint/no-use-before-define\n\n    const x = centroid[0]\n    const y = centroid[1]\n\n    countries // eslint-disable-line @typescript-eslint/no-use-before-define\n      .transition()\n      .duration(transitionDuration)\n      .attr(\n        \"transform\",\n        `translate(${width / 2},${height / 2})scale(${8})translate(${-x},${-y})`\n      )\n  }\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n  svg\n    .append(\"rect\")\n    .attr(\"class\", \"background\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n    .on(\"click\", setZoom as any)\n    .style(\"fill\", \"#daedff\")\n\n  const content = svg.append(\"g\")\n\n  const projection = geoMercator()\n    .center([0, 45.4])\n    .scale(150)\n    .translate([width / 2, height / 2])\n\n  const path = geoPath().projection(projection)\n\n  const countries = content\n    .selectAll(\".country\")\n    .data<CountryData>(featuresData)\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", (countryData: CountryData) => `country ${countryData.id}`)\n    .attr(\"d\", path)\n    .style(\"fill\", colorFn)\n    .style(\"stroke\", \"#FFF\")\n    .style(\"stroke-width\", 0.2)\n\n  countries.on(\"mouseover\", function () {\n    return select(this).style(\"stroke\", \"black\").style(\"stroke-width\", \"1px\")\n  })\n\n  countries.on(\"mouseout\", function () {\n    return select(this).style(\"stroke\", \"white\").style('\"stroke-width\"', \".2px\")\n  })\n\n  countries.on(\"click\", setZoom)\n}\n\nconst main = async () => {\n  const world = await fetchData()\n\n  renderChart({\n    rootElId: \"chart\",\n    world,\n  })\n}\n\nexport default main\n","fileName":"world-map"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/world-map/world-map\"\n\nconst WorldMap = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div className=\"world-map-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default WorldMap\n","type":"tsx"}},"key":"world-map"},"meta":{"description":"Example of world map using D3.js, with the zoom functionality and also the possibility to unzoom. The color scale is changed, among other properties."}}},"staticQueryHashes":[]}