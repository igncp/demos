{
    "componentChunkName": "component---src-pages-d-3-js-world-map-tsx",
    "path": "/d3js/world-map/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["world.json"],"docs":[],"isCompleted":true,"name":"World Map","notes":[],"sources":["http://bost.ocks.org/mike/map/","http://bl.ocks.org/mbostock/raw/4090846/world-50m.json","http://bl.ocks.org/mbostock/2206590"],"summary":[],"category":"d3js","files":{"demoCSS":[],"demoTS":[{"content":"import {\n  D3DragEvent,\n  GeoPath,\n  GeoPermissibleObjects,\n  Selection,\n  drag as dragD3,\n  geoMercator,\n  geoPath,\n  interpolateBlues,\n  interpolateRdYlGn,\n  interpolateSpectral,\n  interpolateTurbo,\n  interpolateViridis,\n  json,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { feature } from \"topojson-client\"\n\nconst CONTAINER_ID = \"chart\"\nconst UPDATE_BUTTON_ID = \"update-colors\"\n\ntype CountryData = GeoPermissibleObjects & {\n  id: number\n}\n\nconst fetchData = () => json(`${ROOT_PATH}data/d3js/world-map/world.json`)\n\nconst transitionDuration = 1500\n\ntype WorldData = any // eslint-disable-line @typescript-eslint/no-explicit-any\n\ntype ChartConfig = {\n  rootElId: string\n  world: WorldData\n}\n\ntype Bounds = [[number, number], [number, number]]\n\nconst calculateBounds = ({\n  featuresData,\n  projectionPath,\n}: {\n  featuresData: any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  projectionPath: GeoPath\n}) =>\n  featuresData.reduce<Bounds>(\n    (...[acc, featureData]) => {\n      const dataBounds = projectionPath.bounds(featureData)\n\n      acc[0][0] = Math.min(acc[0][0], dataBounds[0][0])\n      acc[0][1] = Math.min(acc[0][1], dataBounds[0][1])\n      acc[1][0] = Math.max(acc[1][0], dataBounds[1][0])\n      acc[1][1] = Math.max(acc[1][1], dataBounds[1][1])\n\n      return acc\n    },\n    [\n      [Infinity, Infinity],\n      [-Infinity, -Infinity],\n    ]\n  )\n\nconst boundDrag = ({\n  bounds,\n  dragPoint,\n  height,\n  width,\n}: {\n  bounds: Bounds\n  dragPoint: { draggedX: number; draggedY: number }\n  height: number\n  width: number\n}) => {\n  if (dragPoint.draggedX * -1 < bounds[0][0]) {\n    dragPoint.draggedX = bounds[0][0] * -1\n  } else if (dragPoint.draggedX * -1 > bounds[1][0] - width) {\n    dragPoint.draggedX = (bounds[1][0] - width) * -1\n  }\n\n  if (dragPoint.draggedY * -1 < bounds[0][1]) {\n    dragPoint.draggedY = bounds[0][1] * -1\n  } else if (dragPoint.draggedY * -1 > bounds[1][1] - height) {\n    dragPoint.draggedY = (bounds[1][1] - height) * -1\n  }\n}\n\ntype ChartElements = Readonly<{\n  backgroundSel: Selection<SVGRectElement, unknown, HTMLElement, unknown>\n  contentSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgDragSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgSel: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}>\n\nconst addDropShadowFilter = ({\n  deviation,\n  slope,\n  svg,\n}: {\n  deviation: number\n  slope: number\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow`)\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst addBlurFilter = <T>(\n  svg: Selection<SVGSVGElement, T, HTMLElement, unknown>\n) => {\n  svg\n    .append(\"g\")\n    .append(\"filter\")\n    .attr(\"height\", \"300%\")\n    .attr(\"x\", \"-100%\")\n    .attr(\"y\", \"-100%\")\n    .attr(\"id\", \"blur\")\n    .attr(\"width\", \"300%\")\n    .append(\"feGaussianBlur\")\n    .attr(\"stdDeviation\", \"5 5\")\n}\n\nconst colorFns = [\n  interpolateRdYlGn,\n  interpolateSpectral,\n  interpolateBlues,\n  interpolateViridis,\n  interpolateTurbo,\n]\n\nclass WorldMap {\n  private readonly config: ChartConfig\n  private readonly state: {\n    colorFnIndex: number\n    draggedX: number\n    draggedY: number\n    lastZoomId: number | null\n  } = {\n    colorFnIndex: 0,\n    draggedX: 0,\n    draggedY: 0,\n    lastZoomId: null,\n  }\n\n  private dimensions!: {\n    height: number\n    width: number\n  }\n\n  private projectionPath!: GeoPath\n  private bounds!: Bounds\n\n  private readonly elements: ChartElements\n\n  public constructor(config: ChartConfig) {\n    this.config = config\n\n    const {\n      config: { rootElId },\n    } = this\n\n    const svgSel = select(`#${rootElId}`).append(\"svg\")\n    const svgDragSel = svgSel.append(\"g\")\n    const backgroundSel = svgDragSel\n      .append(\"rect\")\n      .attr(\"class\", \"background\")\n      .style(\"fill\", \"#daedff\")\n    const contentSel = svgDragSel.append(\"g\")\n\n    addDropShadowFilter({\n      deviation: 2,\n      slope: 0.5,\n      svg: svgSel,\n    })\n    addBlurFilter(svgSel)\n\n    this.elements = {\n      backgroundSel,\n      contentSel,\n      svgDragSel,\n      svgSel,\n    }\n\n    this.render()\n    this.setupDrag()\n\n    window.addEventListener(\"resize\", this.handleWindowResize)\n  }\n\n  public teardown() {\n    window.removeEventListener(\"resize\", this.handleWindowResize)\n  }\n\n  public updateColors() {\n    this.state.colorFnIndex += 1\n\n    if (this.state.colorFnIndex >= colorFns.length) {\n      this.state.colorFnIndex = 0\n    }\n\n    this.render()\n  }\n\n  private setDimensions() {\n    const {\n      config: { rootElId },\n    } = this\n    const { width } = (\n      document.getElementById(rootElId) as HTMLElement\n    ).getBoundingClientRect()\n    const height = 500\n\n    this.dimensions = {\n      height,\n      width,\n    }\n  }\n\n  private render() {\n    const {\n      config: { world },\n      elements: { backgroundSel, svgSel },\n    } = this\n\n    this.setDimensions()\n\n    const {\n      dimensions: { height, width },\n    } = this\n    const projection = geoMercator()\n      .center([0, 45.4])\n      .scale(Math.max((150 * width) / 750, 140))\n      .translate([width / 2, height / 2])\n\n    this.projectionPath = geoPath().projection(projection)\n\n    const { features: featuresData } = feature(\n      world,\n      world.objects.countries\n    ) as any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    this.bounds = calculateBounds({\n      featuresData,\n      projectionPath: this.projectionPath,\n    })\n\n    const colorScale = scaleLinear()\n      .domain([0, featuresData.length - 1])\n      .range([0, 1])\n\n    const colorFn = (...[, countryIndex]: [unknown, number]) =>\n      colorFns[this.state.colorFnIndex](colorScale(countryIndex))\n\n    svgSel.attr(\"width\", width).attr(\"height\", height)\n\n    const backgroundSize = 100_000\n\n    backgroundSel\n      .on(\"click\", this.setZoom as any) // eslint-disable-line @typescript-eslint/no-explicit-any\n      .attr(\"height\", backgroundSize)\n      .attr(\"width\", backgroundSize)\n      .attr(\n        \"transform\",\n        `translate(${Math.min(0, (backgroundSize - width) / -2)}, ${Math.min(\n          0,\n          (backgroundSize - height) / -2\n        )})`\n      )\n\n    const countriesUpdateSel =\n      this.getCountriesSel().data<CountryData>(featuresData)\n\n    const countriesStrokeWidth = \"1px\"\n\n    countriesUpdateSel.exit().remove()\n    countriesUpdateSel\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", (countryData: CountryData) => `country ${countryData.id}`)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", countriesStrokeWidth)\n      .attr(\"filter\", \"url(#drop-shadow)\")\n\n    const countriesSel = this.getCountriesSel()\n      .attr(\"d\", this.projectionPath)\n      .style(\"fill\", colorFn)\n      .on(\"mouseenter\", function handleCountryMouseEnter() {\n        countriesSel.attr(\"filter\", \"url(#blur)\")\n        select(this)\n          .attr(\"filter\", \"url(#drop-shadow)\")\n          .style(\"stroke-width\", \"2px\")\n      })\n      .on(\"mouseleave\", () => {\n        countriesSel\n          .attr(\"filter\", \"url(#drop-shadow)\")\n          .style(\"stroke-width\", countriesStrokeWidth)\n      })\n      .on(\"click\", this.setZoom)\n\n    this.updateDrag()\n  }\n\n  private getCountriesSel() {\n    return this.elements.contentSel.selectAll<SVGPathElement, CountryData>(\n      \".country\"\n    )\n  }\n\n  private updateDrag() {\n    const {\n      bounds,\n      dimensions: { height, width },\n      elements: { svgDragSel },\n    } = this\n\n    boundDrag({\n      bounds,\n      dragPoint: this.state,\n      height,\n      width,\n    })\n\n    svgDragSel.attr(\n      \"transform\",\n      `translate(${this.state.draggedX},${this.state.draggedY})`\n    )\n  }\n\n  private setupDrag() {\n    const {\n      elements: { svgSel },\n    } = this\n\n    const dragHandler = (\n      dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>\n    ) => {\n      this.state.draggedX += dragEvent.dx\n      this.state.draggedY += dragEvent.dy\n\n      this.updateDrag()\n    }\n\n    const dragBehavior = dragD3<SVGSVGElement, unknown>().on(\n      \"drag\",\n      dragHandler\n    )\n\n    svgSel.style(\"cursor\", \"move\").call(dragBehavior).on(\"drag\", dragHandler)\n  }\n\n  private readonly setZoom = (...[, countryData]: [unknown, CountryData]) => {\n    const {\n      dimensions: { height, width },\n    } = this\n    const countriesSel = this.getCountriesSel()\n\n    if (!(countryData as unknown) || this.state.lastZoomId === countryData.id) {\n      this.state.lastZoomId = null\n\n      countriesSel\n        .transition()\n        .duration(transitionDuration)\n        .attr(\n          \"transform\",\n          `translate(${width / 2},${height / 2})scale(${1})translate(${\n            -width / 2\n          },${-height / 2})`\n        )\n\n      return\n    }\n\n    this.state.lastZoomId = countryData.id\n\n    const centroid = this.projectionPath.centroid(countryData)\n\n    const x = centroid[0]\n    const y = centroid[1]\n\n    countriesSel\n      .transition()\n      .duration(transitionDuration)\n      .attr(\n        \"transform\",\n        `translate(${width / 2},${height / 2})scale(${8})translate(${-x},${-y})`\n      )\n  }\n\n  private readonly handleWindowResize = () => {\n    this.render()\n  }\n}\n\nconst main = async () => {\n  const world = await fetchData()\n\n  const worldMap = new WorldMap({\n    rootElId: CONTAINER_ID,\n    world,\n  })\n\n  document.getElementById(UPDATE_BUTTON_ID)?.addEventListener(\"click\", () => {\n    worldMap.updateColors()\n  })\n}\n\nexport { CONTAINER_ID, UPDATE_BUTTON_ID }\n\nexport default main\n","filePath":"src/demos/world-map/world-map.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  UPDATE_BUTTON_ID,\n} from \"@/demos/world-map/world-map\"\n\nconst WorldMap = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form style={{ marginBottom: 20 }}>\n      <button className=\"btn btn-info\" id={UPDATE_BUTTON_ID} type=\"button\">\n        Update colors\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default WorldMap\n","type":"tsx"}},"key":"world-map"},"meta":{"description":"Example of world map using D3.js, with the zoom functionality and also the possibility to unzoom. The color scale is changed, among other properties."}}},
    "staticQueryHashes": []}