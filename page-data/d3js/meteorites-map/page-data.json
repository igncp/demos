{
    "componentChunkName": "component---src-pages-d-3-js-meteorites-map-tsx",
    "path": "/d3js/meteorites-map/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["meteorites.json","world_countries.json"],"docs":[["animejs API reference","https://animejs.com/documentation/"],["animejs Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/animejs/index.d.ts"],["d3-zoom API reference","https://github.com/d3/d3-zoom#api-reference"],["d3-zoom Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-zoom/index.d.ts"]],"isCompleted":true,"name":"Meteorites Map","notes":["Created this chart with the data and added the interactions","Use the mouse wheel to zoom in / out, and use the mouse to pan"],"sources":["http://bl.ocks.org/micahstubbs/8e15870eb432a21f0bc4d3d527b2d14f","https://github.com/jdorfman/awesome-json-datasets#nasa"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".mapLayoutItemTooltip {\n  background: #ffccfc;\n}\n\n.infoTrigger {\n  cursor: pointer;\n  opacity: 0.7;\n  transition: linear 0.5s opacity;\n\n  circle {\n    fill: #fff;\n    stroke: #ccc;\n  }\n\n  text {\n    fill: white;\n    font-size: 30px;\n    stroke: black;\n    text-anchor: middle;\n    transform: translate(0, 10px);\n  }\n\n  &:hover {\n    opacity: 1;\n\n    text {\n      fill: green;\n    }\n  }\n}\n\n.circle {\n  fill: orange;\n\n  &:hover {\n    fill: blue;\n  }\n}\n\n.circle.active {\n  fill: red;\n}\n\n.circle.moved {\n  fill: green;\n}\n\n.modal {\n  background: #fff;\n  border: 1px solid white;\n  border-radius: 5px;\n  box-shadow: 0 22px 70px 4px rgba(0, 0, 0, 0.56);\n  left: 100px;\n  padding: 15px;\n  position: absolute;\n  z-index: 10;\n}\n","fileName":"circles-map-chart.module.css"}],"demoTS":[{"content":"import { renderChart } from \"./circles-map-chart\"\nimport { CountriesLayout, MeteoritesData } from \"./meteorites-data-model\"\nimport { CONTAINER_ID, createChartConfig } from \"./meteorites-map-chart-data\"\n\nconst main = async () => {\n  const [meteoritesData, countriesLayout] = await Promise.all([\n    MeteoritesData.createAndFetch(),\n    CountriesLayout.createAndFetch(),\n  ])\n  const chartConfig = createChartConfig({ countriesLayout, meteoritesData })\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","fileName":"meteorites-map.ts"},{"content":"import anime from \"animejs\"\nimport { geoMercator, geoPath, select, zoom } from \"d3\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nimport * as styles from \"./circles-map-chart.module.css\"\n\ntype Point = [number, number]\nexport type Geolocation = { coordinates: Point; type: \"Point\" }\n\nexport type MapLayout = {\n  features: Array<{\n    geometry: { coordinates: Point[]; type: \"Polygon\" } // eslint-disable-line id-denylist\n    id: string\n    properties: { name: string }\n    type: \"Feature\"\n  }>\n  type: \"FeatureCollection\"\n}\n\ntype ChartDataConstraint = {\n  geolocation: Geolocation\n}\n\ntype ChartState = {\n  isDuringAnimation: boolean\n  selectedCircle: string | null\n}\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n}\n\nconst svgCutBottom = 250 // to remove the south pole which doesn't have any in the data\nconst height = 1000 - margin.top - margin.bottom\nconst modalHiddenTop = 250\nconst clickedCircleDistortion = 20\n\n// eslint-disable-next-line max-params,@typescript-eslint/no-explicit-any\nconst zoomed = function (this: SVGSVGElement, zoomEvent: any) {\n  select(this).transition().duration(500).attr(\"transform\", zoomEvent.transform)\n}\n\nexport type ChartConfig<CircleData> = {\n  chartHelpHTML: string\n  chartTitle: string\n  circlesData: CircleData[]\n  getCircleId: (circleData: CircleData) => string\n  getCircleTitle: (circlesData: CircleData) => string\n  getModalHTML: (circleData: CircleData) => string\n  mapLayout: MapLayout\n  rootElId: string\n}\n\nexport const renderChart = <CircleData extends ChartDataConstraint>(\n  chartConfig: ChartConfig<CircleData>\n) => {\n  const { circlesData, getCircleId, mapLayout, rootElId } = chartConfig\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n  const projectionFn = geoMercator().translate([width / 2, height / 2])\n  const geometryPath: any = geoPath().projection(projectionFn) // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  const circleClassUnique = `${styles.circle}-${uuidv1().slice(0, 6)}`\n  const circleClass = `${circleClassUnique} ${styles.circle}`\n  const mapLayoutItemClass = `mapLayoutItem-${uuidv1().slice(0, 6)}`\n\n  type CircleGeo = CircleData & {\n    geometry: CircleData[\"geolocation\"] // eslint-disable-line id-denylist\n    type: \"Feature\"\n  }\n\n  const state: ChartState = {\n    isDuringAnimation: false,\n    selectedCircle: null,\n  }\n\n  const modal = select(`#${rootElId}`)\n    .append(\"div\")\n    .attr(\"class\", styles.modal)\n    .style(\"top\", `${-modalHiddenTop}px`)\n\n  const circlesGeo: CircleGeo[] = circlesData.map((circleData) => ({\n    ...circleData,\n    geometry: circleData.geolocation, // eslint-disable-line id-denylist\n    type: \"Feature\",\n  }))\n\n  const removeSelection = () => {\n    if (state.isDuringAnimation) {\n      return\n    }\n\n    state.selectedCircle = null\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    circlesEls.attr(\"class\", circleClass)\n\n    anime({\n      targets: `.${circleClassUnique}`,\n      translateX: 0,\n      translateY: 0,\n    })\n\n    state.isDuringAnimation = true\n\n    anime({\n      complete: () => {\n        state.isDuringAnimation = false\n        modal.text(\"\")\n      },\n      targets: `.${styles.modal}`,\n      translateY: 0,\n    })\n  }\n\n  const getNearCirclesWithVectors = ({\n    targetCircle,\n  }: {\n    targetCircle: CircleGeo\n  }) => {\n    const targetProj = projectionFn(targetCircle.geometry.coordinates) as [\n      number,\n      number\n    ]\n\n    const nearCircles = circlesGeo\n      .slice(0)\n      .filter((otherCircle) => !!(otherCircle.geometry as unknown))\n      .map((otherCircle) => {\n        const {\n          geometry: { coordinates: otherCircleCoordinates },\n        } = otherCircle\n        const proj = projectionFn(otherCircleCoordinates) as [number, number]\n        const vector = [proj[0] - targetProj[0], proj[1] - targetProj[1]]\n        const vectorLength = Math.sqrt(\n          Math.pow(vector[0], 2) + Math.pow(vector[1], 2)\n        )\n\n        return {\n          ...otherCircle,\n          vector,\n          vectorLength,\n        }\n      })\n      .filter(\n        (otherCircle) =>\n          otherCircle.vectorLength < 20 && otherCircle.vectorLength !== 0\n      )\n      .map((otherCircle) => ({\n        ...otherCircle,\n        vectorNormalized: [\n          otherCircle.vector[0] / otherCircle.vectorLength,\n          otherCircle.vector[1] / otherCircle.vectorLength,\n        ] as [number, number],\n      }))\n\n    const nearCirclesSet = new Set(\n      nearCircles.map((nearCircle) => getCircleId(nearCircle))\n    )\n\n    const vectorsMap = nearCircles.reduce((...[acc, nearCircle]) => {\n      acc[getCircleId(nearCircle)] = nearCircle.vectorNormalized\n\n      return acc\n    }, {} as Record<string, [number, number]>)\n\n    return {\n      nearCircles,\n      nearCirclesSet,\n      vectorsMap,\n    }\n  }\n\n  const circleClickHandler = ({\n    clickedCircle,\n  }: {\n    clickedCircle: CircleGeo\n  }) => {\n    if (state.isDuringAnimation) {\n      return\n    }\n\n    const clickedCircleId = getCircleId(clickedCircle)\n\n    if (state.selectedCircle === clickedCircleId) {\n      removeSelection()\n\n      return\n    }\n\n    state.selectedCircle = clickedCircleId\n\n    const modalHTML = chartConfig.getModalHTML(clickedCircle)\n\n    modal.html(modalHTML)\n\n    const { nearCirclesSet, vectorsMap } = getNearCirclesWithVectors({\n      targetCircle: clickedCircle,\n    })\n\n    const getShouldSet0 = (geometryIndex: number) => {\n      const { [geometryIndex]: animatedCircle } = circlesGeo\n\n      return (\n        getCircleId(animatedCircle) === getCircleId(clickedCircle) ||\n        !nearCirclesSet.has(getCircleId(animatedCircle))\n      )\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    circlesEls.attr(\"class\", (circle) => {\n      if (nearCirclesSet.has(getCircleId(circle))) {\n        return `${styles.moved} ${circleClass}`\n      }\n\n      return getCircleId(circle) === getCircleId(clickedCircle)\n        ? `${styles.active} ${circleClass}`\n        : circleClass\n    })\n\n    const getTranslateFn =\n      (coordIdx: number) =>\n      (...[, geometryIndex]: [unknown, number]) => {\n        if (getShouldSet0(geometryIndex)) {\n          return 0\n        }\n\n        const { [geometryIndex]: animatedCircle } = circlesGeo\n        const { [getCircleId(animatedCircle)]: vectorNormalized } = vectorsMap\n\n        return vectorNormalized[coordIdx] * clickedCircleDistortion\n      }\n\n    anime({\n      targets: `.${circleClassUnique}`,\n      translateX: getTranslateFn(0),\n      translateY: getTranslateFn(1),\n    })\n\n    const { top } = rootEl.getBoundingClientRect()\n\n    anime({\n      targets: `.${styles.modal}`,\n      translateY: modalHiddenTop + 50 + top + window.scrollY,\n    })\n  }\n\n  const circlesClickHandlerFn = (\n    ...[clickEvent, clickedCircle]: [MouseEvent, CircleGeo]\n  ) => {\n    clickEvent.stopPropagation()\n    circleClickHandler({\n      clickedCircle,\n    })\n  }\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height - svgCutBottom)\n    .style(\"cursor\", \"pointer\")\n    .on(\"click\", removeSelection)\n    .style(\"transform-origin\", \"top left\")\n    .call(\n      zoom<SVGSVGElement, unknown>()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .on(\"end\", zoomed)\n    )\n\n  const svgMap = svg.append(\"g\")\n\n  svg\n    .append(\"text\")\n    .text(chartConfig.chartTitle)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"20px\")\n    .attr(\"transform\", `translate(${width / 2},40)`)\n    .style(\"font-weight\", \"bold\")\n\n  const addInfo = () => {\n    const dialogId = `dialog-${uuidv1().slice(0, 6)}`\n\n    const group = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width - 50},50)`)\n      .attr(\"class\", styles.infoTrigger)\n\n    svg.append(\"g\").html(`\n<filter id=\"pulse\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n  <feTurbulence result=\"cloud\" baseFrequency=\".01\" seed=\"1\"  type=\"fractalNoise\" numOctaves=\"2\">\n  <animate attributeName=\"baseFrequency\" calcMode=\"paced\" begin=\"0s\" dur=\"12s\" values=\".01;.13;.01;\" repeatCount=\"indefinite\"/>\n  </feTurbulence>\n  <feComposite operator=\"in\" in=\"cloud\" in2=\"SourceGraphic\"/>\n</filter>\n    `)\n\n    const dialog = select(document.body)\n      .append(\"div\")\n      .attr(\"id\", dialogId)\n      .html(chartConfig.chartHelpHTML)\n\n    $(`#${dialogId}`).dialog({\n      autoOpen: false,\n      modal: true,\n      resizable: false,\n    })\n\n    group.append(\"circle\").attr(\"r\", \"20\").attr(\"filter\", \"url(#pulse)\")\n\n    group.append(\"text\").text(\"?\")\n\n    group.on(\"click\", () => {\n      $(`#${dialogId}`).dialog(\"open\")\n    })\n\n    return {\n      remove: () => {\n        dialog.remove()\n      },\n    }\n  }\n\n  addInfo()\n\n  svgMap\n    .append(\"g\")\n    .attr(\"class\", mapLayoutItemClass)\n    .selectAll(\"path\")\n    .data(mapLayout.features)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", geometryPath)\n    .attr(\"fill\", \"#ccc\")\n    .style(\"stroke\", \"white\")\n    .style(\"stroke-width\", 1.5)\n    .style(\"opacity\", 0.8)\n    .style(\"stroke\", \"white\")\n    .style(\"stroke-width\", 0.3)\n    .on(\"click\", removeSelection)\n    .attr(\"title\", (mapLayoutItem) => mapLayoutItem.properties.name)\n\n  const circlesWrapper = svgMap.append(\"g\").on(\"click\", removeSelection)\n\n  const circlesEls = circlesWrapper\n    .selectAll(\"path\")\n    .data(circlesGeo)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", geometryPath)\n    .attr(\"class\", circleClass)\n    .style(\"stroke\", \"white\")\n    .style(\"cursor\", \"pointer\")\n    .style(\"stroke-width\", 1.5)\n    .style(\"opacity\", 0.8)\n    .attr(\"title\", (circleGeo) => chartConfig.getCircleTitle(circleGeo))\n    .on(\"click\", circlesClickHandlerFn)\n\n  $(`.${circleClassUnique}`).tooltip({\n    track: true,\n  })\n\n  $(`.${mapLayoutItemClass}`).tooltip({\n    tooltipClass: styles.mapLayoutItemTooltip,\n    track: true,\n  })\n}\n","fileName":"circles-map-chart.ts"},{"content":"import { json, timeFormat } from \"d3\"\nimport qs from \"query-string\"\n\nimport { Geolocation, MapLayout } from \"./circles-map-chart\"\n\nclass CountriesLayout {\n  private readonly countries: MapLayout\n\n  private constructor(countries: MapLayout) {\n    this.countries = countries\n  }\n\n  public static async createAndFetch() {\n    const countries = await json(\n      `${ROOT_PATH}data/d3js/meteorites-map/world_countries.json`\n    )\n\n    return new CountriesLayout(countries as MapLayout)\n  }\n\n  public getCountries() {\n    return this.countries\n  }\n}\n\ntype Meteorite = {\n  fall: string\n  geolocation: Geolocation\n  id: string\n  mass: string\n  name: string\n  nametype: string\n  recclass: string\n  reclat: string\n  reclong: string\n  year: string\n}\n\nclass MeteoritesData {\n  private readonly meteorites: Meteorite[]\n\n  private constructor(meteorites: Meteorite[]) {\n    this.meteorites = meteorites\n  }\n\n  public static async createAndFetch() {\n    const meteorites = (await json(\n      `${ROOT_PATH}data/d3js/meteorites-map/meteorites.json`\n    )) as unknown\n\n    return new MeteoritesData(meteorites as Meteorite[])\n  }\n\n  public static getMeteoriteId(meteorite: Meteorite) {\n    return meteorite.id\n  }\n\n  public static getMeteoriteSummaryHTML(meteorite: Meteorite) {\n    const year = timeFormat(\"%Y\")(new Date(meteorite.year))\n    const mass = new Intl.NumberFormat().format(+meteorite.mass)\n\n    return `\n<h1>${meteorite.name}</h1>\n<p>Year: ${year}, Class: <a href=\"https://www.google.com/search?${qs.stringify({\n      q: `${meteorite.recclass} Meteorite Class`,\n    })}\" target=\"_blank\">${meteorite.recclass}</a></p>\n<p>${mass ? `Mass: ${mass}g, ` : \"\"}Name: ${meteorite.nametype}</p>\n<p><a href=\"https://www.google.com/search?${qs.stringify({\n      q: `${meteorite.name} Meteorite ${year}`,\n    })}\" target=\"_blank\">Click here to search</a></p>\n`.trim()\n  }\n\n  public static getMeteoriteName(meteorite: Meteorite) {\n    return meteorite.name\n  }\n\n  public getMeteorites() {\n    return this.meteorites.slice()\n  }\n}\n\nexport { MeteoritesData, CountriesLayout }\n","fileName":"meteorites-data-model.ts"},{"content":"import { ChartConfig } from \"./circles-map-chart\"\nimport { CountriesLayout, MeteoritesData } from \"./meteorites-data-model\"\n\nexport const CONTAINER_ID = \"chart\"\n\nconst chartHelpHTML = `\n<p>The green circles refer to meteorites which were moved in the map to allow seeing the selected meteorite, which is in red.</p>\n<p>You can find the <a href=\"http://www.meteoritemarket.com/type.htm\">meteorites classification here</a></p>\n`.trim()\n\ntype MeteoriteItem = ReturnType<MeteoritesData[\"getMeteorites\"]>[0]\ntype Config = ChartConfig<MeteoriteItem>\n\nexport const createChartConfig = ({\n  countriesLayout,\n  meteoritesData,\n}: {\n  countriesLayout: CountriesLayout\n  meteoritesData: MeteoritesData\n}): Config => {\n  const meteorites = meteoritesData.getMeteorites()\n\n  const getCircleId: Config[\"getCircleId\"] = (meteoriteData) =>\n    MeteoritesData.getMeteoriteId(meteoriteData)\n\n  const getModalHTML: Config[\"getModalHTML\"] = (meteoriteData) =>\n    MeteoritesData.getMeteoriteSummaryHTML(meteoriteData)\n\n  const getCircleTitle: Config[\"getCircleTitle\"] = (meteoriteData) =>\n    meteoriteData.name\n\n  return {\n    chartHelpHTML,\n    chartTitle: \"Meteorite landings in Earth\",\n    circlesData: meteorites,\n    getCircleId,\n    getCircleTitle,\n    getModalHTML,\n    mapLayout: countriesLayout.getCountries(),\n    rootElId: CONTAINER_ID,\n  }\n}\n","fileName":"meteorites-map-chart-data.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/meteorites-map/meteorites-map\"\n\nconst Area = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Area\n","type":"tsx"}},"key":"meteorites-map"},"meta":{"description":"World map chart with information about meteorite landings. It uses D3, animejs and other libraries, and it is highly interactive. It also informs about each meteorite properties like the name or classification."}}},
    "staticQueryHashes": []}