{"componentChunkName":"component---src-pages-d-3-js-partition-tsx","path":"/d3js/partition/","result":{"pageContext":{"demoInfo":{"data":["flare.json"],"docs":["Needs fix: Change between types like 2016 chart"],"name":"Partition (needs fix)","notes":["Added title attributes, labels and change colors with events"],"sources":["http://bl.ocks.org/mbostock/4063423"],"summary":[],"category":"d3js","files":{"d3utils":null,"demo":{"content":"import * as d3 from \"d3\"\n\nconst fetchData = () => d3.json(`${ROOT_PATH}data/d3js/partition/flare.json`)\n\n// @TODO: add back the count option\n\nconst height = 700\nconst colorScale = d3.scaleOrdinal(d3.schemePastel2)\n\nconst renderChart = ({ root, rootElId }) => {\n  const addTitles = (selectors) => {\n    selectors.forEach((selector) =>\n      selector.append(\"title\").text((d) => `${d.data.name}\\n${d.value}`)\n    )\n  }\n\n  const { width } = document.getElementById(\"chart\").getBoundingClientRect()\n  const radius = Math.min(width, height) / 2\n\n  const color = (d) =>\n    d.children ? colorScale(d.data.name) : colorScale(d.parent.name)\n\n  const svg = d3\n    .select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${width / 2},${height * 0.52})`)\n\n  const dataHierarchy = d3.hierarchy(root).sum((d) => d.size)\n\n  d3.partition().size([2 * Math.PI, radius])(dataHierarchy)\n\n  const arc = d3\n    .arc()\n    .startAngle((d) => d.x0)\n    .endAngle((d) => d.x1)\n    .innerRadius((d) => d.y0)\n    .outerRadius((d) => d.y1)\n\n  const path = svg\n    .selectAll(\"path\")\n    .data(dataHierarchy.descendants())\n    .enter()\n    .append(\"path\")\n    .attr(\"display\", (d) => (d.depth ? null : \"none\"))\n    .attr(\"data-index\", (_d, i) => i)\n    .attr(\"d\", arc)\n    .style(\"stroke\", \"#000\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"fill\", (d) => color(d))\n\n  const texts = svg\n    .selectAll(\"text\")\n    .data(dataHierarchy.descendants())\n    .enter()\n    .append(\"text\")\n    .text((d) => {\n      const dx = Math.abs(d.x0 - d.x1)\n\n      if (dx > 0.07 && d.parent && d.data.name.length < 10) {\n        return d.data.name\n      }\n\n      return \"\"\n    })\n    .attr(\"data-index\", (_d, i) => i)\n    .style(\"fill\", \"black\")\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font\", \"bold 12px Arial\")\n    .attr(\"transform\", (d) => {\n      if (!d.depth) {\n        return null\n      }\n\n      const centroid = arc.centroid(d)\n      let rotationDeg = 90 + ((d.x0 + (d.x1 - d.x0) / 2) * 180) / Math.PI\n\n      if (rotationDeg > 90 && rotationDeg < 270) {\n        rotationDeg -= 180\n      }\n\n      return `rotate(${rotationDeg},${centroid[0]},${centroid[1]}) translate(${centroid[0]},${centroid[1]})`\n    })\n    .style(\"cursor\", \"default\")\n\n  ;[path, texts].forEach((set) =>\n    set.on(\"mouseover\", function () {\n      const index = d3.select(this).attr(\"data-index\")\n\n      d3.select(`path[data-index=\"${index}\"]`).style(\"fill\", \"#333\")\n      d3.select(`text[data-index=\"${index}\"]`).style(\"fill\", \"white\")\n    })\n  )\n  ;[path, texts].forEach((set) =>\n    set.on(\"mouseout\", function () {\n      const index = d3.select(this).attr(\"data-index\")\n\n      d3.select(`path[data-index=\"${index}\"]`).style(\"fill\", color)\n      d3.select(`text[data-index=\"${index}\"]`).style(\"fill\", \"#000\")\n    })\n  )\n\n  addTitles([path, texts])\n}\n\nconst main = async () => {\n  const root = await fetchData()\n\n  renderChart({\n    root,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"js"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\n// @ts-ignore\nimport main from \"@/demos/partition/partition\"\n\nconst Partition = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Partition\n","type":"tsx"},"styl":null},"key":"partition"}}},"staticQueryHashes":[]}