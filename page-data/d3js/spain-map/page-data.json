{
    "componentChunkName": "component---src-pages-d-3-js-spain-map-tsx",
    "path": "/d3js/spain-map/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Spanish Map","notes":["For this chart I reused the code from the World Map chart and other demos","Added drop shadow for 3D effect"],"sources":["http://www.diva-gis.org/datadown"],"summary":[],"category":"d3js","files":{"demoCSS":[],"demoTS":[{"content":"import { renderChart } from \"./spain-map-chart\"\nimport {\n  CONTAINER_ID,\n  Properties,\n  createChartConfig,\n  fetchAreasData,\n} from \"./spain-map-chart-data\"\n\nconst main = async () => {\n  const areasData = await fetchAreasData()\n  const chartConfig = createChartConfig(areasData)\n\n  renderChart<Properties>(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","fileName":"spain-map.ts"},{"content":"import { json } from \"d3\"\n\nimport { AreasData, ChartConfig } from \"./spain-map-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\nexport type Properties = {\n  ENGTYPE_3: string // e.g. Comarca\n  HASC_3: string\n  ID_0: number\n  ID_1: number\n  ID_2: number\n  ID_3: number\n  ISO: string // e.g. ESP\n  NAME_0: string // e.g. Spain\n  NAME_1: string // e.g. Castilla y Leon\n  NAME_2: string // e.g. Leon\n  NAME_3: string // Sometimes not defined, with 'n.a.'\n  NL_NAME_3: string\n  REMARKS_3: string\n  Shape_Area: number // eslint-disable-line camelcase\n  Shape_Leng: number // eslint-disable-line camelcase\n  TYPE_3: string // e.g. Comarca\n  VALIDFR_3: string\n  VALIDTO_3: string\n}\n\ntype Config = ChartConfig<Properties>\n\nconst getTitleText: Config[\"getTitleText\"] = (areaProperties) =>\n  [\n    (areaProperties.NAME_3 || \"\").includes(\"n.a.\") ? \"\" : areaProperties.NAME_3,\n    areaProperties.NAME_2,\n    areaProperties.NAME_1,\n  ]\n    .filter((v) => !!v)\n    .join(\", \")\n\nconst getWidths: Config[\"getWidths\"] = (chartWidth) => {\n  const widthCanarias = chartWidth / 3.5\n  const widthPeninsula = chartWidth - widthCanarias - 10\n\n  return [widthCanarias, widthPeninsula]\n}\n\nconst projectionsCenters: Config[\"projectionsCenters\"] = [\n  [-13, 23],\n  [10, 35.5],\n]\n\nexport const createChartConfig = (areasData: AreasData): Config => ({\n  areasData,\n  getTitleText,\n  getWidths,\n  projectionsCenters,\n  rootElId: CONTAINER_ID,\n})\n\nexport const fetchAreasData = () =>\n  json(\n    `${ROOT_PATH}data/d3js/spain-map/data.json`\n  ) as unknown as Promise<AreasData>\n","fileName":"spain-map-chart-data.ts"},{"content":"import {\n  BaseType,\n  GeoPath,\n  GeoPermissibleObjects,\n  GeoProjection,\n  Selection,\n  geoMercator,\n  geoPath,\n  range,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { GeoJsonProperties } from \"geojson\"\nimport { feature } from \"topojson-client\"\nimport { Objects, Topology } from \"topojson-specification\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nconst colorsScheme = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\nconst height = 500\nconst margin = {\n  bottom: 20,\n  top: 50,\n}\nconst strokeWidth = 0.4\n\ntype SVG = Selection<BaseType, unknown, HTMLElement, unknown>\n\nconst addDropShadowFilter = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: number\n  slope: number\n  svg: SVG\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nexport type AreasData = Topology<Objects<GeoJsonProperties>>\n\nexport type ChartConfig<Properties> = {\n  areasData: AreasData\n  getTitleText: (properties: Properties) => string\n  getWidths: (chartWidth: number) => number[]\n  projectionsCenters: Array<[number, number]>\n  rootElId: string\n}\n\nexport const renderChart = <Properties>(\n  chartConfig: ChartConfig<Properties>\n) => {\n  const { areasData, rootElId } = chartConfig\n\n  type DataShape = GeoPermissibleObjects & {\n    areaIndex: number\n    properties: Properties\n  }\n\n  const { width: chartWidth } = (\n    document.getElementById(rootElId) as HTMLElement\n  ).getBoundingClientRect()\n\n  const {\n    objects: { data1: dataRoot },\n  } = areasData\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { features: dataGeo } = feature(areasData, dataRoot) as any\n\n  const dataGeoParsed = dataGeo.map(\n    (...[areaData, areaIndex]: [DataShape, number]) => ({\n      ...areaData,\n      areaIndex,\n    })\n  )\n\n  const colorScale = scaleLinear()\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .domain([0, (dataRoot as any).geometries.length])\n    .range([0, 1])\n  const colorScaleConversion = scaleLinear<string>()\n    .domain(range(0, 1, 1.0 / colorsScheme.length))\n    .range(colorsScheme)\n\n  const colorFn = (areaData: DataShape) =>\n    colorScaleConversion(colorScale(areaData.areaIndex))\n\n  const svg = select(`#${rootElId}`)\n\n  const generateSvg = (width: number) =>\n    svg\n      .append(\"div\")\n      .style(\"display\", \"inline-block\")\n      .style(\"height\", `${height + margin.top + margin.bottom}px`)\n      .style(\"width\", `${width}px`)\n      .append(\"svg:svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"svg:g\")\n      .attr(\"transform\", `translate(${width / 2},${height / 2 + margin.top})`)\n\n  const generatePath = (projection: GeoProjection) =>\n    geoPath().projection(projection)\n\n  const regionClass = `region-${uuidv1().slice(0, 6)}`\n\n  const generateAreas = ({\n    filterId,\n    path,\n    svgComp,\n  }: {\n    filterId: number\n    path: GeoPath<SVGPathElement>\n    svgComp: SVG\n  }) => {\n    svgComp\n      .selectAll(\".area\")\n      .data<DataShape>(dataGeoParsed)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", colorFn)\n      .style(\"stroke\", \"#FFF\")\n      .style(\"stroke-width\", strokeWidth)\n      .style(\"filter\", () => `url(#drop-shadow-${filterId})`)\n      .on(\"mouseover\", function onMouseOver() {\n        return select(this)\n          .style(\"fill\", \"#FFB61A\")\n          .style(\"stroke-width\", \"1px\")\n      })\n      .on(\"mouseleave\", function onMouseLeave() {\n        return select<SVGPathElement, DataShape>(this)\n          .style(\"fill\", colorFn)\n          .style(\"stroke-width\", strokeWidth)\n      })\n      .attr(\"title\", (areaData) =>\n        chartConfig.getTitleText(areaData.properties)\n      )\n      .attr(\"class\", regionClass)\n  }\n\n  const widths = chartConfig.getWidths(chartWidth)\n\n  const generateProjection = (\n    ...[center, centerIndex]: [[number, number], number]\n  ) =>\n    geoMercator()\n      .center(center)\n      .scale(2650)\n      .translate([widths[centerIndex] / 2, height / 2])\n\n  const svgs = widths.map(generateSvg)\n\n  svgs.forEach((...[svgItem, svgItemIndex]) => {\n    addDropShadowFilter({\n      deviation: 2,\n      id: svgItemIndex + 1,\n      slope: 0.3,\n      svg: svgItem,\n    })\n  })\n\n  const projections = chartConfig.projectionsCenters.map(generateProjection)\n  const paths = projections.map(generatePath)\n\n  svgs.forEach((...[svgItem, svgItemIndex]) => {\n    generateAreas({\n      filterId: svgItemIndex + 1,\n      path: paths[svgItemIndex],\n      svgComp: svgItem,\n    })\n  })\n\n  $(`.${regionClass}`).tooltip({\n    track: true,\n  })\n}\n","fileName":"spain-map-chart.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/spain-map/spain-map\"\n\nconst SpainMap = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default SpainMap\n","type":"tsx"}},"key":"spain-map"},"meta":{"description":"Example of a geographic map using D3.js, where some styles have been added to give it a 3D effect."}}},
    "staticQueryHashes": []}