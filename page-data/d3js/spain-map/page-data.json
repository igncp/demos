{"componentChunkName":"component---src-pages-d-3-js-spain-map-js","path":"/d3js/spain-map/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Spanish Map","notes":["For this chart I reused the code from the World Map chart and other demos","Added drop shadow for 3D effect"],"sources":["http://www.diva-gis.org/datadown"],"category":"d3js","files":{"d3utils":null,"demo":{"content":"import * as d3next from \"d3\"\nimport * as topojson from \"topojson-client\"\n\nconst fetchData = () =>\n  new Promise((resolve) => {\n    d3.json(`${ROOT_PATH}data/d3js/spain-map/data.json`, (_error, spain) => {\n      resolve(spain)\n    })\n  })\n\nconst colorsScheme = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\nconst height = 500\nconst margin = {\n  bottom: 20,\n  top: 50,\n}\nconst strokeWidth = 0.4\n\nconst renderChart = async ({ data, rootElId }) => {\n  const widthChart = $(`#${rootElId}`).innerWidth()\n  const widthCanarias = widthChart / 3.5\n  const widthPeninsula = widthChart - widthCanarias - 10\n\n  const dataRoot = data.objects.data1\n  const dataGeo = topojson.feature(data, dataRoot).features\n\n  _.map(dataGeo, (d, i) => {\n    d.index = i\n  })\n\n  const colorScale = d3next\n    .scaleLinear()\n    .domain([0, dataRoot.geometries.length])\n    .range([0, 1])\n  const colorScaleConversion = d3.scale\n    .linear()\n    .domain(d3.range(0, 1, 1.0 / colorsScheme.length))\n    .range(colorsScheme)\n\n  const colorFn = function (d) {\n    return colorScaleConversion(colorScale(d.index))\n  }\n\n  const addDropShadowFilter = function (id, svg, deviation, slope) {\n    const defs = svg.append(\"defs\")\n    const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n    filter\n      .append(\"feGaussianBlur\")\n      .attr(\"in\", \"SourceAlpha\")\n      .attr(\"stdDeviation\", deviation)\n\n    filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n    filter\n      .append(\"feComponentTransfer\")\n      .append(\"feFuncA\")\n      .attr(\"slope\", slope)\n      .attr(\"type\", \"linear\")\n\n    const feMerge = filter.append(\"feMerge\")\n\n    feMerge.append(\"feMergeNode\")\n\n    return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n  }\n\n  const svg = d3.select(`#${rootElId}`)\n\n  const generateSvg = function (width) {\n    return svg\n      .append(\"div\")\n      .style(\"display\", \"inline-block\")\n      .style(\"height\", `${height + margin.top + margin.bottom}px`)\n      .style(\"width\", `${width}px`)\n      .append(\"svg:svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"svg:g\")\n      .attr(\n        \"transform\",\n        `translate(${width / 2},${String(height / 2 + margin.top)})`\n      )\n  }\n\n  const generateProjection = function (center) {\n    return d3.geo\n      .mercator()\n      .center(center)\n      .scale(2650)\n      .translate([widthPeninsula / 2, height / 2])\n  }\n\n  const generatePath = function (projection) {\n    return d3.geo.path().projection(projection)\n  }\n\n  const mouseover = function () {\n    return d3.select(this).style(\"fill\", \"#FFB61A\").style(\"stroke-width\", \"1px\")\n  }\n\n  const mouseleave = function () {\n    return d3\n      .select(this)\n      .style(\"fill\", colorFn)\n      .style(\"stroke-width\", strokeWidth)\n  }\n\n  const generateAreas = function (svgComp, path, filterId) {\n    return svgComp\n      .selectAll(\".area\")\n      .data(dataGeo)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", colorFn)\n      .style(\"stroke\", \"#FFF\")\n      .style(\"stroke-width\", strokeWidth)\n      .style(\"filter\", () => `url(#drop-shadow-${filterId})`)\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseleave\", mouseleave)\n  }\n\n  const svgLeft = generateSvg(widthCanarias)\n  const svgRight = generateSvg(widthPeninsula)\n\n  addDropShadowFilter(1, svgLeft, 2, 0.3)\n  addDropShadowFilter(2, svgRight, 2, 0.3)\n\n  const projectionCanarias = generateProjection([-7, 23])\n  const projectionPeninsula = generateProjection([6, 35.5])\n\n  const pathCanarias = generatePath(projectionCanarias)\n  const pathPeninsula = generatePath(projectionPeninsula)\n\n  generateAreas(svgLeft, pathCanarias, 1)\n  generateAreas(svgRight, pathPeninsula, 2)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({\n    data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/spain-map/spain-map\"\n\nconst SpainMap = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"spain-map-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default SpainMap\n","styl":null},"key":"spain-map"}}},"staticQueryHashes":[]}