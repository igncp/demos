{"componentChunkName":"component---src-pages-d-3-js-spain-map-tsx","path":"/d3js/spain-map/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[],"isCompleted":true,"name":"Spanish Map","notes":["For this chart I reused the code from the World Map chart and other demos","Added drop shadow for 3D effect"],"sources":["http://www.diva-gis.org/datadown"],"summary":[],"category":"d3js","files":{"cssModule":"","demo":[{"content":"import {\n  BaseType,\n  GeoPath,\n  GeoPermissibleObjects,\n  GeoProjection,\n  Selection,\n  geoMercator,\n  geoPath,\n  json,\n  range,\n  scaleLinear,\n  select,\n} from \"d3\"\nimport { feature } from \"topojson-client\"\nimport { GeoJsonProperties } from \"geojson\"\nimport { Objects, Topology } from \"topojson-specification\"\n\nconst fetchData = (): Promise<Data | undefined> =>\n  json(`${ROOT_PATH}data/d3js/spain-map/data.json`)\n\nconst colorsScheme = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\nconst height = 500\nconst margin = {\n  bottom: 20,\n  top: 50,\n}\nconst strokeWidth = 0.4\n\ntype SVG = Selection<BaseType, unknown, HTMLElement, unknown>\n\ntype DataShape = GeoPermissibleObjects & {\n  index: number\n  properties: {\n    NAME_2: string\n  }\n}\n\ntype Data = Topology<Objects<GeoJsonProperties>>\n\nconst addDropShadowFilter = function (\n  id: number,\n  svg: SVG,\n  deviation: number,\n  slope: number\n) {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst renderChart = ({ data, rootElId }: { data: Data; rootElId: string }) => {\n  const { width: widthChart } = (document.getElementById(\n    rootElId\n  ) as HTMLElement).getBoundingClientRect()\n  const widthCanarias = widthChart / 3.5\n  const widthPeninsula = widthChart - widthCanarias - 10\n\n  const {\n    objects: { data1: dataRoot },\n  } = data\n  const { features: dataGeo } = feature(data, dataRoot) as any\n\n  dataGeo.forEach((d: DataShape, i: number) => {\n    d.index = i\n  })\n\n  const colorScale = scaleLinear()\n    .domain([0, (dataRoot as any).geometries.length])\n    .range([0, 1])\n  const colorScaleConversion = scaleLinear<string>()\n    .domain(range(0, 1, 1.0 / colorsScheme.length))\n    .range(colorsScheme)\n\n  const colorFn = function (d: DataShape) {\n    return colorScaleConversion(colorScale(d.index))\n  }\n\n  const svg = select(`#${rootElId}`)\n\n  const generateSvg = function (width: number) {\n    return svg\n      .append(\"div\")\n      .style(\"display\", \"inline-block\")\n      .style(\"height\", `${height + margin.top + margin.bottom}px`)\n      .style(\"width\", `${width}px`)\n      .append(\"svg:svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"svg:g\")\n      .attr(\"transform\", `translate(${width / 2},${height / 2 + margin.top})`)\n  }\n\n  const generateProjection = (center: [number, number]) =>\n    geoMercator()\n      .center(center)\n      .scale(2650)\n      .translate([widthPeninsula / 2, height / 2])\n\n  const generatePath = function (projection: GeoProjection) {\n    return geoPath().projection(projection)\n  }\n\n  const generateAreas = function (\n    svgComp: SVG,\n    path: GeoPath<SVGPathElement>,\n    filterId: number\n  ) {\n    svgComp\n      .selectAll(\".area\")\n      .data<DataShape>(dataGeo)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", colorFn)\n      .style(\"stroke\", \"#FFF\")\n      .style(\"stroke-width\", strokeWidth)\n      .style(\"filter\", () => `url(#drop-shadow-${filterId})`)\n      .on(\"mouseover\", function () {\n        return select(this)\n          .style(\"fill\", \"#FFB61A\")\n          .style(\"stroke-width\", \"1px\")\n      })\n      .on(\"mouseleave\", function () {\n        return select<SVGPathElement, DataShape>(this)\n          .style(\"fill\", (d) => colorFn(d))\n          .style(\"stroke-width\", strokeWidth)\n      })\n      .append(\"title\")\n      .text((d) => d.properties.NAME_2)\n  }\n\n  const svgLeft = generateSvg(widthCanarias)\n  const svgRight = generateSvg(widthPeninsula)\n\n  addDropShadowFilter(1, svgLeft, 2, 0.3)\n  addDropShadowFilter(2, svgRight, 2, 0.3)\n\n  const projectionCanarias = generateProjection([-7, 23])\n  const projectionPeninsula = generateProjection([6, 35.5])\n\n  const pathCanarias = generatePath(projectionCanarias)\n  const pathPeninsula = generatePath(projectionPeninsula)\n\n  generateAreas(svgLeft, pathCanarias, 1)\n  generateAreas(svgRight, pathPeninsula, 2)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  if (!data) {\n    return Promise.resolve()\n  }\n\n  renderChart({\n    data,\n    rootElId: \"chart\",\n  })\n\n  return Promise.resolve()\n}\n\nexport default main\n","fileName":"spain-map"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/spain-map/spain-map\"\n\nconst SpainMap = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default SpainMap\n","type":"tsx"}},"key":"spain-map"},"meta":{"description":"Example of a geographic map using D3.js, where some styles have been added to give it a 3D effect."}}},"staticQueryHashes":[]}