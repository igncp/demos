{"componentChunkName":"component---src-pages-d-3-js-spain-map-js","path":"/d3js/spain-map/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Spanish Map","notes":["For this chart I reused the code from the World Map chart and other demos","Added drop shadow for 3D effect"],"sources":["http://www.diva-gis.org/datadown"],"category":"d3js","files":{"js":"const main = () => {\n  const widthCanarias = $(\"#chart\").innerWidth() / 3.5\n  const widthPeninsula = $(\"#chart\").innerWidth() - widthCanarias - 10\n  const height = 500\n  const margin = {\n    bottom: 20,\n    top: 50,\n  }\n  const strokeWidth = 0.4\n\n  d3.json(\"/data/d3js/spain-map/data.json\", (_error, spain) => {\n    const dataRoot = spain.objects.data1\n    const data = topojson.feature(spain, dataRoot).features\n\n    _.map(data, (d, i) => {\n      d.index = i\n    })\n\n    const colorsScheme = [\"#323247\", \"#7C7CC9\", \"#72B66C\", \"#429742\"]\n    const colorScale = d3.scale\n      .linear()\n      .domain([0, dataRoot.geometries.length])\n      .range([0, 1])\n    const colorScaleConversion = d3.scale\n      .linear()\n      .domain(d3.range(0, 1, 1.0 / colorsScheme.length))\n      .range(colorsScheme)\n\n    const colorFn = function (d) {\n      return colorScaleConversion(colorScale(d.index))\n    }\n\n    const addDropShadowFilter = function (id, svg, deviation, slope) {\n      const defs = svg.append(\"defs\")\n      const filter = defs.append(\"filter\").attr(\"id\", `drop-shadow-${id}`)\n\n      filter.append(\"feGaussianBlur\").attr({\n        in: \"SourceAlpha\",\n        stdDeviation: deviation,\n      })\n      filter.append(\"feOffset\").attr({\n        dx: 1,\n        dy: 1,\n      })\n      filter.append(\"feComponentTransfer\").append(\"feFuncA\").attr({\n        slope,\n        type: \"linear\",\n      })\n\n      const feMerge = filter.append(\"feMerge\")\n\n      feMerge.append(\"feMergeNode\")\n\n      return feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n    }\n\n    const svg = d3.select(\"#chart\")\n\n    const generateSvg = function (width) {\n      return svg\n        .append(\"div\")\n        .style(\"display\", \"inline-block\")\n        .style(\"height\", `${height + margin.top + margin.bottom}px`)\n        .style(\"width\", `${width}px`)\n        .append(\"svg:svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"svg:g\")\n        .attr(\n          \"transform\",\n          `translate(${width / 2},${String(height / 2 + margin.top)})`\n        )\n    }\n\n    const generateProjection = function (center) {\n      return d3.geo\n        .mercator()\n        .center(center)\n        .scale(2650)\n        .translate([widthPeninsula / 2, height / 2])\n    }\n\n    const generatePath = function (projection) {\n      return d3.geo.path().projection(projection)\n    }\n\n    const mouseover = function () {\n      return d3.select(this).style({\n        fill: \"#FFB61A\",\n        \"stroke-width\": \"1px\",\n      })\n    }\n\n    const mouseleave = function () {\n      return d3.select(this).style({\n        fill: colorFn,\n        \"stroke-width\": strokeWidth,\n      })\n    }\n\n    const generateAreas = function (svgComp, path, filterId) {\n      return svgComp\n        .selectAll(\".area\")\n        .data(data)\n        .enter()\n        .append(\"path\")\n        .attr({\n          d: path,\n        })\n        .style({\n          fill: colorFn,\n          stroke: \"#FFF\",\n          \"stroke-width\": strokeWidth,\n        })\n        .style(\"filter\", () => `url(#drop-shadow-${filterId})`)\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseleave\", mouseleave)\n    }\n\n    const svgLeft = generateSvg(widthCanarias)\n    const svgRight = generateSvg(widthPeninsula)\n\n    addDropShadowFilter(1, svgLeft, 2, 0.3)\n    addDropShadowFilter(2, svgRight, 2, 0.3)\n\n    const projectionCanarias = generateProjection([-7, 23])\n    const projectionPeninsula = generateProjection([6, 35.5])\n\n    const pathCanarias = generatePath(projectionCanarias)\n    const pathPeninsula = generatePath(projectionPeninsula)\n\n    generateAreas(svgLeft, pathCanarias, 1)\n    generateAreas(svgRight, pathPeninsula, 2)\n  })\n}\n\nexport default main\n","page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/spain-map/spain-map\"\n\nconst SpainMap = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\"/vendors/d3/d3.min.js\", \"/vendors/topojson/topojson.js\"]}\n  >\n    <div className=\"spain-map-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default SpainMap\n","styl":null,"ts":null},"key":"spain-map"}}},"staticQueryHashes":[]}