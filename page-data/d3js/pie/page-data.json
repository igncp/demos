{"componentChunkName":"component---src-pages-d-3-js-pie-tsx","path":"/d3js/pie/","result":{"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Pie","notes":["Added the animation (transition) by changing a random slice data by a random integer between range"],"sources":["http://codepen.io/nishidh41/pen/Frzhq"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".label {\n  fill: black;\n  font: bold 12px Arial, sans-serif;\n  text-anchor: middle;\n}\n","fileName":"pie-chart.module.css"}],"demoTS":[{"content":"import { createChart } from \"./pie-chart\"\nimport { CONTAINER_ID, createChartConfig } from \"./pie-chart-config\"\nimport { BUTTON_ID, setupChartControls } from \"./pie-chart-controls\"\nimport { TechItem } from \"./tech-data-model\"\n\nconst main = async () => {\n  const techItems = await TechItem.fetchAndCreateCollection()\n  const chartConfig = createChartConfig(techItems)\n\n  const chart = createChart(chartConfig)\n\n  setupChartControls((newValue) => {\n    chart.update(newValue)\n  })\n}\n\nexport { BUTTON_ID, CONTAINER_ID }\n\nexport default main\n","fileName":"pie.ts"},{"content":"import { ChartConfig } from \"./pie-chart\"\nimport { TechItem } from \"./tech-data-model\"\n\nexport const CONTAINER_ID = \"chart\"\n\ntype Config = ChartConfig<TechItem>\n\nconst getSliceValue: Config[\"getSliceValue\"] = (techItem) => techItem.getValue()\n\nconst updateSliceValue: Config[\"updateSliceValue\"] = ({\n  newValue,\n  sliceData: techItem,\n}) => {\n  techItem.setValue(newValue)\n}\n\nconst getSliceTitle: Config[\"getSliceTitle\"] = (techItem) =>\n  techItem.getSummary()\n\nexport const createChartConfig = (techItems: TechItem[]): Config => ({\n  getSliceTitle,\n  getSliceValue,\n  pieSlices: techItems,\n  rootElId: CONTAINER_ID,\n  updateSliceValue,\n})\n","fileName":"pie-chart-config.ts"},{"content":"export const BUTTON_ID = \"change-data\"\n\nconst MAX_NEW_VAL = 46\nconst MIN_NEW_VAL = 2\n\nexport const setupChartControls = (updateChart: (newValue: number) => void) => {\n  const buttonElement = document.getElementById(BUTTON_ID) as HTMLElement\n\n  buttonElement.addEventListener(\"click\", () => {\n    const newSliceValue =\n      Math.floor(Math.random() * (MAX_NEW_VAL - MIN_NEW_VAL)) + MIN_NEW_VAL\n\n    updateChart(newSliceValue)\n  })\n}\n","fileName":"pie-chart-controls.ts"},{"content":"import {\n  DefaultArcObject,\n  PieArcDatum,\n  Selection,\n  arc as arcD3,\n  easeBack,\n  interpolate,\n  pie as pieD3,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport cloneDeep from \"lodash/cloneDeep\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nimport * as styles from \"./pie-chart.module.css\"\n\nconst height = 300\nconst outerRadius = 100\nconst transitionDuration = 3000\n\nconst colorScale = scaleOrdinal(schemePastel2)\nconst easeFn = easeBack\n\nexport type ChartConfig<SliceData> = {\n  getSliceTitle: (sliceData: SliceData) => string\n  getSliceValue: (sliceData: SliceData) => number\n  pieSlices: SliceData[]\n  rootElId: string\n  updateSliceValue: (o: { newValue: number; sliceData: SliceData }) => void\n}\n\nexport const createChart = <SliceData>({\n  getSliceTitle,\n  getSliceValue,\n  pieSlices,\n  rootElId,\n  updateSliceValue,\n}: ChartConfig<SliceData>) => {\n  type Slice = SliceData & {\n    ea0?: PieArcDatum<Slice>\n  }\n\n  const sliceClass = `slice-${uuidv1().slice(0, 6)}`\n\n  type SliceArc = PieArcDatum<Slice>\n\n  const stashArcs = (arcItem: SliceArc) => {\n    arcItem.data.ea0 = cloneDeep(arcItem)\n  }\n\n  const arc = arcD3<SliceArc>().outerRadius(outerRadius).innerRadius(0)\n\n  type ArcDatum = Omit<\n    DefaultArcObject & SliceArc,\n    \"innerRadius\" | \"outerRadius\"\n  >\n\n  const textTransform = (arcData: ArcDatum): string => {\n    const centroidD = {\n      ...arcData,\n      innerRadius: outerRadius / 2,\n      outerRadius,\n    }\n\n    return `translate(${arc.centroid(centroidD)})`\n  }\n\n  const pie = pieD3<Slice>()\n    .sort(null)\n    .value((slice: Slice) => getSliceValue(slice))\n\n  const arcTween = (finalSlice: SliceArc) => {\n    const {\n      data: { ea0: initialSlice },\n    } = finalSlice\n    const interpolateFn = interpolate(initialSlice, finalSlice)\n\n    finalSlice.data.ea0 = interpolateFn(0)\n\n    return (normalizedTime: number) => arc(interpolateFn(normalizedTime))!\n  }\n\n  type ChartPaths = Selection<SVGPathElement, SliceArc, SVGGElement, unknown>\n  type ChartLabels = Selection<SVGTextElement, SliceArc, SVGGElement, unknown>\n\n  class PieChart {\n    private readonly slices: Slice[]\n    private paths: ChartPaths | null\n    private labels: ChartLabels | null\n\n    public constructor() {\n      this.slices = pieSlices\n\n      this.paths = null\n      this.labels = null\n\n      this.render()\n    }\n\n    public update(newSliceValue: number) {\n      const { labels, paths, slices } = this\n      const sliceIndex = Math.floor(Math.random() * slices.length)\n\n      updateSliceValue({\n        newValue: newSliceValue,\n        sliceData: slices[sliceIndex],\n      })\n      ;(paths as ChartPaths)\n        .data(pie(slices))\n        .transition()\n        .duration(transitionDuration)\n        .ease(easeFn)\n        .attrTween(\"d\", arcTween)\n      ;(labels as ChartLabels)\n        .data(pie(slices))\n        .transition()\n        .duration(transitionDuration)\n        .ease(easeFn)\n        .attr(\"transform\", textTransform)\n        .each(function (slice) {\n          select(this).text(getSliceValue(slice.data))\n        })\n    }\n\n    private render() {\n      const { slices } = this\n      const { width } = (document.getElementById(\n        rootElId\n      ) as HTMLElement).getBoundingClientRect()\n\n      const svg = select(`#${rootElId}`)\n        .append(\"svg:svg\")\n        .attr(\"height\", height)\n        .attr(\"width\", width)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2},${height / 2})`)\n\n      const slicesEls = svg\n        .selectAll(`.${sliceClass}`)\n        .data(pie(slices))\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", sliceClass)\n        .attr(\"title\", (slice) => getSliceTitle(slice.data))\n\n      $(`.${sliceClass}`).tooltip({\n        track: true,\n      })\n\n      this.paths = slicesEls\n        .append(\"path\")\n        .attr(\"d\", arc)\n        .attr(\"fill\", (...[, sliceIndex]) => colorScale(sliceIndex.toString()))\n        .each(stashArcs)\n\n      this.labels = slicesEls\n        .filter((slice: SliceArc) => slice.endAngle - slice.startAngle > 0.2)\n        .append(\"text\")\n        .attr(\"dy\", \"0.35em\")\n        .attr(\"dx\", \"0.35em\")\n        .attr(\"class\", styles.label)\n        .attr(\"transform\", textTransform)\n        .text((slice) => getSliceValue(slice.data))\n    }\n  }\n\n  return new PieChart()\n}\n","fileName":"pie-chart.ts"},{"content":"type TechItemBase = {\n  readonly label: string\n  readonly val: number // eslint-disable-line id-denylist\n}\n\ntype TechItemData = {\n  arbitraryValue: number\n  readonly techLabel: string\n}\n\nexport class TechItem {\n  private readonly techItemData: TechItemData\n\n  private constructor(techItemData: TechItemData) {\n    this.techItemData = techItemData\n  }\n\n  public static async fetchAndCreateCollection(): Promise<TechItem[]> {\n    const response = await fetch(`${ROOT_PATH}data/d3js/pie/data.json`)\n    const techItemsBase = (await response.json()) as TechItemBase[]\n\n    const techItemsData = techItemsBase.map((techItemBase) => ({\n      arbitraryValue: techItemBase.val,\n      techLabel: techItemBase.label,\n    }))\n\n    return techItemsData.map((techItemData) => new TechItem(techItemData))\n  }\n\n  public getValue() {\n    return this.techItemData.arbitraryValue\n  }\n\n  public setValue(newValue: number) {\n    this.techItemData.arbitraryValue = newValue\n  }\n\n  public getSummary(): string {\n    const { techItemData } = this\n\n    return `${techItemData.techLabel}: ${techItemData.arbitraryValue}`\n  }\n}\n","fileName":"tech-data-model.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { BUTTON_ID, CONTAINER_ID } from \"@/demos/pie/pie\"\n\nconst Pie = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      <button className=\"btn btn-success\" id={BUTTON_ID} type=\"button\">\n        Change\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Pie\n","type":"tsx"}},"key":"pie"},"meta":{"description":"Pie chart example using D3.js, with an animated transition and a random change of values to show how to animate between states."}}},"staticQueryHashes":[]}