{
    "componentChunkName": "component---src-pages-d-3-js-pie-tsx",
    "path": "/d3js/pie/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Pie","notes":["Added the animation (transition) by changing a random slice data by a random integer between range"],"sources":["http://codepen.io/nishidh41/pen/Frzhq"],"summary":[],"category":"d3js","files":{"demoCSS":[{"content":".label {\n  fill: black;\n  font: bold 12px Arial, sans-serif;\n  text-anchor: middle;\n}\n\n.form {\n  margin-bottom: 20px;\n}\n","filePath":"src/demos/pie/pie-chart.module.css"}],"demoTS":[{"content":"import { createChart } from \"./pie-chart\"\nimport { CONTAINER_ID, createChartConfig } from \"./pie-chart-config\"\nimport { BUTTON_ID, setupChartControls } from \"./pie-chart-controls\"\nimport { TechItem } from \"./tech-data-model\"\n\nconst main = async () => {\n  const techItems = await TechItem.fetchAndCreateCollection()\n  const chartConfig = createChartConfig(techItems)\n\n  const chart = createChart(chartConfig)\n\n  setupChartControls({\n    getChartValues: () => techItems,\n    onUpdateChart: (updateValue) => {\n      chart.update(updateValue)\n    },\n  })\n}\n\nexport { BUTTON_ID, CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/pie/pie.ts"},{"content":"import { ChartConfig } from \"./pie-chart\"\nimport { TechItem } from \"./tech-data-model\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype Config = ChartConfig<TechItem>\n\nconst getSliceValue: Config[\"getSliceValue\"] = (techItem) => techItem.getValue()\n\nconst updateSliceValue: Config[\"updateSliceValue\"] = ({\n  newValue,\n  sliceData: techItem,\n}) => {\n  techItem.setValue(newValue)\n}\n\nconst getSliceTitle: Config[\"getSliceTitle\"] = (techItem) =>\n  techItem.getSummary()\n\nconst createChartConfig = (techItems: TechItem[]): Config => ({\n  getSliceTitle,\n  getSliceValue,\n  pieSlices: techItems,\n  rootElId: CONTAINER_ID,\n  updateSliceValue,\n})\n\nexport { CONTAINER_ID, createChartConfig }\n","filePath":"src/demos/pie/pie-chart-config.ts"},{"content":"import { TechItem } from \"./tech-data-model\"\n\nconst BUTTON_ID = \"change-data\"\n\nconst MAX_NEW_VAL_UPDATE = 45\nconst MIN_NEW_VAL_UPDATE = 20\n\nconst setupChartControls = ({\n  getChartValues,\n  onUpdateChart,\n}: {\n  getChartValues: () => TechItem[]\n  onUpdateChart: (opts: { newValue: number; newValueIndex: number }) => void\n}) => {\n  const buttonElement = document.getElementById(BUTTON_ID) as HTMLElement\n\n  buttonElement.addEventListener(\"click\", () => {\n    const techItemsValues = getChartValues().map((techItem) =>\n      techItem.getValue()\n    )\n    const { length: techItemsCount } = techItemsValues\n    const randomItemIndex = Math.floor(Math.random() * techItemsCount)\n\n    const randomUpdate =\n      Math.floor(Math.random() * (MAX_NEW_VAL_UPDATE - MIN_NEW_VAL_UPDATE)) +\n      MIN_NEW_VAL_UPDATE\n    const randomUpdateSign = Math.random() < 0.5 ? -1 : 1\n\n    const newValue =\n      techItemsValues[randomItemIndex] + randomUpdate * randomUpdateSign\n\n    onUpdateChart({\n      newValue: newValue >= 0 ? newValue : randomUpdate,\n      newValueIndex: randomItemIndex,\n    })\n  })\n}\n\nexport { BUTTON_ID, setupChartControls }\n","filePath":"src/demos/pie/pie-chart-controls.ts"},{"content":"import {\n  Arc,\n  DefaultArcObject,\n  Pie,\n  PieArcDatum,\n  Selection,\n  arc as arcD3,\n  easeBack,\n  interpolate,\n  pie as pieD3,\n  scaleOrdinal,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport cloneDeep from \"lodash/cloneDeep\"\nimport { v1 as uuidv1 } from \"uuid\"\n\nimport * as styles from \"./pie-chart.module.css\"\n\nconst height = 300\nconst outerRadius = 100\nconst transitionDuration = 3000\n\nconst colorScale = scaleOrdinal(schemePastel2)\nconst easeFn = easeBack\n\nconst renderShadowFilter = <T>(\n  svg: Selection<SVGGElement, T, HTMLElement, unknown>\n) =>\n  svg.append(\"g\").html(`\n    <filter height=\"300%\"width=\"300%\"x=\"-100%\"y=\"-100%\" filterUnits=\"userSpaceOnUse\" id=\"shadow-filter\">\n      <feGaussianBlur in=\"SourceAlpha\" result=\"blur\" stdDeviation=\"4\" />\n      <feOffset dx=\"4\" dy=\"4\" in=\"blur\" result=\"offsetBlur\" />\n      <feSpecularLighting\n        in=\"blur\"\n        lightingColor=\"#bbbbbb\"\n        result=\"specOut\"\n        specularConstant=\".75\"\n        specularExponent=\"50\"\n        surfaceScale=\"5\"\n      >\n        <fePointLight x=\"-5000\" y=\"-10000\" z=\"20000\" />\n      </feSpecularLighting>\n      <feComposite\n        in=\"specOut\"\n        in2=\"SourceAlpha\"\n        operator=\"in\"\n        result=\"specOut\"\n      />\n      <feComposite\n        in=\"SourceGraphic\"\n        in2=\"specOut\"\n        k1=\"0\"\n        k2=\"1\"\n        k3=\"1\"\n        k4=\"0\"\n        operator=\"arithmetic\"\n        result=\"litPaint\"\n      />\n      <feMerge>\n        <feMergeNode in=\"offsetBlur\" />\n        <feMergeNode in=\"litPaint\" />\n      </feMerge>\n    </filter>\n  `)\n\nconst renderBlurFilter = <T>(\n  svg: Selection<SVGGElement, T, HTMLElement, unknown>\n) => {\n  svg\n    .append(\"g\")\n    .append(\"filter\")\n    .attr(\"height\", \"300%\")\n    .attr(\"x\", \"-100%\")\n    .attr(\"y\", \"-100%\")\n    .attr(\"id\", \"blur\")\n    .attr(\"width\", \"300%\")\n    .append(\"feGaussianBlur\")\n    .attr(\"stdDeviation\", \"1 1\")\n}\n\ntype ChartConfig<SliceData> = {\n  getSliceTitle: (sliceData: SliceData) => string\n  getSliceValue: (sliceData: SliceData) => number\n  pieSlices: SliceData[]\n  rootElId: string\n  updateSliceValue: (sliceInfo: {\n    newValue: number\n    sliceData: SliceData\n  }) => void\n}\n\ntype Slice<SliceData> = SliceData & {\n  ea0?: PieArcDatum<Slice<SliceData>>\n}\n\ntype SliceArc<SliceData> = PieArcDatum<Slice<SliceData>>\n\ntype ArcDatum<SliceData> = Omit<\n  DefaultArcObject & SliceArc<SliceData>,\n  \"innerRadius\" | \"outerRadius\"\n>\n\ntype ChartElements = Readonly<{\n  gSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgSel: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}>\n\nclass PieChart<SliceData> {\n  private readonly slices: Array<Slice<SliceData>>\n  private readonly config: ChartConfig<SliceData>\n  private readonly sliceClass: string\n\n  private readonly arc: Arc<any, SliceArc<SliceData>> // eslint-disable-line @typescript-eslint/no-explicit-any\n  private readonly pie: Pie<any, Slice<SliceData>> // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  private readonly elements: ChartElements\n\n  public constructor(config: ChartConfig<SliceData>) {\n    this.config = config\n    this.slices = config.pieSlices\n    this.sliceClass = `slice-${uuidv1().slice(0, 6)}`\n\n    this.arc = arcD3<SliceArc<SliceData>>()\n      .outerRadius(outerRadius)\n      .innerRadius(0)\n\n    this.pie = pieD3<Slice<SliceData>>()\n      .sort(null)\n      .value((slice: Slice<SliceData>) => config.getSliceValue(slice))\n\n    const svgSel = select<HTMLDivElement, unknown>(\n      `#${config.rootElId}`\n    ).append(\"svg\")\n    const gSel = svgSel.append(\"g\")\n\n    renderShadowFilter(gSel)\n    renderBlurFilter(gSel)\n\n    this.elements = {\n      gSel,\n      svgSel,\n    }\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  private static stashArcs<SliceData>(arcItem: SliceArc<SliceData>) {\n    arcItem.data.ea0 = cloneDeep(arcItem)\n  }\n\n  public teardown() {\n    window.removeEventListener(\"resize\", this.handleResize)\n  }\n\n  public update({\n    newValue,\n    newValueIndex,\n  }: {\n    newValue: number\n    newValueIndex: number\n  }) {\n    const {\n      config,\n      elements: { gSel },\n      slices,\n    } = this\n\n    config.updateSliceValue({\n      newValue,\n      sliceData: slices[newValueIndex],\n    })\n\n    const paths = gSel.selectAll<SVGPathElement, Slice<SliceData>>(\n      `.slice-path`\n    )\n    const labels = gSel.selectAll<SVGTextElement, Slice<SliceData>>(\n      `.${styles.label}`\n    )\n\n    paths\n      .data(this.pie(slices))\n      .transition()\n      .duration(transitionDuration)\n      .ease(easeFn)\n      .attrTween(\"d\", this.arcTween.bind(this))\n\n    const labelsUpdate = labels.data(this.pie(slices))\n\n    labelsUpdate\n      .transition(\"transitionWithEase\")\n      .duration(transitionDuration)\n      .ease(easeFn)\n      .attrTween(\"transform\", this.textTransformTween.bind(this))\n      .style(\"opacity\", (slice) => {\n        const sliceAngle = Math.abs(slice.startAngle - slice.endAngle)\n\n        return sliceAngle < 0.4 ? 0 : 1\n      })\n\n    labelsUpdate\n      .transition(\"textTransition\")\n      .duration(transitionDuration)\n      .tween(\"text\", function tweenText(slice) {\n        const currentText = Number(select(this).text())\n        const newText = Number(config.getSliceValue(slice.data))\n\n        if (currentText === newText) {\n          return () => newText\n        }\n\n        const interpolateFn = interpolate(currentText, newText)\n\n        return (time: number) => {\n          this.textContent = interpolateFn(time).toFixed(0).toString()\n        }\n      })\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n\n  private render() {\n    const {\n      config,\n      elements: { gSel, svgSel },\n      slices,\n    } = this\n    const { width } = (\n      document.getElementById(config.rootElId) as HTMLElement\n    ).getBoundingClientRect()\n\n    svgSel.attr(\"height\", height).attr(\"width\", width)\n\n    gSel\n      .attr(\"transform\", `translate(${width / 2},${height / 2})`)\n      .style(\"filter\", `url(#shadow-filter`)\n\n    const slicesEls = gSel\n      .selectAll(`.${this.sliceClass}`)\n      .data(this.pie(slices))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", this.sliceClass)\n      .attr(\"title\", (slice) => this.config.getSliceTitle(slice.data))\n      .on(\"mouseenter\", function handleMouseEnter() {\n        slicesEls.style(\"filter\", `url(#blur)`)\n        select(this).style(\"filter\", \"none\")\n      })\n      .on(\"mouseleave\", () => {\n        slicesEls.style(\"filter\", null)\n      })\n\n    $(`.${this.sliceClass}`).tooltip({\n      track: true,\n    })\n\n    slicesEls\n      .append(\"path\")\n      .attr(\"d\", this.arc)\n      .attr(\"fill\", (...[, sliceIndex]) => colorScale(sliceIndex.toString()))\n      .attr(\"class\", \"slice-path\")\n      .attr(\"stroke\", \"#777\")\n      .each((slice) => {\n        PieChart.stashArcs<SliceData>(slice)\n      })\n\n    slicesEls\n      .filter(\n        (slice: SliceArc<SliceData>) => slice.endAngle - slice.startAngle > 0.2\n      )\n      .append(\"text\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"dx\", \"0.35em\")\n      .attr(\"class\", styles.label)\n      .attr(\"transform\", this.textTransform.bind(this))\n      .text((slice) => this.config.getSliceValue(slice.data))\n  }\n\n  private textTransform(arcData: ArcDatum<SliceData>): string {\n    const centroidD = {\n      ...arcData,\n      innerRadius: outerRadius / 2,\n      outerRadius,\n    }\n\n    return `translate(${this.arc.centroid(centroidD)})`\n  }\n\n  private textTransformTween(finalSlice: SliceArc<SliceData>) {\n    const {\n      data: { ea0: initialSlice },\n    } = finalSlice\n    const interpolateFn = interpolate(initialSlice, finalSlice)\n\n    return (time: number) => {\n      const arcData = interpolateFn(time)\n\n      return this.textTransform(arcData)\n    }\n  }\n\n  private arcTween(finalSlice: SliceArc<SliceData>) {\n    const {\n      data: { ea0: initialSlice },\n    } = finalSlice\n    const interpolateFn = interpolate(initialSlice, finalSlice)\n\n    finalSlice.data.ea0 = interpolateFn(0)\n\n    return (normalizedTime: number) => this.arc(interpolateFn(normalizedTime))!\n  }\n}\n\nconst createChart = <SliceData>(config: ChartConfig<SliceData>) =>\n  new PieChart(config)\n\nexport { ChartConfig, createChart }\n","filePath":"src/demos/pie/pie-chart.ts"},{"content":"type TechItemBase = {\n  readonly label: string\n  readonly val: number // eslint-disable-line id-denylist\n}\n\ntype TechItemData = {\n  arbitraryValue: number\n  readonly techLabel: string\n}\n\nexport class TechItem {\n  private readonly techItemData: TechItemData\n\n  private constructor(techItemData: TechItemData) {\n    this.techItemData = techItemData\n  }\n\n  public static async fetchAndCreateCollection(): Promise<TechItem[]> {\n    const response = await fetch(`${ROOT_PATH}data/d3js/pie/data.json`)\n    const techItemsBase = (await response.json()) as TechItemBase[]\n\n    const techItemsData = techItemsBase.map((techItemBase) => ({\n      arbitraryValue: techItemBase.val,\n      techLabel: techItemBase.label,\n    }))\n\n    return techItemsData.map((techItemData) => new TechItem(techItemData))\n  }\n\n  public getValue() {\n    return this.techItemData.arbitraryValue\n  }\n\n  public setValue(newValue: number) {\n    this.techItemData.arbitraryValue = newValue\n  }\n\n  public getSummary(): string {\n    const { techItemData } = this\n\n    return `${techItemData.techLabel}: ${techItemData.arbitraryValue}`\n  }\n}\n","filePath":"src/demos/pie/tech-data-model.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { BUTTON_ID, CONTAINER_ID } from \"@/demos/pie/pie\"\nimport * as styles from \"@/demos/pie/pie-chart.module.css\"\n\nconst Pie = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <form className={styles.form}>\n      <button className=\"btn btn-success\" id={BUTTON_ID} type=\"button\">\n        Update Slice\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Pie\n","type":"tsx"}},"key":"pie"},"meta":{"description":"Pie chart example using D3.js, with an animated transition and a random change of values to show how to animate between states."}}},
    "staticQueryHashes": []}