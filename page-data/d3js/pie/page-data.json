{"componentChunkName":"component---src-pages-d-3-js-pie-js","path":"/d3js/pie/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Pie","notes":["Added the animation (transition) by changing a random slice data by a random integer between range"],"sources":["http://codepen.io/nishidh41/pen/Frzhq"],"category":"d3js","files":{"js":null,"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/pie/pie\"\n\nconst Pie = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <form>\n      <button className=\"btn btn-success\" id=\"change-data\" type=\"button\">\n        Change\n      </button>\n    </form>\n    <div className=\"pie-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Pie\n","styl":null,"ts":"import cloneDeep from \"lodash/cloneDeep\"\nimport * as d3 from \"d3\"\n\nconst fetchData = async () => {\n  const data = await fetch(`${ROOT_PATH}data/d3js/pie/data.json`)\n  const jsonData = await data.json()\n\n  return jsonData\n}\n\ntype Data = Array<{\n  ea0?: d3.PieArcDatum<Data[0]>\n  label: string\n  val: number\n}>\n\nconst height = 300\nconst outerRadius = 100\n\nconst stashArcs = (d: d3.PieArcDatum<Data[9]>) => {\n  d.data.ea0 = cloneDeep(d)\n}\n\nconst arc = d3.arc().outerRadius(outerRadius).innerRadius(0)\n\ntype ArcDatum = Omit<\n  d3.DefaultArcObject & d3.PieArcDatum<Data[0]>,\n  \"outerRadius\" | \"innerRadius\"\n>\n\nconst textTransform = (d: ArcDatum): string => {\n  const centroidD = {\n    ...d,\n    innerRadius: outerRadius / 2,\n    outerRadius,\n  }\n\n  return `translate(${arc.centroid(centroidD)})`\n}\n\nconst pie = d3\n  .pie<Data[0]>()\n  .sort(null)\n  .value((d: Data[0]) => d.val)\n\nconst color = d3.scaleOrdinal(d3.schemePastel2)\n\nconst arcTween: any = (d: d3.PieArcDatum<Data[0]>) => {\n  const interpolateFn = d3.interpolate(d.data.ea0, d)\n\n  d.data.ea0 = interpolateFn(0)\n\n  return (normalizedTime: number) => arc(interpolateFn(normalizedTime) as any)\n}\n\ntype PieChartOpts = {\n  data: Data\n  rootElId: string\n}\n\ntype ChartPaths = d3.Selection<\n  SVGPathElement,\n  d3.PieArcDatum<Data[0]>,\n  SVGGElement,\n  unknown\n>\ntype ChartLabels = d3.Selection<\n  SVGTextElement,\n  d3.PieArcDatum<Data[0]>,\n  SVGGElement,\n  unknown\n>\n\nclass PieChart {\n  private rootElId: string\n  private data: Data\n  private paths: ChartPaths | null\n  private labels: ChartLabels | null\n\n  public constructor({ data, rootElId }: PieChartOpts) {\n    this.data = data\n    this.rootElId = rootElId\n\n    this.paths = null\n    this.labels = null\n\n    this.render()\n  }\n\n  public update(val: number) {\n    const { data, paths, labels } = this\n    const index = Math.floor(Math.random() * data.length)\n\n    data[index].val = val\n    ;(paths as ChartPaths)\n      .data(pie(data))\n      .transition()\n      .duration(1000)\n      .attrTween(\"d\", arcTween)\n    ;(labels as ChartLabels)\n      .data(pie(data))\n      .transition()\n      .duration(1000)\n      .attr(\"transform\", textTransform)\n      .each(function (d: { data: Data[0] }) {\n        const el: SVGTextElement = this\n\n        d3.select(el).text(d.data.val)\n      })\n  }\n\n  private render() {\n    const { rootElId, data } = this\n    const { width } = (document.getElementById(\n      rootElId\n    ) as HTMLElement).getBoundingClientRect()\n\n    const svg = d3\n      .select(`#${rootElId}`)\n      .append(\"svg:svg\")\n      .attr(\"height\", height)\n      .attr(\"width\", width)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${height / 2})`)\n\n    const slices = svg\n      .selectAll(\".slice\")\n      .data(pie(data))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"slice\")\n\n    this.paths = slices\n      .append(\"path\")\n      .attr(\"d\", arc as any)\n      .attr(\"fill\", (_d, i) => color(i.toString()))\n      .each(stashArcs)\n\n    this.labels = slices\n      .filter((d) => d.endAngle - d.startAngle > 0.2)\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", \".35em\")\n      .attr(\"transform\", textTransform)\n      .style(\"fill\", \"black\")\n      .style(\"font\", \"bold 12px Arial\")\n      .text((d) => d.data.val)\n\n    slices.append(\"title\").text((d) => d.data.label)\n  }\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  const chart = new PieChart({\n    data,\n    rootElId: \"chart\",\n  })\n\n  ;(document.getElementById(\"change-data\") as HTMLElement).addEventListener(\n    \"click\",\n    () => {\n      const randomVal = Math.floor(Math.random() * 44) + 2\n\n      chart.update(randomVal)\n    }\n  )\n}\n\nexport default main\n"},"key":"pie"}}},"staticQueryHashes":[]}