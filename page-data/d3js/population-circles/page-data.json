{"componentChunkName":"component---src-pages-d-3-js-population-circles-tsx","path":"/d3js/population-circles/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[["d3-scale API reference","https://github.com/d3/d3-scale#api-reference"],["d3-scale Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts"],["d3-hierarchy API reference","https://github.com/d3/d3-hierarchy#api-reference"],["d3-hierarchy Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-hierarchy/index.d.ts"],["d3-selection API reference","https://github.com/d3/d3-selection#api-reference"],["d3-selection Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-selection/index.d.ts"],["d3-scale-chromatic API reference","https://github.com/d3/d3-scale-chromatic#api-reference"],["d3-scale-chromatic Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale-chromatic/index.d.ts"],["d3-transition API reference","https://github.com/d3/d3-transition#api-reference"],["d3-transition Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-transition/index.d.ts"],["d3-zoom API reference","https://github.com/d3/d3-zoom#api-reference"],["d3-zoom Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-zoom/index.d.ts"],["animejs API reference","https://animejs.com/documentation/"],["animejs Types","https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/animejs/index.d.ts"]],"isCompleted":false,"name":"Population Circles","notes":["It has transitions for nested elements: by using enter/exist/transition approach plus (new) `.data(d => d)`","Click a circle while pressing the Control key to open a search window for a municipality","The population JSON data has been parsed and saved in the file to rename properties and remove unused","You can use the mouse to zoom","TODO: Fix zooming function","TODO: Review checklist"],"sources":["https://observablehq.com/@d3/bubble-chart?collection=@d3/d3-hierarchy","https://datos.gob.es/en/catalogo/ea0010587-malaga-poblacion-por-municipios-y-sexo-anual-cifras-oficiales-de-poblacion-de-los-municipios-espanoles-revision-del-padron-municipal-identificador-api-2882"],"summary":[],"category":"d3js","files":{"cssModule":".radio {\n  cursor: pointer;\n  display: inline-block;\n\n  input {\n    margin-right: 5px;\n  }\n\n  input,\n  label {\n    cursor: pointer;\n  }\n}\n\n.slider {\n  margin-bottom: 20px;\n}\n\n.circle {\n  fill-opacity: 0.8;\n  stroke-width: 0;\n}\n\n.header {\n  font-size: 20px;\n}\n","demo":{"content":"import {\n  BaseType,\n  D3ZoomEvent,\n  HierarchyCircularNode,\n  Selection,\n  Transition,\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  json,\n  pack,\n  scaleOrdinal,\n  schemeSet3,\n  select,\n  zoom,\n} from \"d3\"\nimport anime from \"animejs\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\nimport chroma from \"chroma-js\"\n\nimport * as styles from \"./population-circles.module.css\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\ntype Municipality = {\n  name: string\n  values: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n}\n\ntype MunicipalityWithAnimation = Municipality & {\n  hoverAnimation?: anime.AnimeInstance | null\n}\n\ntype MunicipalityNode = HierarchyCircularNode<MunicipalityWithAnimation>\ntype MunicipalityTransition = Transition<\n  BaseType,\n  MunicipalityNode,\n  BaseType,\n  MunicipalityNode\n>\n\ntype PopulationType = keyof Municipality[\"values\"]\n\ntype State = {\n  lastPosition: { k: number; x: number; y: number }\n  populationRange: [number, number]\n  populationType: PopulationType\n  timeRangeIndex: number\n}\n\nconst fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown) as Promise<Municipality[]>\n\nconst dropShadowBaseId = \"dropShadowBase\"\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\nconst height = 400\n\nconst formatPopulation = (populationNum: number) =>\n  Number(populationNum.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\nconst typeNouns: Record<string, string> = {\n  females: \"females\",\n  males: \"males\",\n  total: \"people\",\n}\n\nconst getYearStr = (dateStr: string) => new Date(dateStr).getFullYear()\n\ntype RenderChart = (o: {\n  municipalities: Municipality[]\n  onClick: (m: Municipality) => void\n  rootElId: string\n}) => {\n  onPopulationPercentilesChange: (vals: [number, number]) => void\n  onTimeSeriesChange: (val: number) => void\n  onTypeChange: (type: string) => void\n}\n\nconst renderChart: RenderChart = ({ municipalities, onClick, rootElId }) => {\n  const chartEl = document.getElementById(rootElId) as HTMLElement\n  const { width } = chartEl.getBoundingClientRect()\n\n  const state: State = {\n    lastPosition: { k: 1, x: 0, y: 0 },\n    populationRange: [0, 1],\n    populationType: \"total\",\n    timeRangeIndex: 0,\n  }\n\n  // this zoom function is not working well in all directions\n  const zoomed = function (\n    this: SVGSVGElement,\n    zoomEvent: D3ZoomEvent<SVGSVGElement, unknown>\n  ) {\n    const transition = select(this).transition().duration(150)\n    const { lastPosition } = state\n    let {\n      transform: { x, y },\n    } = zoomEvent\n    const {\n      transform: { k },\n    } = zoomEvent\n\n    if (k !== state.lastPosition.k) {\n      x = lastPosition.x\n      y = lastPosition.y\n    }\n\n    transition.attr(\"transform\", `translate(${x}, ${y}) scale(${k})`)\n\n    lastPosition.k = k\n    lastPosition.x = x\n    lastPosition.y = y\n  }\n\n  const color = scaleOrdinal<string, string>()\n    .domain(municipalities.map((municipality) => municipality.name))\n    .range(schemeSet3)\n\n  const zoomBehavior = zoom<SVGSVGElement, unknown>()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height + margin.top].join(\", \"))\n    .attr(\"font-size\", 10)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"text-anchor\", \"middle\")\n    .call(zoomBehavior)\n\n  addDropShadow(svg, dropShadowBaseId, 0.5, 2)\n\n  const header = svg\n    .append(\"text\")\n    .attr(\"class\", styles.header)\n    .text(\"\")\n    .attr(\"transform\", `translate(${width / 2}, 50)`)\n\n  const svgContent = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const transitionChart = () => {\n    const itemsWithCount = municipalities.filter((municipality) => {\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return !!(dataItem as unknown)\n    })\n    const dataValues = itemsWithCount.map((municipality) => {\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return dataItem.count\n    })\n    const valueToIdx = dataValues.reduce((acc, val, idx) => {\n      acc[val] = acc[val] ?? []\n      acc[val]!.push(idx)\n\n      return acc\n    }, {} as { [k: string]: number[] | undefined })\n    const sortedDataValues = dataValues.sort((a, b) => a - b)\n\n    const percentiles = sortedDataValues.reduce((acc, val, idx) => {\n      const percentile = idx / sortedDataValues.length\n      const { [val]: unsortedIndexes } = valueToIdx\n\n      unsortedIndexes!.forEach((idx2) => {\n        acc[idx2] = percentile\n      })\n\n      return acc\n    }, [] as number[])\n\n    const filteredData = itemsWithCount.filter((_municipality, idx) => {\n      const { [idx]: percentile } = percentiles\n\n      return (\n        typeof percentile === \"number\" &&\n        percentile >= state.populationRange[0] &&\n        percentile <= state.populationRange[1]\n      )\n    })\n\n    const structure = hierarchy({\n      children: filteredData,\n      name: \"\",\n      values: {\n        females: [],\n        males: [],\n        total: [],\n      } as Municipality[\"values\"],\n    }).sum((municipality) => {\n      if (!(municipality.values as unknown)) {\n        return 1\n      }\n\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return !(dataItem as unknown) ? 0 : dataItem.count\n    })\n    const root = pack<MunicipalityWithAnimation>()\n      .size(\n        state.populationType === \"total\"\n          ? [width, height]\n          : [width / 2, height / 2]\n      )\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    const {\n      data: {\n        values: {\n          [state.populationType]: {\n            [state.timeRangeIndex]: { date },\n          },\n        },\n      },\n    } = leaves[0]\n\n    const year = getYearStr(date)\n    const populationTotal = filteredData.reduce(\n      (acc, item) =>\n        acc +\n        item.values[state.populationType as PopulationType][\n          state.timeRangeIndex\n        ].count,\n      0\n    )\n    const populationText = `${formatPopulation(populationTotal)} ${\n      typeNouns[state.populationType]\n    }`\n\n    const { length: totalNum } = leaves.filter(\n      (leafItem) =>\n        leafItem.data.values[state.populationType].length >=\n        state.timeRangeIndex + 1\n    )\n\n    header.text(\n      `Population in Malaga: ${year} - ${populationText}${\n        state.populationRange[0] === 0 && state.populationRange[1] === 1\n          ? \"\"\n          : ` - From ${(state.populationRange[0] * 100).toFixed(\n              0\n            )} percentile to ${(state.populationRange[1] * 100).toFixed(\n              0\n            )} percentile`\n      } - ${totalNum} municipalities`\n    )\n\n    const getDataKey = (municipalityNode: unknown) =>\n      (municipalityNode as MunicipalityNode).data.name!\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves, getDataKey)\n\n    leaf.exit().remove()\n\n    const getTitle = (municipalityNode: MunicipalityNode) => {\n      const {\n        data: {\n          values: {\n            [state.populationType]: { [state.timeRangeIndex]: dataItem },\n          },\n        },\n      } = municipalityNode\n\n      if (!dataItem as unknown) {\n        return \"\"\n      }\n\n      const { [state.populationType]: itemsName } = typeNouns\n\n      return `${municipalityNode.data.name} - ${formatPopulation(\n        dataItem.count\n      )} ${itemsName} - ${getYearStr(dataItem.date)}`\n    }\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (municipalityNode) => {\n        if (state.populationType !== \"total\") {\n          return `translate(${municipalityNode.x + width / 4},${\n            municipalityNode.y + height / 4\n          })`\n        }\n\n        return `translate(${municipalityNode.x + 1},${municipalityNode.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\n        \"transform\",\n        (municipalityNode) =>\n          `translate(${municipalityNode.x + 1},${municipalityNode.y + 1})`\n      )\n      .on(\"mouseenter\", function (_event, municipalityNode) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this)\n          .select(\".letter\")\n          .attr(\"filter\", `url(#${dropShadowBaseId})`)\n\n        const hoverAnimation = anime({\n          complete: () => {\n            municipalityNode.data.hoverAnimation = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        municipalityNode.data = {\n          ...municipalityNode.data,\n          hoverAnimation,\n        }\n      })\n      .on(\"mouseleave\", function (_event, municipalityNode) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this).select(\".letter\").attr(\"filter\", null)\n\n        const {\n          data: { hoverAnimation },\n        } = municipalityNode\n\n        if (hoverAnimation) {\n          hoverAnimation.seek(0)\n          anime.remove(selection.node())\n          municipalityNode.data = {\n            ...municipalityNode.data,\n            hoverAnimation: null,\n          }\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (_event, municipalityNode) => {\n        onClick(municipalityNode.data)\n      })\n\n    const generateColor = (municipalityNode: MunicipalityNode) =>\n      color(municipalityNode.data.name)\n\n    const generateDarkerColor = (municipalityNode: MunicipalityNode) => {\n      const baseColor = generateColor(municipalityNode)\n\n      return chroma(baseColor).darken(1.5).hex()\n    }\n\n    const setupLetter = (\n      letter:\n        | MunicipalityTransition\n        | Selection<SVGTextElement, MunicipalityNode, SVGGElement, unknown>\n    ) => {\n      const el = letter.text(\n        (municipalityNode) => municipalityNode.data.name[0]!\n      ) as MunicipalityTransition\n\n      el.style(\n        \"font-size\",\n        (municipalityNode) => `${municipalityNode.r.toFixed(0)}px`\n      )\n        .attr(\"dy\", (municipalityNode) => municipalityNode.r / 3)\n        .attr(\"fill\", generateDarkerColor)\n    }\n\n    const setupCircle = (\n      circle:\n        | MunicipalityTransition\n        | Selection<SVGCircleElement, MunicipalityNode, SVGGElement, unknown>\n    ) => {\n      const elem = circle.attr(\n        \"r\",\n        (municipalityNode) => municipalityNode.r!\n      ) as MunicipalityTransition\n\n      elem.attr(\"fill\", generateColor).attr(\"stroke\", generateDarkerColor)\n    }\n\n    setupCircle(enter.append(\"circle\").attr(\"class\", styles.circle))\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const forwardData = (municipalityNode: MunicipalityNode) => municipalityNode\n\n    const circles = leaf\n      .selectAll(`.${styles.circle}`)\n      .data(forwardData, getDataKey)\n    const texts = leaf.selectAll(\".letter\").data(forwardData, getDataKey)\n\n    setupCircle(circles.transition().duration(1000).ease(easeSinInOut))\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  transitionChart()\n\n  return {\n    onPopulationPercentilesChange: (newValues: [number, number]) => {\n      state.populationRange = newValues\n      transitionChart()\n    },\n    onTimeSeriesChange: (newIndex: number) => {\n      state.timeRangeIndex = newIndex\n      transitionChart()\n    },\n    onTypeChange: (newType: string) => {\n      state.populationType = newType as PopulationType\n      transitionChart()\n    },\n  }\n}\n\nconst addDropShadow = (\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>,\n  name: string,\n  slope: number,\n  deviation: number\n) => {\n  svg.append(\"filter\").html(`\n<filter id=\"${name}\" height=\"130%\">\n  <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${deviation}\"/>\n  <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n  <feComponentTransfer>\n    <feFuncA type=\"linear\" slope=\"${slope}\"/>\n  </feComponentTransfer>\n  <feMerge>\n    <feMergeNode/>\n    <feMergeNode in=\"SourceGraphic\"/>\n  </feMerge>\n</filter>\n`)\n}\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const {\n    onPopulationPercentilesChange,\n    onTimeSeriesChange,\n    onTypeChange,\n  } = renderChart({\n    municipalities,\n    onClick: (municipality) => {\n      if (!hotkeys.isPressed(\"control\")) {\n        return\n      }\n\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          q: `Malaga ${municipality.name}`,\n        })}`\n      )\n    },\n    rootElId: \"chart\",\n  })\n\n  select(\"form\").on(\"change\", (e) => {\n    onTypeChange(e.target.value)\n  })\n\n  $(\".population-slider\").slider({\n    change: (_event, { values }) => {\n      const newValues = (values as [number, number]).map((v) => v / 100) as [\n        number,\n        number\n      ]\n\n      onPopulationPercentilesChange(newValues)\n    },\n    range: true,\n    values: [0, 100],\n  })\n\n  const max = municipalities[0].values.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (_event, { value }) => {\n      onTimeSeriesChange(value as number)\n    },\n    max,\n    min: 0,\n    value: 0,\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map(({ id, label }, radioIndex) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default PopulationCircles\n","type":"tsx"}},"key":"population-circles"},"meta":{"description":""}}},"staticQueryHashes":[]}