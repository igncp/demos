{"componentChunkName":"component---src-pages-d-3-js-population-circles-tsx","path":"/d3js/population-circles/","result":{"pageContext":{"demoInfo":{"data":[],"docs":[],"isCompleted":false,"name":"Population Circles","notes":["It has transitions for nested elements: by using enter/exist/transition approach plus (new) `.data(d => d)`","Click a circle while pressing the Control key to open a search window for a municipality","The population JSON data has been parsed and saved in the file to rename properties and remove unused","TODO: Finish porting and cleaning chart","TODO: Review checklist"],"sources":["https://observablehq.com/@d3/bubble-chart?collection=@d3/d3-hierarchy","https://datos.gob.es/en/catalogo/ea0010587-malaga-poblacion-por-municipios-y-sexo-anual-cifras-oficiales-de-poblacion-de-los-municipios-espanoles-revision-del-padron-municipal-identificador-api-2882"],"summary":[],"category":"d3js","files":{"cssModule":".radio {\n  display: inline-block;\n\n  input {\n    margin-right: 5px;\n  }\n}\n\n.slider {\n  margin-bottom: 20px;\n}\n","demo":{"content":"import {\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  json,\n  pack,\n  scaleOrdinal,\n  schemeCategory10,\n  select,\n} from \"d3\"\nimport anime from \"animejs\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\ntype Municipality = {\n  name: string\n  values: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n}\n\nconst fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown) as Promise<Municipality[]>\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\n\nconst formatPopulation = (val: number) =>\n  Number(val.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\ntype RenderChart = (o: {\n  municipalities: Municipality[]\n  rootElId: string\n}) => {\n  onPopulationPercentilesChange: (vals: [number, number]) => void\n  onTimeSeriesChange: (val: number) => void\n  onTypeChange: (type: string) => void\n}\n\nconst renderChart: RenderChart = ({ municipalities, rootElId }) => {\n  const { width } = (document.getElementById(\n    rootElId\n  ) as any).getBoundingClientRect()\n  const height = 400\n\n  const state = {\n    populationRange: [0, 1],\n    prop: \"total\",\n    valueIdx: 0,\n  }\n\n  const color = scaleOrdinal(\n    municipalities.map((_d: any, idx: any) => idx),\n    schemeCategory10\n  )\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height + margin.top] as any)\n    .attr(\"font-size\", 10)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"text-anchor\", \"middle\")\n\n  const header = svg\n    .append(\"text\")\n    .text(\"\")\n    .attr(\"transform\", `translate(${width / 2}, 50)`)\n    .style(\"font-size\", \"20px\")\n    .style(\"text-anchor\", \"right\")\n\n  const svgContent = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const transitionChart = () => {\n    const itemsWithCount = municipalities.filter((municipality: any) => {\n      const {\n        values: {\n          [state.prop]: { [state.valueIdx]: dataItem },\n        },\n      } = municipality\n\n      return !!dataItem\n    })\n    const dataValues = itemsWithCount.map((municipality: any) => {\n      const {\n        values: {\n          [state.prop]: { [state.valueIdx]: dataItem },\n        },\n      } = municipality\n\n      return dataItem ? dataItem.count : null\n    })\n    const valueToIdx = dataValues.reduce((acc: any, val: any, idx: any) => {\n      if (val === null) {\n        return acc\n      }\n\n      acc[val] = acc[val] || []\n      acc[val].push(idx)\n\n      return acc\n    }, {})\n    const sortedDataValues = dataValues.sort((a: any, b: any) => a - b)\n\n    const percentiles = sortedDataValues.reduce(\n      (acc: any, val: any, idx: any) => {\n        const percentile = idx / sortedDataValues.length\n        const { [val]: unsortedIndexes } = valueToIdx\n\n        unsortedIndexes.forEach((idx2: any) => {\n          acc[idx2] = percentile\n        })\n\n        return acc\n      },\n      []\n    )\n\n    const filteredData = itemsWithCount.filter(\n      (_municipality: any, idx: any) => {\n        const { [idx]: percentile } = percentiles\n\n        return (\n          typeof percentile === \"number\" &&\n          percentile >= state.populationRange[0] &&\n          percentile <= state.populationRange[1]\n        )\n      }\n    )\n\n    const structure = hierarchy({ children: filteredData }).sum((d: any) => {\n      if (!d.values) {\n        return 1\n      }\n\n      const {\n        values: {\n          [state.prop]: { [state.valueIdx]: dataItem },\n        },\n      } = d\n\n      return dataItem ? dataItem.count : 0\n    })\n    const root = pack()\n      .size(state.prop === \"total\" ? [width, height] : [width / 2, height / 2])\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    const getYear = (dateStr: any) => new Date(dateStr).getFullYear()\n\n    const {\n      data: {\n        values: {\n          [state.prop]: {\n            [state.valueIdx]: { date },\n          },\n        },\n      },\n    } = leaves[0] as any\n\n    const year = getYear(date)\n\n    const { length: totalNum } = leaves.filter(\n      (l: any) => l.data.values[state.prop].length >= state.valueIdx + 1\n    )\n\n    header.text(\n      `Population in Malaga: ${year}${\n        state.populationRange[0] === 0 && state.populationRange[1] === 1\n          ? \"\"\n          : ` - From ${(state.populationRange[0] * 100).toFixed(\n              0\n            )} percentile to ${(state.populationRange[1] * 100).toFixed(\n              0\n            )} percentile`\n      } - ${totalNum} municipalities`\n    )\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves)\n\n    leaf.exit().remove()\n\n    const getTitle = (d: any) => {\n      const {\n        data: {\n          values: {\n            [state.prop]: { [state.valueIdx]: dataItem },\n          },\n        },\n      } = d\n\n      if (!dataItem) {\n        return \"\"\n      }\n\n      const { [state.prop]: itemsName } = {\n        females: \"females\",\n        males: \"males\",\n        total: \"people\",\n      } as Record<string, string>\n\n      return `${d.data.name} - ${formatPopulation(\n        dataItem.count\n      )} ${itemsName} - ${getYear(dataItem.date)}`\n    }\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (d) => {\n        if (state.prop !== \"total\") {\n          return `translate(${d.x + width / 4},${d.y + height / 4})`\n        }\n\n        return `translate(${d.x + 1},${d.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\"transform\", (d) => `translate(${d.x + 1},${d.y + 1})`)\n      .on(\"mouseenter\", function (_e, d: any) {\n        const selection = select(this).select(\".circle\")\n\n        const anim = anime({\n          complete: () => {\n            d.anim = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        d.anim = anim\n      })\n      .on(\"mouseleave\", function (_e, d: any) {\n        const selection = select(this).select(\".circle\")\n\n        if (d.anim) {\n          d.anim.seek(0)\n          d.anim.remove(selection.node())\n          d.anim = null\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (_e, d: any) => {\n        if (!hotkeys.isPressed(\"control\")) {\n          return\n        }\n\n        window.open(\n          `https://www.google.com/search?${qs.stringify({\n            q: `Malaga ${d.data.name}`,\n          })}`\n        )\n      })\n\n    enter\n      .append(\"circle\")\n      .attr(\"r\", (d) => d.r)\n      .attr(\"class\", \"circle\")\n      .attr(\"fill-opacity\", 0.7)\n      .attr(\"fill\", (_d, idx) => color(idx))\n      .attr(\"stroke-width\", \"0px\")\n      .attr(\"stroke\", \"green\")\n\n    const setupLetter = (l: any) => {\n      l.text((d: any) => d.data.name[0])\n        .style(\"font-size\", (d: any) => `${d.r.toFixed(0)}px`)\n        .attr(\"dy\", (d: any) => d.r / 3)\n    }\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const circles = leaf.selectAll(\".circle\").data((d) => d)\n    const texts = leaf.selectAll(\".letter\").data((d) => d)\n\n    circles\n      .transition()\n      .duration(1000)\n      .ease(easeSinInOut)\n      .attr(\"r\", (d) => d.r)\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  transitionChart()\n\n  return {\n    onPopulationPercentilesChange: (newValues: [number, number]) => {\n      state.populationRange = newValues\n      transitionChart()\n    },\n    onTimeSeriesChange: (newIndex: number) => {\n      state.valueIdx = newIndex\n      transitionChart()\n    },\n    onTypeChange: (newType: string) => {\n      state.prop = newType\n      transitionChart()\n    },\n  }\n}\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const {\n    onPopulationPercentilesChange,\n    onTimeSeriesChange,\n    onTypeChange,\n  } = renderChart({\n    municipalities,\n    rootElId: \"chart\",\n  })\n\n  select(\"form\").on(\"change\", (e) => {\n    onTypeChange(e.target.value)\n  })\n\n  $(\".population-slider\").slider({\n    change: (_a, b: any) => {\n      const newValues = b.values.map((v: any) => v / 100)\n\n      onPopulationPercentilesChange(newValues)\n    },\n    range: true,\n    values: [0, 100],\n  })\n\n  const max = municipalities[0].values.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (_a, b) => {\n      onTimeSeriesChange(b.value as number)\n    },\n    max,\n    min: 0,\n    value: 0,\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map(({ id, label }, radioIndex) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default PopulationCircles\n","type":"tsx"}},"key":"population-circles"},"meta":{"description":""}}},"staticQueryHashes":[]}