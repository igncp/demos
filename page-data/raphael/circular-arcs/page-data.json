{"componentChunkName":"component---src-pages-raphael-circular-arcs-tsx","path":"/raphael/circular-arcs/","result":{"pageContext":{"demoInfo":{"dataFiles":[],"docs":[],"isCompleted":true,"name":"Circular Arcs","notes":["This demo doesn't have data, but it wouldn't be hard (e.g. bound to the radius if all are different)"],"sources":["http://codepen.io/dshapira/pen/ltrqc"],"summary":[],"category":"raphael","files":{"demoCSS":[{"content":".circularArcsChart {\n  color: #fff;\n\n  svg {\n    margin-left: 30px;\n  }\n}\n","fileName":"circular-arcs.module.css"}],"demoTS":[{"content":"import { RaphaelPaper, RaphaelPath } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./circular-arcs.module.css\"\n\nconst strokeWidth = 3\n\ntype ArcFnOpts = {\n  angle: number\n  endX: number\n  endY: number\n  radius1: number\n  radius2: number\n  startX: number\n  startY: number\n}\n\n// eslint-disable-next-line max-params\nfunction arcFn(\n  this: RaphaelPaper,\n  { angle, endX, endY, radius1, radius2, startX, startY }: ArcFnOpts\n) {\n  const arcSVG = [radius1, radius2, angle, 0, 1, endX, endY].join(\" \")\n\n  return this.path(`M${startX} ${startY} a ${arcSVG}`)\n}\n\ntype CircularArcOpts = {\n  centerX: number\n  centerY: number\n  endAngle: number\n  radius: number\n  startAngle: number\n}\n\ntype ExtendedRaphael<CircularArc> = RaphaelPaper & {\n  arc: typeof arcFn\n  circularArc: CircularArc\n}\n\n// eslint-disable-next-line max-params\nfunction circularArc(\n  this: ExtendedRaphael<typeof circularArc>,\n  { centerX, centerY, endAngle, radius, startAngle }: CircularArcOpts\n) {\n  const startX = centerX + radius * Math.cos((startAngle * Math.PI) / 180)\n  const startY = centerY + radius * Math.sin((startAngle * Math.PI) / 180)\n\n  const endX = centerX + radius * Math.cos((endAngle * Math.PI) / 180)\n  const endY = centerY + radius * Math.sin((endAngle * Math.PI) / 180)\n\n  return this.arc({\n    angle: 0,\n    endX: endX - startX,\n    endY: endY - startY,\n    radius1: radius,\n    radius2: radius,\n    startX,\n    startY,\n  })\n}\n\nconst addHoverHandlers = function (arcSelection: RaphaelPath) {\n  const widthMultiplier = 2.5\n\n  arcSelection.hover(\n    function () {\n      this.attr(\"fill-opacity\", 0.3)\n\n      this.animate(\n        {\n          \"stroke-width\": strokeWidth * widthMultiplier,\n        },\n        500,\n        \"bounce\"\n      )\n    },\n    function () {\n      this.attr(\"fill-opacity\", 0.2)\n\n      this.animate(\n        {\n          \"stroke-width\": strokeWidth,\n        },\n        500,\n        \"bounce\"\n      )\n    }\n  )\n}\n\ntype CreateArcOpts = {\n  arcI: number\n  fill: string\n  paper: ExtendedRaphael<typeof circularArc>\n  stroke: string\n}\n\nconst createArc = ({ arcI, fill, paper, stroke }: CreateArcOpts) => {\n  const center = paper.width / (4 + arcI) + (strokeWidth - 1)\n\n  const arc = paper.circularArc({\n    centerX: center + 30 + Math.pow(arcI, 1.5),\n    centerY: paper.height - (100 - arcI * 2),\n    endAngle: 0,\n    radius: paper.width / (4 + arcI),\n    startAngle: 180,\n  })\n\n  arc\n    .attr(\"fill\", fill)\n    .attr(\"fill-opacity\", 0.2)\n    .attr(\"stroke\", stroke)\n    .attr(\"stroke-width\", strokeWidth)\n\n  addHoverHandlers(arc)\n}\n\nconst main = () => {\n  const rootElId = \"chart\"\n  const chartWrapper = document.getElementById(rootElId) as HTMLElement\n\n  chartWrapper.classList.add(styles.circularArcsChart)\n\n  const { width } = chartWrapper.getBoundingClientRect()\n  const height = 500\n\n  Raphael.fn.circularArc = circularArc\n  Raphael.fn.arc = arcFn\n\n  const paper = Raphael(rootElId, width, height)\n\n  for (let arcI = 0; arcI <= 50; arcI += 1) {\n    createArc({\n      arcI,\n      fill: \"#85D588\",\n      paper,\n      stroke: \"#558857\",\n    })\n  }\n\n  return Promise.resolve()\n}\n\nexport default main\n","fileName":"circular-arcs.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/circular-arcs/circular-arcs\"\n\nconst CircularArcs = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n","type":"tsx"}},"key":"circular-arcs"},"meta":{"description":"Circular Arcs example, using RaphaÃ«l, which is not bound to any data but it would be easy to. It shows how to create a semicircle and the hover functionality."}}},"staticQueryHashes":[]}