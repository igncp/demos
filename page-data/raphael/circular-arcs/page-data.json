{"componentChunkName":"component---src-pages-raphael-circular-arcs-js","path":"/raphael/circular-arcs/","result":{"pageContext":{"demoInfo":{"data":[],"name":"Circular Arcs","notes":["This demo doesn't have data, but it wouldn't be hard (e.g. bound to the radius if all are different)"],"sources":["http://codepen.io/dshapira/pen/ltrqc"],"category":"raphael","files":{"d3utils":null,"demo":{"content":"const Raphael = typeof window === \"undefined\" ? null : require(\"raphael\")\n\nconst strokeWidth = 3\n\nconst addHoverHandlers = function (el) {\n  const widthMultiplier = 2.5\n\n  el.hover(\n    function () {\n      this.attr({\n        \"fill-opacity\": \".3\",\n      })\n\n      return this.animate(\n        {\n          \"stroke-width\": strokeWidth * widthMultiplier,\n        },\n        500,\n        \"bounce\"\n      )\n    },\n    function () {\n      this.attr({\n        \"fill-opacity\": \".2\",\n      })\n\n      return this.animate(\n        {\n          \"stroke-width\": strokeWidth,\n        },\n        500,\n        \"bounce\"\n      )\n    }\n  )\n}\n\nconst createArc = ({ stroke, fill, arcI, paper }) => {\n  const center = paper.width / (4 + arcI) + (strokeWidth - 1)\n\n  const arc = paper.circularArc({\n    centerX: center + 30 + Math.pow(arcI, 1.5),\n    centerY: paper.height - (100 - arcI * 2),\n    endAngle: 0,\n    radius: paper.width / (4 + arcI),\n    startAngle: 180,\n  })\n\n  arc.attr({\n    fill,\n    \"fill-opacity\": \".2\",\n    stroke,\n    \"stroke-width\": strokeWidth,\n  })\n\n  addHoverHandlers(arc)\n}\n\nconst setupNewRaphaelFns = () => {\n  Raphael.fn.arc = function ({\n    angle,\n    endX,\n    endY,\n    radius1,\n    radius2,\n    startX,\n    startY,\n  }) {\n    const arcSVG = [radius1, radius2, angle, 0, 1, endX, endY].join(\" \")\n\n    return this.path(`M${startX} ${startY} a ${arcSVG}`)\n  }\n\n  Raphael.fn.circularArc = function ({\n    centerX,\n    centerY,\n    radius,\n    startAngle,\n    endAngle,\n  }) {\n    const startX = centerX + radius * Math.cos((startAngle * Math.PI) / 180)\n    const startY = centerY + radius * Math.sin((startAngle * Math.PI) / 180)\n\n    const endX = centerX + radius * Math.cos((endAngle * Math.PI) / 180)\n    const endY = centerY + radius * Math.sin((endAngle * Math.PI) / 180)\n\n    return this.arc({\n      angle: 0,\n      endX: endX - startX,\n      endY: endY - startY,\n      radius1: radius,\n      radius2: radius,\n      startX,\n      startY,\n    })\n  }\n}\n\nconst main = function () {\n  const rootElId = \"chart\"\n  const chartWrapper = document.getElementById(rootElId)\n\n  const { width } = chartWrapper.getBoundingClientRect()\n  const height = 500\n\n  const paper = Raphael(rootElId, width, height)\n\n  setupNewRaphaelFns()\n\n  for (let arcI = 0; arcI <= 50; ++arcI) {\n    createArc({\n      arcI,\n      fill: \"#85D588\",\n      paper,\n      stroke: \"#558857\",\n    })\n  }\n}\n\nexport default main\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/circular-arcs/circular-arcs\"\nimport \"@/demos/circular-arcs/circular-arcs.styl\"\n\nconst CircularArcs = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div className=\"circular-arcs-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n","styl":".circular-arcs-chart\n  color: #fff\n\n  svg\n    margin-left: 30px\n"},"key":"circular-arcs"}}},"staticQueryHashes":[]}