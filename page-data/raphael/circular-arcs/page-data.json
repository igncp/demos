{"componentChunkName":"component---src-pages-raphael-circular-arcs-js","path":"/raphael/circular-arcs/","result":{"pageContext":{"demoInfo":{"data":[],"name":"Circular Arcs","notes":["This demo doesn't have data, but it wouldn't be hard (e.g. bound to the radius if all are different)"],"sources":["http://codepen.io/dshapira/pen/ltrqc"],"category":"raphael","files":{"js":"const main = function () {\n  const width = 700\n  const height = 300\n  const strokeWidth = 3\n  const paper = Raphael(\"chart\", width, height)\n\n  Raphael.fn.arc = function (\n    startX,\n    startY,\n    endX,\n    endY,\n    radius1,\n    radius2,\n    angle\n  ) {\n    const arcSVG = [radius1, radius2, angle, 0, 1, endX, endY].join(\" \")\n\n    return this.path(`M${startX} ${startY} a ${arcSVG}`)\n  }\n\n  Raphael.fn.circularArc = function (\n    centerX,\n    centerY,\n    radius,\n    startAngle,\n    endAngle\n  ) {\n    const startX = centerX + radius * Math.cos((startAngle * Math.PI) / 180)\n    const startY = centerY + radius * Math.sin((startAngle * Math.PI) / 180)\n    const endX = centerX + radius * Math.cos((endAngle * Math.PI) / 180)\n    const endY = centerY + radius * Math.sin((endAngle * Math.PI) / 180)\n\n    return this.arc(\n      startX,\n      startY,\n      endX - startX,\n      endY - startY,\n      radius,\n      radius,\n      0\n    )\n  }\n\n  const hoverFn = function (el) {\n    const widthMultiplier = 2.5\n\n    return el.hover(\n      function () {\n        this.attr({\n          \"fill-opacity\": \".3\",\n        })\n\n        return this.animate(\n          {\n            \"stroke-width\": strokeWidth * widthMultiplier,\n          },\n          500,\n          \"bounce\"\n        )\n      },\n      function () {\n        this.attr({\n          \"fill-opacity\": \".2\",\n        })\n\n        return this.animate(\n          {\n            \"stroke-width\": strokeWidth,\n          },\n          500,\n          \"bounce\"\n        )\n      }\n    )\n  }\n\n  let arcI = -1\n\n  const createArc = function (stroke, fill) {\n    arcI++\n\n    const center = width / (4 + arcI) + (strokeWidth - 1)\n\n    const arc = paper.circularArc(\n      center + 30 + Math.pow(arcI, 1.5),\n      height - (100 - arcI * 2),\n      width / (4 + arcI),\n      180,\n      0\n    )\n\n    arc.attr({\n      fill,\n      \"fill-opacity\": \".2\",\n      stroke,\n      \"stroke-width\": strokeWidth,\n    })\n    hoverFn(arc)\n\n    return arc\n  }\n\n  for (let _i = 0; _i <= 30; ++_i) {\n    createArc(\"#558857\", \"#85D588\")\n  }\n}\n\nexport default main\n","page":"import React from \"react\"\n\nimport Demo from \"../../components/demo\"\n\nimport main from \"../../demos/circular-arcs/circular-arcs\"\n\nimport \"../../demos/circular-arcs/circular-arcs.styl\"\n\nconst CircularArcs = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\"/vendors/raphael/raphael-min.js\"]}\n  >\n    <div className=\"circular-arcs-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n","styl":".circular-arcs-chart\n  color: #fff\n  \n  svg\n    margin-left: 30px","ts":null},"key":"circular-arcs"}}},"staticQueryHashes":[]}