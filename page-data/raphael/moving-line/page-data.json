{"componentChunkName":"component---src-pages-raphael-moving-line-tsx","path":"/raphael/moving-line/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[],"isCompleted":true,"name":"Moving Line","notes":["The axis is not included as it is part of the background image","Add titles"],"sources":["http://codepen.io/johnegraham2/pen/ExfBI"],"summary":[],"category":"raphael","files":{"cssModule":".movingLineChart {\n  path {\n    fill: none;\n    stroke: black;\n  }\n\n  .point {\n    fill: #87b189;\n  }\n}\n","demo":{"content":"import { RaphaelElement, RaphaelPaper, RaphaelPath } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./moving-line.module.css\"\n\ntype Data = {\n  charts: Array<{\n    lower: string\n    points: Array<{\n      point: RaphaelElement\n      value: number\n    }>\n    upper: string\n  }>\n  current: number\n  line: RaphaelPath\n  paper: RaphaelPaper\n  xDelta: number\n  xOffset: number\n  yOffset: number\n}\n\nconst fetchData = async (): Promise<Data> => {\n  const response = await fetch(`${ROOT_PATH}data/raphael/moving-line/data.json`)\n  const data = await response.json()\n\n  return data\n}\n\nconst height = 300\n\ntype RenderChartOpts = { graphData: Data; rootElId: string }\n\nconst renderChart = ({ graphData, rootElId }: RenderChartOpts) => {\n  const initLineGraph = function () {\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.movingLineChart)\n\n    const { width } = rootEl.getBoundingClientRect()\n    const paper = Raphael(rootElId, width, height)\n\n    graphData.paper = paper\n\n    const path = createPathString()\n\n    const line = paper.path(path)\n\n    graphData.line = line\n    drawPoints()\n\n    setInterval(advanceGraph, 3000)\n  }\n\n  const advanceGraph = function () {\n    if (graphData.current < graphData.charts.length - 1) {\n      graphData.current++\n    } else {\n      graphData.current = 1\n    }\n\n    animateChart()\n  }\n\n  const drawPoints = function () {\n    const radius = 6\n    const { points } = graphData.charts[0]\n\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      const xPos = graphData.xOffset + i * graphData.xDelta\n      const { yOffset: yPos } = graphData\n\n      const circle = graphData.paper.circle(xPos, yPos, radius)\n\n      circle.node.className.baseVal = styles.point\n      circle.attr(\"title\", `Value: ${0}`)\n      points[i].point = circle\n      i++\n    }\n  }\n\n  const animateChart = function () {\n    const {\n      charts: { [graphData.current]: newData },\n    } = graphData\n    let newPath = \"\"\n\n    const upperLimit = parseInt(newData.upper) || 1\n    const lowerLimit = parseInt(newData.lower) || 0\n    const scaleFactor = graphData.yOffset / (upperLimit - lowerLimit)\n\n    const { points } = graphData.charts[0]\n\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      if (i === 0) {\n        newPath += \"M \"\n        newPath += `${graphData.xOffset} `\n        newPath += `${\n          graphData.yOffset -\n          (newData.points[i].value - lowerLimit) * scaleFactor\n        } `\n      } else {\n        newPath += \"L \"\n        newPath += `${graphData.xOffset + i * graphData.xDelta} `\n        newPath +=\n          graphData.yOffset -\n          (newData.points[i].value - lowerLimit) * scaleFactor\n      }\n\n      points[i].point.animate(\n        {\n          cy:\n            graphData.yOffset -\n            (newData.points[i].value - lowerLimit) * scaleFactor,\n        },\n        800,\n        \"ease-in-out\"\n      )\n      points[i].point.node.childNodes[0].remove()\n      points[i].point.attr(\"title\", `Value: ${newData.points[i].value}`)\n      i++\n    }\n\n    graphData.line.animate(\n      {\n        path: newPath,\n      },\n      800,\n      \"ease-in-out\"\n    )\n  }\n\n  const createPathString = function () {\n    const {\n      charts: {\n        [graphData.current]: { points },\n      },\n    } = graphData\n\n    let path = `M ${graphData.xOffset} ${graphData.yOffset - points[0].value}`\n    let i = 0\n\n    const { length } = points\n\n    while (i < length) {\n      path += \" L \"\n      path += `${graphData.xOffset + i * graphData.xDelta} `\n      path += graphData.yOffset - points[i].value\n      i++\n    }\n\n    return path\n  }\n\n  initLineGraph()\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({\n    graphData: data,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/moving-line/moving-line\"\n\nconst CircularArcs = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n","type":"tsx"}},"key":"moving-line"},"meta":{"description":"Moving Line example, using RaphaÃ«l, with some important modifications like the path line, the exclusion of the axis (is an image), or the addition of tites."}}},"staticQueryHashes":[]}