{"componentChunkName":"component---src-pages-raphael-moving-line-js","path":"/raphael/moving-line/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Moving Line","notes":["The axis is not included as it is part of the background image","Add titles"],"sources":["http://codepen.io/johnegraham2/pen/ExfBI"],"category":"raphael","files":{"js":"const main = () => {\n  $.ajax(`${ROOT_PATH}data/raphael/moving-line/data.json`).done((graphData) => {\n    const initLineGraph = function () {\n      const width = $(\"#chart\").width()\n      const height = 300\n      const paper = Raphael(\"chart\", width, height)\n\n      graphData.paper = paper\n\n      const path = createPathString(graphData)\n\n      const line = paper.path(path)\n\n      graphData.line = line\n      drawPoints(graphData)\n\n      setInterval(advanceGraph, 3000)\n    }\n\n    const advanceGraph = function () {\n      if (graphData.current < graphData.charts.length - 1) {\n        graphData.current++\n      } else {\n        graphData.current = 1\n      }\n\n      return animateChart(graphData, graphData.charts[graphData.current])\n    }\n\n    const drawPoints = function (data) {\n      const radius = 6\n      const { points } = data.charts[0]\n\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        const xPos = data.xOffset + i * data.xDelta\n        const yPos = data.yOffset\n\n        const circle = data.paper.circle(xPos, yPos, radius)\n\n        circle.node.className.baseVal = \"point\"\n        circle.attr({\n          title: `Value: ${0}`,\n        })\n        points[i].point = circle\n        i++\n      }\n    }\n\n    const animateChart = function (data, newData) {\n      let newPath = \"\"\n\n      const upperLimit = parseInt(newData.upper) || 1\n      const lowerLimit = parseInt(newData.lower) || 0\n      const scaleFactor = data.yOffset / (upperLimit - lowerLimit)\n\n      const { points } = data.charts[0]\n\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        if (i === 0) {\n          newPath += \"M \"\n          newPath += `${data.xOffset} `\n          newPath += `${\n            data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor\n          } `\n        } else {\n          newPath += \"L \"\n          newPath += `${data.xOffset + i * data.xDelta} `\n          newPath +=\n            data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor\n        }\n\n        points[i].point.animate(\n          {\n            cy:\n              data.yOffset -\n              (newData.points[i].value - lowerLimit) * scaleFactor,\n          },\n          800,\n          \"ease-in-out\"\n        )\n        points[i].point.node.childNodes[0].remove()\n        points[i].point.attr(\"title\", `Value: ${newData.points[i].value}`)\n        i++\n      }\n\n      return data.line.animate(\n        {\n          path: newPath,\n        },\n        800,\n        \"ease-in-out\"\n      )\n    }\n\n    const createPathString = function (data) {\n      const { points } = data.charts[data.current]\n\n      let path = `M ${data.xOffset} ${data.yOffset - points[0].value}`\n      let i = 0\n\n      const { length } = points\n\n      while (i < length) {\n        path += \" L \"\n        path += `${data.xOffset + i * data.xDelta} `\n        path += data.yOffset - points[i].value\n        i++\n      }\n\n      return path\n    }\n\n    initLineGraph()\n  })\n}\n\nexport default main\n","page":"import React from \"react\"\n\nimport Demo from \"../../components/demo\"\n\nimport main from \"../../demos/moving-line/moving-line\"\n\nimport \"../../demos/moving-line/moving-line.styl\"\n\nconst CircularArcs = ({ pageContext: { demoInfo } }) => (\n  <Demo\n    demoInfo={demoInfo}\n    main={main}\n    scripts={[\"/vendors/raphael/raphael-min.js\"]}\n  >\n    <div className=\"moving-line-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n","styl":".moving-line-chart\n    path\n        stroke black\n        fill none\n    .point\n        fill #87B189","ts":null},"key":"moving-line"}}},"staticQueryHashes":[]}