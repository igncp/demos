{
    "componentChunkName": "component---src-pages-raphael-bars-3-dimensional-tsx",
    "path": "/raphael/bars-3dimensional/",
    "result": {"pageContext":{"demoInfo":{"dataFiles":["data.json"],"docs":[],"isCompleted":true,"name":"Bars 3D","notes":["Added titles on hover","Dynamic dimensions"],"sources":["http://codepen.io/djam/pen/edjCz"],"summary":[],"category":"raphael","files":{"demoCSS":[{"content":".bars3DimensionalChart {\n  padding: 50px;\n}\n","filePath":"src/demos/bars-3dimensional/bars-3dimensional.module.css"}],"demoTS":[{"content":"import { RaphaelPaper, RaphaelPath, RaphaelSet } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./bars-3dimensional.module.css\"\n\nconst CONTAINER_ID = \"chart\"\n\nconst fetchData = async () => {\n  const response = await fetch(\n    `${ROOT_PATH}data/raphael/bars-3dimensional/data.json`\n  )\n  const jsonResponse = await response.json()\n\n  return jsonResponse.results\n}\n\ntype CountriesMetrics = {\n  [countryName: string]: number[]\n} & {\n  keys: string[]\n  keysLength: number\n  seriesDisplayed: number\n  seriesLength: number\n}\n\ntype Config = {\n  colorScheme: string[]\n  deep: number\n  easing: string\n  heightOffset: number\n  ratio: number\n  speed: number\n  width: number\n}\n\ntype Dom = {\n  elements: {\n    [k: string]: {\n      inner?: RaphaelPath\n      outer?: RaphaelPath\n      paperSet?: RaphaelSet\n    }\n  }\n  paper: RaphaelPaper\n}\n\ntype CalcArgs = {\n  countryName: string\n  serieIndex: number\n}\n\ntype ChartOpts = {\n  countriesMetrics: CountriesMetrics\n  rootElId: string\n}\n\nclass Chart {\n  private readonly rootElId: string\n  private cg!: Config\n  private dom!: Dom\n  private countriesMetrics!: CountriesMetrics\n\n  public constructor({ countriesMetrics, rootElId }: ChartOpts) {\n    this.rootElId = rootElId\n\n    this.setCg()\n    this.setDom()\n    this.setData(countriesMetrics)\n  }\n\n  public render() {\n    this.drawAxis()\n    this.countriesMetrics.keys.forEach((countryName) => {\n      this.dom.elements[countryName].paperSet = this.dom.paper.set()\n    })\n\n    this.createCountries(this.countriesMetrics.seriesDisplayed)\n  }\n\n  public displayNextSeries() {\n    const { countriesMetrics } = this\n\n    countriesMetrics.seriesDisplayed =\n      countriesMetrics.seriesDisplayed + 1 === countriesMetrics.seriesLength\n        ? 0\n        : countriesMetrics.seriesDisplayed + 1\n\n    this.animateCountries(countriesMetrics.seriesDisplayed)\n  }\n\n  private setCg() {\n    const { width } = (\n      document.getElementById(this.rootElId) as HTMLElement\n    ).getBoundingClientRect()\n\n    this.cg = {\n      colorScheme: [\"#c1252d\", \"#5f3a5f\", \"#51a8d0\"],\n      deep: 5,\n      easing: \"bounce\",\n      heightOffset: 100,\n      ratio: 0.6,\n      speed: 800,\n      width,\n    }\n  }\n\n  private setDom() {\n    this.dom = {\n      elements: {},\n      paper: Raphael(this.rootElId, this.cg.width, 245),\n    }\n    ;(document.getElementById(this.rootElId) as HTMLElement).classList.add(\n      styles.bars3DimensionalChart\n    )\n  }\n\n  private setData(countriesMetrics: CountriesMetrics) {\n    countriesMetrics.keys = Object.keys(countriesMetrics)\n    countriesMetrics.seriesDisplayed = 0\n    countriesMetrics.seriesLength =\n      countriesMetrics[countriesMetrics.keys[0]].length\n    countriesMetrics.keysLength = countriesMetrics.keys.length\n\n    this.countriesMetrics = countriesMetrics\n\n    countriesMetrics.keys.forEach((countryName: string) => {\n      this.dom.elements[countryName] = {}\n    })\n  }\n\n  private animateCountries(serieIndex: number) {\n    const { countriesMetrics } = this\n\n    countriesMetrics.keys.forEach((countryName) => {\n      this.dom.elements[countryName].inner!.animate(\n        {\n          path: this.calcInnerPath({ countryName, serieIndex }),\n        },\n        this.cg.speed,\n        this.cg.easing\n      )\n      this.dom.elements[countryName].outer!.animate(\n        {\n          path: this.calcOuterPath({ countryName, serieIndex }),\n        },\n        this.cg.speed,\n        this.cg.easing\n      )\n\n      return this.dom.elements[countryName].paperSet!.animate(\n        {\n          fill: this.cg.colorScheme[serieIndex],\n        },\n        this.cg.speed\n      )\n    })\n  }\n\n  private drawAxis() {\n    const {\n      dom: { paper },\n    } = this\n    const {\n      cg: { deep },\n    } = this\n\n    Array.from({ length: 4 }).forEach((...[, pathIndex]) => {\n      const horizontalLineHeight = 25 * pathIndex\n      const path = `M5,${horizontalLineHeight} ${this.cg.width},${\n        this.cg.heightOffset + horizontalLineHeight\n      }`\n\n      paper.path(path).attr(\"stroke-dasharray\", \". \")\n    })\n\n    return paper\n      .path(\n        `M0,${deep + 100} ${deep},100 ${this.cg.width},${\n          100 + this.cg.heightOffset\n        } ${this.cg.width - deep},${100 + this.cg.heightOffset + deep}Z`\n      )\n      .attr(\"fill\", \"#999\")\n      .attr(\"stroke\", \"none\")\n  }\n\n  private calcH0({ countryName, serieIndex }: CalcArgs): number {\n    return 100 - this.countriesMetrics[countryName]![serieIndex]!\n  }\n\n  private calcH5({ countryName, serieIndex }: CalcArgs) {\n    return (\n      100 - this.countriesMetrics[countryName][serieIndex] + 5 * this.cg.ratio\n    )\n  }\n\n  private calcH10({ countryName, serieIndex }: CalcArgs) {\n    return (\n      100 - this.countriesMetrics[countryName][serieIndex] + 10 * this.cg.ratio\n    )\n  }\n\n  private calcInnerPath({ countryName, serieIndex }: CalcArgs) {\n    return `M0,${this.calcH5({ countryName, serieIndex })} 15,${this.calcH10({\n      countryName,\n      serieIndex,\n    })} 15,${100 + 10 * this.cg.ratio} 0,${100 + 5 * this.cg.ratio}Z`\n  }\n\n  private calcOuterPath({ countryName, serieIndex }: CalcArgs) {\n    return `M0,${this.calcH5({ countryName, serieIndex })} 5,${this.calcH0({\n      countryName,\n      serieIndex,\n    })} 20,${this.calcH5({ countryName, serieIndex })} 20,${\n      100 + 5 * this.cg.ratio\n    } 15,${100 + 10 * this.cg.ratio} 0,${100 + 5 * this.cg.ratio}Z`\n  }\n\n  private createCountries(serieIndex: number) {\n    const { countriesMetrics } = this\n    const {\n      dom: { paper },\n    } = this\n\n    return countriesMetrics.keys.forEach((...[countryName, countryIndex]) => {\n      this.dom.elements[countryName].inner = paper.path(\n        this.calcInnerPath({ countryName, serieIndex })\n      )\n      this.dom.elements[countryName].outer = paper\n        .path(this.calcOuterPath({ countryName, serieIndex }))\n        .attr(\"opacity\", 0.5)\n      this.dom.elements[countryName].paperSet!.push(\n        this.dom.elements[countryName].inner!,\n        this.dom.elements[countryName].outer!\n      )\n      this.dom.elements[countryName].paperSet!.transform(\n        `T ${(this.cg.width / countriesMetrics.keysLength) * countryIndex},` +\n          `${\n            (this.cg.heightOffset / countriesMetrics.keysLength) * countryIndex\n          }`\n      )\n\n      return this.dom.elements[countryName]\n        .paperSet!.attr(\"fill\", \"#c1252d\")\n        .attr(\"stroke\", \"none\")\n        .attr(\n          \"title\",\n          `${countryName}: ${countriesMetrics[countryName][serieIndex]}`\n        )\n    })\n  }\n}\n\nconst main = async () => {\n  const countriesMetrics = await fetchData()\n\n  const chart = new Chart({\n    countriesMetrics,\n    rootElId: CONTAINER_ID,\n  })\n\n  chart.render()\n\n  const animateButton = document.querySelector(\".animate-bars\") as HTMLElement\n\n  animateButton.addEventListener(\"click\", (clickEvent) => {\n    clickEvent.preventDefault()\n\n    chart.displayNextSeries()\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","filePath":"src/demos/bars-3dimensional/bars-3dimensional.ts"}],"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/bars-3dimensional/bars-3dimensional\"\n\nconst Bars3Dimensional = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div\n      style={{\n        marginBottom: 20,\n        textAlign: \"center\",\n      }}\n    >\n      <a className=\"btn btn-info animate-bars\" href=\"\">\n        Change Series\n      </a>\n    </div>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default Bars3Dimensional\n","type":"tsx"}},"key":"bars-3dimensional"},"meta":{"description":""}}},
    "staticQueryHashes": []}