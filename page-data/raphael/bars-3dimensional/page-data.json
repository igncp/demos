{"componentChunkName":"component---src-pages-raphael-bars-3-dimensional-js","path":"/raphael/bars-3dimensional/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"name":"Bars 3D","notes":["Added titles","DRY and OOP (for testing) code","Dynamic dimensions"],"sources":["http://codepen.io/djam/pen/edjCz"],"category":"raphael","files":{"d3utils":null,"demo":{"content":"import extend from \"lodash/extend\"\n\nconst Raphael = typeof window === \"undefined\" ? null : require(\"raphael\")\n\nconst ch = {}\n\nch.getData = function (cb) {\n  return $.ajax(`${ROOT_PATH}data/raphael/bars-3dimensional/data.json`).done(\n    (data) => {\n      ch.data = data.results\n      ch.setData()\n\n      return cb()\n    }\n  )\n}\n\nch.setData = function () {\n  const { data } = ch\n\n  data.keys = Object.keys(data)\n  data.seriesDisplayed = 0\n  data.seriesLength = data[data.keys[0]].length\n  data.keysLength = data.keys.length\n\n  data.keys.forEach((item) => {\n    ch.dom.els[item] = {}\n  })\n}\n\nch.setCg = function (config) {\n  if (config == null) {\n    config = {}\n  }\n\n  ch.cg = extend(\n    {\n      colorScheme: [\"#C1252D\", \"#5F3A5F\", \"#51A8D0\"],\n      deep: 5,\n      easing: \"bounce\",\n      heightOffset: 100,\n      ratio: 0.6,\n      speed: 800,\n      width: $(\"#chart\").width(),\n    },\n    config\n  )\n}\n\nch.setDom = function () {\n  ch.dom = {\n    els: {},\n    paper: Raphael(\"chart\", ch.cg.width, 245),\n  }\n}\n\nch.drawAxis = function () {\n  const { paper } = ch.dom\n  const { deep } = ch.cg\n\n  for (let i = 0, _i = 0; _i <= 3; i = ++_i) {\n    const path = `M5,${String(25 * i)} ${ch.cg.width},${String(\n      ch.cg.heightOffset + i * 25\n    )}`\n\n    paper.path(path).attr(\"stroke-dasharray\", \". \")\n  }\n\n  return paper\n    .path(\n      `M0,${deep + 100} ${deep},100 ${ch.cg.width},${\n        100 + ch.cg.heightOffset\n      } ${ch.cg.width - deep},${100 + ch.cg.heightOffset + deep}Z`\n    )\n    .attr(\"fill\", \"#999\")\n    .attr(\"stroke\", \"none\")\n}\n\nch.calcH0 = function (it, se) {\n  return 100 - ch.data[it][se]\n}\n\nch.calcH5 = function (it, se) {\n  return 100 - ch.data[it][se] + 5 * ch.cg.ratio\n}\n\nch.calcH10 = function (it, se) {\n  return 100 - ch.data[it][se] + 10 * ch.cg.ratio\n}\n\nch.calcInnerPath = function (it, se) {\n  return (\n    `M0,${ch.calcH5(it, se)} 15,${ch.calcH10(it, se)} ` +\n    `15,${100 + 10 * ch.cg.ratio} 0,${100 + 5 * ch.cg.ratio}Z`\n  )\n}\n\nch.calcOuterPath = function (it, se) {\n  return `M0,${ch.calcH5(it, se)} 5,${ch.calcH0(it, se)} 20,${ch.calcH5(\n    it,\n    se\n  )} 20,${100 + 5 * ch.cg.ratio} 15,${100 + 10 * ch.cg.ratio} 0,${\n    100 + 5 * ch.cg.ratio\n  }Z`\n}\n\nch.createCountries = function (i) {\n  const { data } = ch\n  const { paper } = ch.dom\n\n  return data.keys.forEach((item, index) => {\n    ch.dom.els[item].inner = paper.path(ch.calcInnerPath(item, i))\n    ch.dom.els[item].outer = paper\n      .path(ch.calcOuterPath(item, i))\n      .attr(\"opacity\", \".5\")\n    ch.dom.els[item].el.push(ch.dom.els[item].inner, ch.dom.els[item].outer)\n    ch.dom.els[item].el.transform(\n      `T ${String((ch.cg.width / data.keysLength) * index)},` +\n        `${String((ch.cg.heightOffset / data.keysLength) * index)}`\n    )\n\n    return ch.dom.els[item].el\n      .attr(\"fill\", \"#C1252D\")\n      .attr(\"stroke\", \"none\")\n      .attr(\"title\", `${item}: ${data[item][i]}`)\n  })\n}\n\nch.animateCountries = function (i) {\n  const { data } = ch\n\n  data.keys.forEach((item) => {\n    ch.dom.els[item].inner.animate(\n      {\n        path: ch.calcInnerPath(item, i),\n      },\n      ch.cg.speed,\n      ch.cg.easing\n    )\n    ch.dom.els[item].outer.animate(\n      {\n        path: ch.calcOuterPath(item, i),\n      },\n      ch.cg.speed,\n      ch.cg.easing\n    )\n\n    return ch.dom.els[item].el.animate(\n      {\n        fill: ch.cg.colorScheme[i],\n      },\n      ch.cg.speed\n    )\n  })\n}\n\nch.bindClickEvent = function () {\n  const { data } = ch\n\n  return $(\".animate-bars\").bind(\"click\", (e) => {\n    e.preventDefault()\n\n    if (data.seriesDisplayed + 1 === data.seriesLength) {\n      data.seriesDisplayed = 0\n    } else {\n      data.seriesDisplayed = data.seriesDisplayed + 1\n    }\n\n    return ch.animateCountries(data.seriesDisplayed)\n  })\n}\n\nch.render = function () {\n  ch.drawAxis()\n  ch.data.keys.forEach((item) => {\n    ch.dom.els[item].el = ch.dom.paper.set()\n  })\n  ch.bindClickEvent()\n\n  return ch.createCountries(ch.data.seriesDisplayed)\n}\n\nch.ready = function () {\n  ch.setCg()\n  ch.setDom()\n\n  return ch.getData(ch.render)\n}\n\nexport default () => {\n  ch.ready()\n}\n","type":"js"},"page":"import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/bars-3dimensional/bars-3dimensional\"\nimport \"@/demos/bars-3dimensional/bars-3dimensional.styl\"\n\nconst Bars3Dimensional = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div\n      style={{\n        marginBottom: 20,\n        textAalign: \"center\",\n      }}\n    >\n      <a className=\"btn btn-info animate-bars\" href=\"\">\n        Change Series\n      </a>\n    </div>\n    <div className=\"bars-3dimensional-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Bars3Dimensional\n","styl":".bars-3dimensional-chart\n  padding 50px"},"key":"bars-3dimensional"}}},"staticQueryHashes":[]}