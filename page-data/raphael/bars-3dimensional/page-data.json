{"componentChunkName":"component---src-pages-raphael-bars-3-dimensional-tsx","path":"/raphael/bars-3dimensional/","result":{"pageContext":{"demoInfo":{"data":["data.json"],"docs":[],"isCompleted":true,"name":"Bars 3D","notes":["Added titles on hover","Dynamic dimensions"],"sources":["http://codepen.io/djam/pen/edjCz"],"summary":[],"category":"raphael","files":{"demo":{"content":"import { RaphaelPaper } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./bars-3dimensional.module.css\"\n\nconst fetchData = async () => {\n  const response = await fetch(\n    `${ROOT_PATH}data/raphael/bars-3dimensional/data.json`\n  )\n  const data = await response.json()\n\n  return data.results\n}\n\ntype Data = {\n  keys: string[]\n  keysLength: number\n  seriesDisplayed: number\n  seriesLength: number\n} & {\n  [key: string]: number[]\n}\n\ntype Config = {\n  colorScheme: string[]\n  deep: number\n  easing: string\n  heightOffset: number\n  ratio: number\n  speed: number\n  width: number\n}\n\ntype Dom = {\n  els: { [k: string]: any }\n  paper: RaphaelPaper\n}\n\ntype ChartOpts = {\n  data: Data\n  rootElId: string\n}\n\nclass Chart {\n  private rootElId: string\n  private cg!: Config\n  private dom!: Dom\n  private data!: Data\n\n  public constructor({ data, rootElId }: ChartOpts) {\n    this.rootElId = rootElId\n\n    this.setCg()\n    this.setDom()\n    this.setData(data)\n  }\n\n  public render() {\n    this.drawAxis()\n    this.data.keys.forEach((item) => {\n      this.dom.els[item].el = this.dom.paper.set()\n    })\n\n    this.createCountries(this.data.seriesDisplayed)\n  }\n\n  public displayNextSeries() {\n    const { data } = this\n\n    data.seriesDisplayed =\n      data.seriesDisplayed + 1 === data.seriesLength\n        ? 0\n        : data.seriesDisplayed + 1\n\n    this.animateCountries(data.seriesDisplayed)\n  }\n\n  private setCg() {\n    const { width } = (document.getElementById(\n      this.rootElId\n    ) as HTMLElement).getBoundingClientRect()\n\n    this.cg = {\n      colorScheme: [\"#C1252D\", \"#5F3A5F\", \"#51A8D0\"],\n      deep: 5,\n      easing: \"bounce\",\n      heightOffset: 100,\n      ratio: 0.6,\n      speed: 800,\n      width,\n    }\n  }\n\n  private setDom() {\n    this.dom = {\n      els: {},\n      paper: Raphael(this.rootElId, this.cg.width, 245),\n    }\n    ;(document.getElementById(this.rootElId) as HTMLElement).classList.add(\n      styles.bars3DimensionalChart\n    )\n  }\n\n  private setData(data: Data) {\n    data.keys = Object.keys(data)\n    data.seriesDisplayed = 0\n    data.seriesLength = data[data.keys[0]].length\n    data.keysLength = data.keys.length\n\n    this.data = data\n\n    data.keys.forEach((item: string) => {\n      this.dom.els[item] = {}\n    })\n  }\n\n  private animateCountries(i: number) {\n    const { data } = this\n\n    data.keys.forEach((item) => {\n      this.dom.els[item].inner.animate(\n        {\n          path: this.calcInnerPath(item, i),\n        },\n        this.cg.speed,\n        this.cg.easing\n      )\n      this.dom.els[item].outer.animate(\n        {\n          path: this.calcOuterPath(item, i),\n        },\n        this.cg.speed,\n        this.cg.easing\n      )\n\n      return this.dom.els[item].el.animate(\n        {\n          fill: this.cg.colorScheme[i],\n        },\n        this.cg.speed\n      )\n    })\n  }\n\n  private drawAxis() {\n    const { paper } = this.dom\n    const { deep } = this.cg\n\n    for (let i = 0, _i = 0; _i <= 3; i = ++_i) {\n      const path = `M5,${25 * i} ${this.cg.width},${\n        this.cg.heightOffset + i * 25\n      }`\n\n      paper.path(path).attr(\"stroke-dasharray\", \". \")\n    }\n\n    return paper\n      .path(\n        `M0,${deep + 100} ${deep},100 ${this.cg.width},${\n          100 + this.cg.heightOffset\n        } ${this.cg.width - deep},${100 + this.cg.heightOffset + deep}Z`\n      )\n      .attr(\"fill\", \"#999\")\n      .attr(\"stroke\", \"none\")\n  }\n\n  private calcH0(it: string, se: number): number {\n    return 100 - this.data[it]![se]!\n  }\n\n  private calcH5(it: string, se: number) {\n    return 100 - this.data[it][se] + 5 * this.cg.ratio\n  }\n\n  private calcH10(it: string, se: number) {\n    return 100 - this.data[it][se] + 10 * this.cg.ratio\n  }\n\n  private calcInnerPath(it: string, se: number) {\n    return (\n      `M0,${this.calcH5(it, se)} 15,${this.calcH10(it, se)} ` +\n      `15,${100 + 10 * this.cg.ratio} 0,${100 + 5 * this.cg.ratio}Z`\n    )\n  }\n\n  private calcOuterPath(it: string, se: number) {\n    return `M0,${this.calcH5(it, se)} 5,${this.calcH0(it, se)} 20,${this.calcH5(\n      it,\n      se\n    )} 20,${100 + 5 * this.cg.ratio} 15,${100 + 10 * this.cg.ratio} 0,${\n      100 + 5 * this.cg.ratio\n    }Z`\n  }\n\n  private createCountries(i: number) {\n    const { data } = this\n    const { paper } = this.dom\n\n    return data.keys.forEach((item, index) => {\n      this.dom.els[item].inner = paper.path(this.calcInnerPath(item, i))\n      this.dom.els[item].outer = paper\n        .path(this.calcOuterPath(item, i))\n        .attr(\"opacity\", 0.5)\n      this.dom.els[item].el.push(\n        this.dom.els[item].inner,\n        this.dom.els[item].outer\n      )\n      this.dom.els[item].el.transform(\n        `T ${(this.cg.width / data.keysLength) * index},` +\n          `${(this.cg.heightOffset / data.keysLength) * index}`\n      )\n\n      return this.dom.els[item].el\n        .attr(\"fill\", \"#C1252D\")\n        .attr(\"stroke\", \"none\")\n        .attr(\"title\", `${item}: ${data[item][i]}`)\n    })\n  }\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  const chart = new Chart({\n    data,\n    rootElId: \"chart\",\n  })\n\n  chart.render()\n  ;(document.querySelector(\".animate-bars\") as HTMLElement).addEventListener(\n    \"click\",\n    (e) => {\n      e.preventDefault()\n\n      chart.displayNextSeries()\n    }\n  )\n}\n\nexport default main\n","type":"ts"},"page":{"content":"import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/bars-3dimensional/bars-3dimensional\"\n\nconst Bars3Dimensional = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div\n      style={{\n        marginBottom: 20,\n        textAlign: \"center\",\n      }}\n    >\n      <a className=\"btn btn-info animate-bars\" href=\"\">\n        Change Series\n      </a>\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Bars3Dimensional\n","type":"tsx"},"styl":""},"key":"bars-3dimensional"},"meta":{"description":""}}},"staticQueryHashes":[]}