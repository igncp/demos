{"version":3,"file":"component---src-pages-d-3-js-collapsible-tree-tsx-210cbe2519ae291c36b7.js","mappings":"yNAIMA,EAAoB,YAabC,EAAb,WASE,WAAmBC,GACjBC,KAAKC,YAAcF,EAEnBC,KAAKE,UAAWC,EAAAA,EAAAA,OACbC,GAAE,SAACC,GAAD,OAAkBA,EAAaC,KACjCA,GAAE,SAACD,GAAD,OAAkBA,EAAaD,KAEpCJ,KAAKO,MAAQR,EAAKS,UACfC,OAAO,KACPC,KAAK,OAAQ,QACbA,KAAK,SAAUX,EAAKY,kBACpBD,KAAK,iBAAkB,IACvBA,KAAK,eAAgB,KArB5B,2BAwBSE,OAAP,SAAcb,GAGV,IAAD,EACD,EAQIC,KAPFC,YACEY,EAFJ,EAEIA,mBACAC,EAHJ,EAGIA,YACAC,EAJJ,EAIIA,2BAEFR,EAEEP,KAFFO,MACAL,EACEF,KADFE,SAEMc,EAAoBjB,EAApBiB,QAASC,EAAWlB,EAAXkB,OAEXC,GAAgB,EAAAX,EACnBY,UAAqC,SACrCC,KAFmB,gBAEXJ,MAELK,EAAYH,EACfI,QACAb,OAAO,QACPC,KAAK,QAASb,GACda,KAAK,KAAK,WACT,IAAML,EAAeQ,EAAmBI,GAGxC,OAAOf,EAFc,CAAEe,OAAQZ,EAAckB,OAAQlB,OAKzDa,EACGM,MAAMH,GACNI,aACAC,SAASX,GACTL,KAAK,KAAK,SAACiB,GAAD,OAAUzB,EAASyB,MAEhCT,EACGU,OACAH,aACAC,SAASX,GACTc,SACAnB,KAAK,KAAK,WACT,IAAML,EAAeS,EAAYG,GAGjC,OAAOf,EAFc,CAAEe,OAAQZ,EAAckB,OAAQlB,QAnE7D,EAyESyB,aAAP,WACE,OAAO9B,KAAKO,MAAMY,UAAX,eA1EX,K,UCEMY,EAAkB,cAClBC,EAAiB,aACjBC,EAAmB,eACnBC,EAAoB,gBAEpBC,EAAiB,CAACF,EAAkBC,GAM7BE,EAAb,WAYE,WAAmBrC,GAAqC,KATvCsC,aAAe,IAAIC,IAUlCtC,KAAKC,YAAcF,EAEnBC,KAAKuC,MAAQvC,KAAKC,YAAYO,UAC3BC,OAAO,KACPC,KAAK,iBAAkB,OAE1BV,KAAKwC,oBAAsBxC,KAAKC,YAAYO,UACzCiC,OAAO,SAAU,gBACjB/B,KAAK,IAAK,GACVA,KAAK,OAAQ,QAtBpB,mBAyBSE,OAAP,SAAcb,GAMV,IAAD,EACOkB,EAAWlB,EAAXkB,OAENuB,EAYExC,KAZFwC,oBACAH,EAWErC,KAXFqC,aAFF,EAaIrC,KAVFC,YACEyC,EAJJ,EAIIA,oBACA7B,EALJ,EAKIA,mBACA8B,EANJ,EAMIA,UACAC,EAPJ,EAOIA,uBACA9B,EARJ,EAQIA,YACA+B,EATJ,EASIA,QACAC,EAVJ,EAUIA,eACAnC,EAXJ,EAWIA,iBAIEoC,GAAgB,EAAA/C,KAAKuC,MACxBpB,UAA8B,MAC9BC,KAFmB,gBAEXrB,EAAKiB,YAEVgC,EAAoB,SAACC,GACzB,OAAIH,EAAeG,GACVZ,EAAaa,IAAIP,EAAUM,IAAS,OAAS,QAG/C,OAGHE,EAAYJ,EACfzB,QACAb,OAAO,KACPC,KAAK,aAAa,WACjB,IAAM0C,EAAWvC,EAAmBI,GAEpC,MAAM,aAAcmC,EAAS9C,EAA7B,IAAkC8C,EAAShD,EAA3C,OAEDM,KAAK,eAAgB,GACrBA,KAAK,iBAAkB,GACvB2C,GAAG,SAAS,WAAsB,IAAD,wEAAdC,EAAc,KAChCvD,EAAKwD,YAAYD,MAElBD,GAAG,cAAc,WAAkC,IAAC,IAAD,2EAAlBG,EAAkB,KAClDnB,EAAaoB,IAAId,EAAUa,KAE3BE,EAAAA,EAAAA,IAA2B1D,MACxB0D,OAAyB,UACzBhD,KAAK,OAAQsC,GAEhBb,EAAewB,SAAQ,SAACC,IACtBF,EAAAA,EAAAA,IAA2B,GACxBA,OADH,IAC8BE,GAC3BC,MAAM,WAAW,SAACZ,GAAD,OAChBW,IAAc1B,GAAqBQ,EAAoBO,GACnD,QACA,aAIV,IAAMa,EAAelB,EAAuBY,GAE5C,GAAKM,EAAaC,OAAlB,CAIAD,EAAaD,MAAM,SAAU,UAC7BrB,EAAoB9B,KAAK,OAAQ,UAEjC,IAAMsD,EAAYC,EAAAA,EAAAA,KAAWH,EAAab,SAE1CgB,EAAAA,EAAAA,GAAM,CACJvC,SAAU,IACVwC,OAAQ,gBACRC,SAAU,IACVC,MAAM,EACNC,QAAS7B,EAAoBS,OAC7BqB,WAAYN,EAAU,KACtBO,WAAYP,EAAU,WAGzBX,GAAG,cAAc,WAAkC,IAAC,IAAD,2EAAlBG,EAAkB,KAClDnB,EAAamC,OAAO7B,EAAUa,KAE9BE,EAAAA,EAAAA,IAA2B1D,MACxB0D,OAAyB,UACzBhD,KAAK,OAAQsC,GAEhBb,EAAewB,SAAQ,SAACC,IACtBF,EAAAA,EAAAA,IAA2B,GACxBA,OADH,IAC8BE,GAC3BC,MAAM,UAAW,WAGtB,IAAMC,EAAelB,EAAuBY,GAEvCM,EAAaC,SAIlBvB,EAAoB9B,KAAK,OAAQ,QAEjCoD,EAAaD,MAAM,SAAUlD,GAC7BsD,EAAAA,EAAAA,OAAazB,EAAoBS,YAGrCE,EACG1C,OAAO,UACPC,KAAK,IAAK,IACVA,KAAK,QAASqB,GACdrB,KAAK,eAAgB,IAIxByC,EACG1C,OAAO,QACPC,KAAK,QAASsB,GACdtB,KAAK,KAAM,OACXmD,MAAM,YAAa,QACnBY,KAAK5B,GACL6B,OAAM,GACNC,QACAjE,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,SAAU,SAIlByC,EACG1C,OAAO,QACPC,KAAK,IAAK,SACVA,KAAK,IAAK,SACVmD,MAAM,OAAQ,SACdnD,KAAK,SAAU,QACfA,KAAK,QAAS,QAEjByC,EACG1C,OAAO,QACPC,KAAK,QAASuB,GACdvB,KAAK,KAAM,SACXA,KAAK,KAAM,OACXmD,MAAM,YAAa,QACnBA,MAAM,UAAW,QACjBY,KAAK,KACL/D,KAAK,SAAU,WACf2C,GAAG,cAAc,YAChBK,EAAAA,EAAAA,IAAO1D,MAAMU,KAAK,OAAQ,aAE3B2C,GAAG,cAAc,YAChBK,EAAAA,EAAAA,IAAO1D,MAAMU,KAAK,OAAQ,SAE3B2C,GAAG,SAAS,WAAiC,IAAD,wEAA3BuB,EAA2B,KAAfC,EAAe,KAC3CD,EAAWE,kBACX/E,EAAKgF,UAAUF,MAGnB1B,EACG1C,OAAO,QACPC,KAAK,QAASwB,GACdxB,KAAK,KAAM,SACXA,KAAK,KAAM,SACXmD,MAAM,YAAa,QACnBA,MAAM,UAAW,QACjBY,KAAK,KACL/D,KAAK,SAAU,WACf2C,GAAG,cAAc,YAChBK,EAAAA,EAAAA,IAAO1D,MAAMU,KAAK,OAAQ,aAE3B2C,GAAG,cAAc,YAChBK,EAAAA,EAAAA,IAAO1D,MAAMU,KAAK,OAAQ,SAE3B2C,GAAG,SAAS,WAAiC,IAAD,wEAA3BuB,EAA2B,KAAfC,EAAe,KAC3CD,EAAWE,kBACX/E,EAAKiF,aAAaH,MAGtB9B,EACGvB,MAAM2B,GACN1B,aACAC,SAAS1B,KAAKC,YAAYc,4BAC1BL,KAAK,aAAa,SAAC4C,GAClB,IAAMF,EAAWtC,EAAYwC,GAE7B,MAAM,aAAcF,EAAS9C,EAA7B,IAAkC8C,EAAShD,EAA3C,OAEDM,KAAK,eAAgB,GACrBA,KAAK,iBAAkB,GAEH,CAACqC,EAAeI,GAExBQ,SAAQ,SAACsB,GACtBA,EAAUvE,KAAK,UAAU,SAAC4C,GAAD,OACvBR,EAAeQ,GAAY,UAAY,aAGzC2B,EACG9D,UADH,gBAEGT,KAAK,OAAQsC,GAEhBiC,EACG9D,UADH,eAEGT,KAAK,MAAM,SAAC4C,GAAD,OACVR,EAAeQ,GAAf,QAA+C4B,UAEhDxE,KAAK,KAAK,SAAC4C,GAAD,OAAeR,EAAeQ,IAAa,EAAI,KACzD5C,KAAK,eAAe,SAAC4C,GAAD,OACnBR,EAAeQ,GAAY,MAAQ,cAIzC,IAAM6B,EAAiBrE,EAAYG,GAEnC8B,EACGnB,OACAH,aACAC,SAAS1B,KAAKC,YAAYc,4BAC1Bc,SACAnB,KAAK,YALR,aAKkCyE,EAAe7E,EALjD,IAKsD6E,EAAe/E,EALrE,KAMGM,KAAK,eAAgB,GACrBA,KAAK,iBAAkB,IAzP9B,KCfM0E,EACc,OAOPC,EAAW,SAAXA,EAAW,GAQW,IAAD,EAPhCC,EAOgC,EAPhCA,MACArC,EAMgC,EANhCA,KACAsC,EAKgC,EALhCA,OAMA,OAAID,EAAMrC,KAAUsC,EACXtC,GAGF,UAACA,EAAKuC,gBAAN,QAAkB,IAAIC,QAC3B,uFAAKC,EAAL,KAAUC,EAAV,YACED,MAAAA,EAAAA,EAAOL,EAAS,CAAEC,MAAAA,EAAOrC,KAAM0C,EAAWJ,OAAAA,MAC5C,OAISK,EAAiB,SAAjBA,EAAiB,GAQK,IAAD,EAPhCN,EAOgC,EAPhCA,MACArC,EAMgC,EANhCA,KACAsC,EAKgC,EALhCA,OAMA,OAAI,UAACtC,EAAKuC,gBAAN,OAAC,EAAeK,OAIJ5C,EAAKuC,SAASM,MAAK,SAACH,GAAD,OAAeL,EAAMK,KAAeJ,KAG9DtC,EAGFA,EAAKuC,SAASC,QACnB,uFAAKC,EAAL,KAAUC,EAAV,YACED,MAAAA,EAAAA,EAAOE,EAAe,CAAEN,MAAAA,EAAOrC,KAAM0C,EAAWJ,OAAAA,MAClD,MAZO,MAyBLQ,EACI,GADJA,EAEE,IAFFA,EAGG,IAHHA,EAIC,GAIDC,EAAS,IAAMD,EAAaA,EAE5BE,EAAc,SAAdA,EACJC,GADkB,8BAGfA,EAHe,CAIlBC,eAAWC,EACXZ,UAAU,UAACU,EAAYV,gBAAb,QAAyB,IAAIa,KAAI,SAACC,GAAD,OAAaL,EAAYK,MACpElG,EAAG,EACHmG,GAAI,EACJjG,EAAG,EACHkG,GAAI,KAgDOC,EAAc,SAAWC,GACpC,IAAQC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAEZC,EAASC,SAASC,eAAeH,GAEvCC,EAAOG,UAAUvD,ICrJe,wDDuJhC,IAAMwD,EACJJ,EAAOK,wBAAwBD,MAAQlB,EAAeA,EAKlDoB,EAAelB,EAAYU,GAE3BS,GAAgBC,EAAAA,EAAAA,KAA8BF,GAEpDC,EAAchG,KAAKmF,GAAKP,EAAS,EACjCoB,EAAchG,KAAKoF,GAAK,EAExB,IAAMc,GAAYC,EAAAA,EAAAA,OAA6BC,SAAS,CAAC,GAAI,MAEvDC,EAAWH,EAAUF,GAE3BK,EAASC,cAAc/D,SAAQ,SAACL,GAC9BA,EAASlC,KAAK+E,UAAY7C,EAASkC,SAE/BlC,EAASqE,QACXrE,EAASkC,cAAWY,MAIxB,IAAMwB,GAAOlE,EAAAA,EAAAA,IAAM,IAA2BkD,GAC3CnG,OAAO,OACPC,KAAK,QAASuG,EAAQlB,EAAeA,GACrCrF,KAAK,SAAUsF,EAASD,EAAaA,GACrCtF,OAAO,MAjFM,SAChBmH,GAEA,IAAMC,EACD9B,EADC8B,EAED7B,EAAS,EAGR8B,EAAe,CACnB1H,EAAG,EACHE,EAAG,GAGCyH,GAAcC,EAAAA,EAAAA,OAA+B3E,GACjD,QACA,SAAC4E,GACCH,EAAa1H,GAAK6H,EAAUC,GAC5BJ,EAAaxH,GAAK2H,EAAUE,GAE5BP,EAAKlH,KACH,YADF,cAEemH,EAAoBC,EAAa1H,GAFhD,KAGIyH,EAAoBC,EAAaxH,GAHrC,QASJsH,EAAKlH,KAAK,YAAV,aAAoCmH,EAApC,IAAyDA,EAAzD,MAEYnE,EAAAA,EAAAA,IAAOkE,EAAK3E,OAAQmF,YAE5BvE,MAAM,SAAU,QAAQwE,KAAKN,GAmDjCO,CAAUV,GAEV,IAAMW,EAAe,CACnB/H,UAAWoH,EACX/G,mBAAoB,SAACoC,GAAD,MAAqB,CACvC7C,EAAG6C,EAAK7B,KAAKmF,GACbjG,EAAG2C,EAAK7B,KAAKoF,KAEf1F,YAAa,SAACmC,GAAD,MAAqB,CAAE7C,EAAG6C,EAAK7C,EAAGE,EAAG2C,EAAK3C,IACvDK,iBAAkByE,EAClBrE,2BA5G+B,KA+G3ByH,EAAS,IAAI1I,EAAwCyI,GAErDE,EAAS,IAAIrG,EAAJ,iBACVmG,EADU,CAEb7F,oBAAqB,SAACY,GAAD,OAAcoD,EAAYgC,aAAapF,EAASlC,OACrEuB,UAAW,SAACW,GAAD,OAAcoD,EAAY/D,UAAUW,EAASlC,OACxDwB,uBAAwB,SAACU,GAAD,OACtBkF,EACG1G,eACA6G,QACC,SAAChH,GAAD,OACE+E,EAAY/D,UAAUhB,EAAKJ,OAAOH,QAClCsF,EAAY/D,UAAUW,EAASlC,UAEvCyB,QAAS,SAACS,GAAD,OAAcoD,EAAYkC,aAAatF,EAASlC,OACzD0B,eAAgB,SAACG,GAAD,cAAW,UAACA,EAAK7B,KAAKoE,gBAAX,QAAC,EAAoBK,aAGnC,SAATjF,EAAmBK,GACvB,IAAM4H,EAAQpB,EAASC,cAAcoB,UAC/BC,EAAQtB,EAASsB,QAEvBzB,EAAUF,GAEVqB,EAAO7H,OAAO,CACZI,QAAS,iBAAM,CACb6H,EACA,SAACvF,GAAD,OAAcoD,EAAY/D,UAAUW,EAASlC,SAE/C2D,UAAW,SAACiE,GAAqB,IAAD,MACxBC,EAAcvC,EAAY3B,UAAUiE,EAAgB5H,MACpD8H,EAAcjD,EAAYgD,GAC1BE,GAAkB9B,EAAAA,EAAAA,KACtB6B,GAIFC,EAAgBxB,MAAQqB,EAAgBrB,MAAQ,EAChDwB,EAAgBC,OAASJ,EAEzBA,EAAgBxD,SAAhB,oBACEwD,EAAgBxD,gBADlB,QAC8BwD,EAAgB5H,KAAK+E,iBADnD,QACgE,GAChE6C,EAAgB5H,KAAK+E,UAAY6C,EAAgBxD,SACjDwD,EAAgBxD,SAAS6D,KAAKF,GAE9BH,EAAgB5H,KAAKoE,SAArB,UAAgCwD,EAAgB5H,KAAKoE,gBAArD,QAAiE,GACjEwD,EAAgB5H,KAAKoE,SAAS6D,KAAKF,EAAgB/H,MAEnDR,EAAOoI,IAETzF,YAAa,SAACD,GACZA,EAASkC,SAAWlC,EAASkC,cACzBY,EACA9C,EAASlC,KAAK+E,UAElBvF,EAAO0C,IAET0B,aAAc,SAACgE,GACb,IAAMZ,EAAa1B,EAAY1B,aAAagE,EAAgB5H,MAEtDkC,EAAW+B,EAAS,CACxBC,MAAO,SAACrC,GAAD,OAAUyD,EAAY/D,UAAUM,EAAK7B,OAC5C6B,KAAMmE,EACN7B,OAAQmB,EAAY/D,UAAUyF,KAG1BkB,EAAYhG,EAASkC,SAAU+D,WACnC,SAACtG,GAAD,OACEyD,EAAY/D,UAAUM,EAAK7B,QAC3BsF,EAAY/D,UAAUqG,EAAgB5H,SAG1CkC,EAASkC,SAAUgE,OAAOF,EAAW,GAErC1I,EAAO0C,IAETrC,OAAAA,IAGFuH,EAAO5H,OAAO,CACZI,QAAS,iBAAM,CACb+H,EACA,SAACU,GAAD,OAAc/C,EAAY/D,UAAU8G,EAASlI,OAAOH,SAEtDH,OAAAA,IAGFwG,EAASiC,YAAW,SAACpG,GACnBA,EAASlC,KAAKmF,GAAKjD,EAASlD,EAC5BkD,EAASlC,KAAKoF,GAAKlD,EAAShD,KAIhCM,CAAO6G,IExRIkC,EAAe,QAatBC,EAAc,SAAdA,EAAe,GAMJ,IAAD,EALdC,EAKc,EALdA,QACAC,EAIc,EAJdA,QAKYvE,EAAWsE,EAAfE,GAIR,OAFAF,EAAQE,IAAM,EAEP,OAAP,UACKD,EADL,CAEEtE,UAAU,UAACsE,EAAQtE,gBAAT,QAAqB,IAAIa,KAAI,SAAC2D,GAAD,OACrCJ,EAAY,CAAEC,QAAAA,EAASC,QAASE,OAElCD,GAAIxE,KAIF0E,EAAY,SAAZA,EAAahH,GAAD,aAChB,UAACA,EAAKuC,gBAAN,QAAkB,IAAIC,QACpB,uFAAKC,EAAL,KAAUwE,EAAV,YAA4BC,KAAKC,IAAIH,EAAUC,GAAexE,KAC9DzC,EAAK8G,KAGIM,EAAS,mCAAG,qGACAC,EAAAA,EAAAA,KAClBC,+CAFkB,cACjBT,EADiB,yBAKhBF,EAAY,CAAEC,QAAS,CAAEE,GAAI,GAAKD,QAAAA,KALlB,2CAAH,qDAUhBlB,EAAuC,SAAC3F,GAAD,OAAUA,EAAKuH,MACtD7H,EAAiC,SAACM,GAAD,OAAUA,EAAK8G,IAChDrB,EAAuC,SAACzF,GAAD,OAAsB,IAAZA,EAAK8G,IAE/CU,EAAoB,SAAC9D,GA+ChC,MAAO,CACL+B,aAAAA,EACA/F,UAAAA,EACAiG,aAAAA,EACA7D,UAlDqC,SAAC2F,GAAiB,IAAD,EAChDC,EAAQV,EAAUtD,GAClBiE,EAAWvF,EAAS,CACxBC,MAAO,SAACrC,GAAD,OAAUA,EAAK8G,IACtB9G,KAAM0D,EACNpB,OAAQmF,EAAYX,KAGtB,IAAKa,EACH,MAAM,IAAIC,MAAM,kBAGlB,IAAMC,EAAQH,EAAQ,EAEtBC,EAASpF,SAAT,UAAoBoF,EAASpF,gBAA7B,QAAyC,GAEzC,IAAMuF,EAAU,CACdhB,GAAIe,EACJN,KAAK,gBAAiBM,GAKxB,OAFAF,EAASpF,SAAS6D,KAAK0B,GAEhBA,GA4BP/F,aAzB2C,SAAC0F,GAC5C,IAAMtC,EAAaxC,EAAe,CAChCN,MAAO,SAACrC,GAAD,OAAUA,EAAK8G,IACtB9G,KAAM0D,EACNpB,OAAQmF,EAAYX,KAGtB,IAAK3B,EACH,MAAM,IAAIyC,MAAM,kBAGlB,IAAMvB,EAAYlB,EAAW5C,SAAU+D,WACrC,SAACtG,GAAD,OAAUA,EAAK8G,KAAOW,EAAYX,MAKpC,OAFA3B,EAAW5C,SAAUgE,OAAOF,EAAW,GAEhClB,GASPzB,SAAAA,EACAC,SAAU+C,ICnGd,EAVU,mCAAG,sGACYU,IADZ,OACL1D,EADK,OAGLD,EAAc+D,EAAkB9D,GAEtCF,EAAYC,GALD,2CAAH,qDCOV,EANwB,SAAC,GAAD,IAAGsE,EAAH,EAAGA,YAAH,OACtB,gBAAC,IAAD,CAAMC,KAAMA,EAAMD,YAAaA,GAC7B,uBAAKjB,GAAIJ,O,qBCVbuB,EAAOC,QAAU,EAAjB,O,kCCAA,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOpM,KACPqM,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGI,MAAMH,EAAMC,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,GAGnEhB,OAAMpF,O","sources":["webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-link-ui.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-node-ui.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.module.css","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-config.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/pages/d3js/collapsible-tree.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { BaseType, Link, Selection, linkHorizontal } from \"d3\"\n\nimport { CommonUIProps, Point } from \"./collapsible-tree-chart-ui-common\"\n\nconst treeLinkPathClass = \"tree-link\"\n\ntype DiagonalLink = { source: Point; target: Point }\n\ntype LinkUIOpts<Container extends BaseType, NodeDatum> = CommonUIProps<\n  Container,\n  NodeDatum\n>\n\n/**\n * Responsible for handle the UI of the link, without any knowledge of the node\n * tree structure, with a constraint on the link data.\n */\nexport class LinkUI<\n  Container extends BaseType,\n  LinkDatum extends DiagonalLink,\n  NodeDatum\n> {\n  private readonly initialOpts: LinkUIOpts<Container, NodeDatum>\n  private readonly linkG: Selection<SVGGElement, NodeDatum, Element, unknown>\n  private readonly linkPath: Link<unknown, DiagonalLink, Point>\n\n  public constructor(opts: LinkUIOpts<Container, NodeDatum>) {\n    this.initialOpts = opts\n\n    this.linkPath = linkHorizontal<DiagonalLink, Point>()\n      .x((diagonalNode) => diagonalNode.y)\n      .y((diagonalNode) => diagonalNode.x)\n\n    this.linkG = opts.container\n      .append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", opts.linkDefaultColor)\n      .attr(\"stroke-opacity\", 0.4)\n      .attr(\"stroke-width\", 1.5)\n  }\n\n  public update(opts: {\n    getData: () => [LinkDatum[], (o: LinkDatum) => number]\n    source: NodeDatum\n  }) {\n    const {\n      initialOpts: {\n        getInitialPosition,\n        getPosition,\n        openCloseAnimationDuration,\n      },\n      linkG,\n      linkPath,\n    } = this\n    const { getData, source } = opts\n\n    const linkSelection = linkG\n      .selectAll<SVGPathElement, LinkDatum>(\"path\")\n      .data(...getData())\n\n    const linkEnter = linkSelection\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", treeLinkPathClass)\n      .attr(\"d\", () => {\n        const diagonalNode = getInitialPosition(source)\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return linkPath(diagonalLink)\n      })\n\n    linkSelection\n      .merge(linkEnter)\n      .transition()\n      .duration(openCloseAnimationDuration)\n      .attr(\"d\", (link) => linkPath(link))\n\n    linkSelection\n      .exit()\n      .transition()\n      .duration(openCloseAnimationDuration)\n      .remove()\n      .attr(\"d\", () => {\n        const diagonalNode = getPosition(source)\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return linkPath(diagonalLink)\n      })\n  }\n\n  public getSelection() {\n    return this.linkG.selectAll<SVGPathElement, LinkDatum>(\n      `.${treeLinkPathClass}`\n    )\n  }\n}\n","import anime from \"animejs\"\nimport { BaseType, Selection, select } from \"d3\"\n\nimport { CommonUIProps } from \"./collapsible-tree-chart-ui-common\"\n\ntype NodeUIOpts<Container extends BaseType, Datum> = CommonUIProps<\n  Container,\n  Datum\n> &\n  Readonly<{\n    displayRemoveButton: (o: Datum) => boolean\n    getNodeId: (o: Datum) => number\n    getPointingLinkForNode: (\n      o: Datum\n    ) => Selection<SVGElement, unknown, SVGElement, unknown>\n    getText: (o: Datum) => string\n    hasDescendants: (node: Datum) => boolean\n  }>\n\nconst nodeCircleClass = \"node-circle\"\nconst nodeLabelClass = \"node-label\"\nconst plusTriggerClass = \"plus-trigger\"\nconst minusTriggerClass = \"minus-trigger\"\n\nconst triggerClasses = [plusTriggerClass, minusTriggerClass]\n\n/**\n * Responsible for handle the UI of the node, without any knowledge of the node\n * tree structure (it doesn't know how the children nodes are referenced)\n */\nexport class NodeUI<Container extends BaseType, Datum> {\n  private readonly initialOpts: NodeUIOpts<Container, Datum>\n  private readonly nodeG: Selection<SVGGElement, Datum, Element, unknown>\n  private readonly hoveredItems = new Set<number>()\n\n  private readonly circleLinkForEffect: Selection<\n    SVGCircleElement,\n    Datum,\n    Element,\n    unknown\n  >\n\n  public constructor(opts: NodeUIOpts<Container, Datum>) {\n    this.initialOpts = opts\n\n    this.nodeG = this.initialOpts.container\n      .append(\"g\")\n      .attr(\"pointer-events\", \"all\")\n\n    this.circleLinkForEffect = this.initialOpts.container\n      .insert(\"circle\", \":first-child\")\n      .attr(\"r\", 4)\n      .attr(\"fill\", \"none\")\n  }\n\n  public update(opts: {\n    getData: () => [Datum[], (o: Datum) => number]\n    onNodeAdd: (node: Datum) => void\n    onNodeClick: (node: Datum) => void\n    onNodeRemove: (node: Datum) => void\n    source: Datum\n  }) {\n    const { source } = opts\n    const {\n      circleLinkForEffect,\n      hoveredItems,\n      initialOpts: {\n        displayRemoveButton,\n        getInitialPosition,\n        getNodeId,\n        getPointingLinkForNode,\n        getPosition,\n        getText,\n        hasDescendants,\n        linkDefaultColor,\n      },\n    } = this\n\n    const nodeSelection = this.nodeG\n      .selectAll<SVGGElement, Datum>(\"g\")\n      .data(...opts.getData())\n\n    const circleDefaultFill = (node: Datum) => {\n      if (hasDescendants(node)) {\n        return hoveredItems.has(getNodeId(node)) ? \"blue\" : \"green\"\n      }\n\n      return \"red\"\n    }\n\n    const nodeEnter = nodeSelection\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => {\n        const position = getInitialPosition(source)\n\n        return `translate(${position.y},${position.x})`\n      })\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (...[, treeNode]) => {\n        opts.onNodeClick(treeNode)\n      })\n      .on(\"mouseenter\", function (...[, focusedTreeNode]) {\n        hoveredItems.add(getNodeId(focusedTreeNode))\n\n        select<SVGGElement, Datum>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n\n        triggerClasses.forEach((className) => {\n          select<SVGGElement, Datum>(this)\n            .select<SVGTextElement>(`.${className}`)\n            .style(\"display\", (node) =>\n              className !== minusTriggerClass || displayRemoveButton(node)\n                ? \"block\"\n                : \"none\"\n            )\n        })\n\n        const pointingLink = getPointingLinkForNode(focusedTreeNode)\n\n        if (!pointingLink.size()) {\n          return\n        }\n\n        pointingLink.style(\"stroke\", \"orange\")\n        circleLinkForEffect.attr(\"fill\", \"orange\")\n\n        const animePath = anime.path(pointingLink.node() as SVGElement)\n\n        anime({\n          duration: 500,\n          easing: \"easeInOutSine\",\n          endDelay: 1000,\n          loop: true,\n          targets: circleLinkForEffect.node(),\n          translateX: animePath(\"x\"),\n          translateY: animePath(\"y\"),\n        })\n      })\n      .on(\"mouseleave\", function (...[, focusedTreeNode]) {\n        hoveredItems.delete(getNodeId(focusedTreeNode))\n\n        select<SVGGElement, Datum>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n\n        triggerClasses.forEach((className) => {\n          select<SVGGElement, Datum>(this)\n            .select<SVGTextElement>(`.${className}`)\n            .style(\"display\", \"none\")\n        })\n\n        const pointingLink = getPointingLinkForNode(focusedTreeNode)\n\n        if (!pointingLink.size()) {\n          return\n        }\n\n        circleLinkForEffect.attr(\"fill\", \"none\")\n\n        pointingLink.style(\"stroke\", linkDefaultColor)\n        anime.remove(circleLinkForEffect.node())\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .attr(\"class\", nodeCircleClass)\n      .attr(\"stroke-width\", 10)\n\n    const textDX = 10\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"class\", nodeLabelClass)\n      .attr(\"dy\", \"5px\")\n      .style(\"font-size\", \"20px\")\n      .text(getText)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    // this improves the interaction with the trigger buttons to maintain the\n    // hover\n    nodeEnter\n      .append(\"rect\")\n      .attr(\"y\", \"-25px\")\n      .attr(\"x\", \"-15px\")\n      .style(\"fill\", \"white\")\n      .attr(\"height\", \"15px\")\n      .attr(\"width\", \"30px\")\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"class\", plusTriggerClass)\n      .attr(\"dy\", \"-10px\")\n      .attr(\"dx\", \"0px\")\n      .style(\"font-size\", \"20px\")\n      .style(\"display\", \"none\")\n      .text(\"+\")\n      .attr(\"cursor\", \"pointer\")\n      .on(\"mouseenter\", function () {\n        select(this).attr(\"fill\", \"orange\")\n      })\n      .on(\"mouseleave\", function () {\n        select(this).attr(\"fill\", null)\n      })\n      .on(\"click\", (...[clickEvent, nodeDatum]) => {\n        clickEvent.stopPropagation()\n        opts.onNodeAdd(nodeDatum)\n      })\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"class\", minusTriggerClass)\n      .attr(\"dy\", \"-10px\")\n      .attr(\"dx\", \"-15px\")\n      .style(\"font-size\", \"25px\")\n      .style(\"display\", \"none\")\n      .text(\"-\")\n      .attr(\"cursor\", \"pointer\")\n      .on(\"mouseenter\", function () {\n        select(this).attr(\"fill\", \"orange\")\n      })\n      .on(\"mouseleave\", function () {\n        select(this).attr(\"fill\", null)\n      })\n      .on(\"click\", (...[clickEvent, nodeDatum]) => {\n        clickEvent.stopPropagation()\n        opts.onNodeRemove(nodeDatum)\n      })\n\n    nodeSelection\n      .merge(nodeEnter)\n      .transition()\n      .duration(this.initialOpts.openCloseAnimationDuration)\n      .attr(\"transform\", (treeNode) => {\n        const position = getPosition(treeNode)\n\n        return `translate(${position.y},${position.x})`\n      })\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    const groupsToUpdate = [nodeSelection, nodeEnter]\n\n    groupsToUpdate.forEach((nodeGroup) => {\n      nodeGroup.attr(\"cursor\", (treeNode) =>\n        hasDescendants(treeNode) ? \"pointer\" : \"default\"\n      )\n\n      nodeGroup\n        .selectAll<SVGCircleElement, Datum>(`.${nodeCircleClass}`)\n        .attr(\"fill\", circleDefaultFill)\n\n      nodeGroup\n        .selectAll<SVGCircleElement, Datum>(`.${nodeLabelClass}`)\n        .attr(\"dx\", (treeNode) =>\n          hasDescendants(treeNode) ? `-${textDX}px` : `${textDX}px`\n        )\n        .attr(\"x\", (treeNode) => (hasDescendants(treeNode) ? -6 : 6))\n        .attr(\"text-anchor\", (treeNode) =>\n          hasDescendants(treeNode) ? \"end\" : \"start\"\n        )\n    })\n\n    const sourcePosition = getPosition(source)\n\n    nodeSelection\n      .exit()\n      .transition()\n      .duration(this.initialOpts.openCloseAnimationDuration)\n      .remove()\n      .attr(\"transform\", `translate(${sourcePosition.y},${sourcePosition.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n  }\n}\n","import {\n  D3DragEvent,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  Selection,\n  drag,\n  hierarchy,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport { LinkUI } from \"./collapsible-tree-chart-link-ui\"\nimport { NodeUI } from \"./collapsible-tree-chart-node-ui\"\nimport * as styles from \"./collapsible-tree.module.css\"\n\nconst inlineStyles = {\n  linkDefaultColor: \"#555\",\n} as const\n\nexport type NodeShape<Content> = Content & {\n  children?: Array<NodeShape<Content>>\n}\n\nexport const findNode = <NodeData>({\n  getId,\n  node,\n  nodeId,\n}: {\n  getId: (node: NodeShape<NodeData>) => number\n  node: NodeShape<NodeData>\n  nodeId: number\n}): NodeShape<NodeData> | null => {\n  if (getId(node) === nodeId) {\n    return node\n  }\n\n  return (node.children ?? []).reduce(\n    (...[acc, otherNode]) =>\n      acc ?? findNode({ getId, node: otherNode, nodeId }),\n    null as NodeShape<NodeData> | null\n  )\n}\n\nexport const findParentNode = <NodeData>({\n  getId,\n  node,\n  nodeId,\n}: {\n  getId: (node: NodeShape<NodeData>) => number\n  node: NodeShape<NodeData>\n  nodeId: number\n}): NodeShape<NodeData> | null => {\n  if (!node.children?.length) {\n    return null\n  }\n\n  const hasNode = node.children.some((otherNode) => getId(otherNode) === nodeId)\n\n  if (hasNode) {\n    return node\n  }\n\n  return node.children.reduce(\n    (...[acc, otherNode]) =>\n      acc ?? findParentNode({ getId, node: otherNode, nodeId }),\n    null as NodeShape<NodeData> | null\n  )\n}\n\ntype DataNode<BaseData> = BaseData &\n  NodeShape<{\n    _children: Array<HierarchyPointNode<DataNode<BaseData>>> | undefined\n    x: number\n    x0: number\n    y: number\n    y0: number\n  }>\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst openCloseAnimationDuration = 750\nconst height = 800 - margin.top - margin.bottom\n\nconst getDataNode = <BaseData>(\n  initialNode: NodeShape<BaseData>\n): DataNode<BaseData> => ({\n  ...initialNode,\n  _children: undefined,\n  children: (initialNode.children ?? []).map((subNode) => getDataNode(subNode)),\n  x: 0,\n  x0: 0,\n  y: 0,\n  y0: 0,\n})\n\nconst setupDrag = <SelectionData>(\n  svgG: Selection<SVGGElement, SelectionData, HTMLElement, unknown>\n) => {\n  const translateOffset = {\n    x: margin.left,\n    y: height / 2,\n  } as const\n\n  const draggedState = {\n    x: 0,\n    y: 0,\n  }\n\n  const dragHandler = drag<SVGSVGElement, unknown>().on(\n    \"drag\",\n    (dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>) => {\n      draggedState.x += dragEvent.dx\n      draggedState.y += dragEvent.dy\n\n      svgG.attr(\n        \"transform\",\n        `translate(${translateOffset.x + draggedState.x},${\n          translateOffset.y + draggedState.y\n        })`\n      )\n    }\n  )\n\n  svgG.attr(\"transform\", `translate(${translateOffset.x},${translateOffset.y})`)\n\n  const svg = select(svgG.node()!.parentNode as SVGSVGElement)\n\n  svg.style(\"cursor\", \"move\").call(dragHandler)\n}\n\nexport type ChartConfig<BaseData> = {\n  canBeRemoved: (node: DataNode<BaseData>) => boolean\n  getNodeId: (node: DataNode<BaseData>) => number\n  getNodeLabel: (node: DataNode<BaseData>) => string\n  onNodeAdd: (node: DataNode<BaseData>) => NodeShape<BaseData>\n  onNodeRemove: (node: DataNode<BaseData>) => NodeShape<BaseData>\n  rootData: NodeShape<BaseData>\n  rootElId: string\n}\n\nexport const renderChart = <BaseData>(chartConfig: ChartConfig<BaseData>) => {\n  const { rootData, rootElId } = chartConfig\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  type TreeNode = HierarchyPointNode<DataNode<BaseData>>\n  type TreeLink = HierarchyPointLink<DataNode<BaseData>>\n\n  const dataNodeRoot = getDataNode(rootData)\n\n  const rootHierarchy = hierarchy<DataNode<BaseData>>(dataNodeRoot)\n\n  rootHierarchy.data.x0 = height / 2\n  rootHierarchy.data.y0 = 0\n\n  const buildTree = treeD3<DataNode<BaseData>>().nodeSize([40, 250])\n\n  const rootTree = buildTree(rootHierarchy)\n\n  rootTree.descendants().forEach((treeNode: TreeNode) => {\n    treeNode.data._children = treeNode.children\n\n    if (treeNode.depth) {\n      treeNode.children = undefined\n    }\n  })\n\n  const svgG = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n\n  setupDrag(svgG)\n\n  const commonUIOpts = {\n    container: svgG,\n    getInitialPosition: (node: TreeNode) => ({\n      x: node.data.x0,\n      y: node.data.y0,\n    }),\n    getPosition: (node: TreeNode) => ({ x: node.x, y: node.y }),\n    linkDefaultColor: inlineStyles.linkDefaultColor,\n    openCloseAnimationDuration,\n  }\n\n  const linkUI = new LinkUI<SVGGElement, TreeLink, TreeNode>(commonUIOpts)\n\n  const nodeUI = new NodeUI({\n    ...commonUIOpts,\n    displayRemoveButton: (treeNode) => chartConfig.canBeRemoved(treeNode.data),\n    getNodeId: (treeNode) => chartConfig.getNodeId(treeNode.data),\n    getPointingLinkForNode: (treeNode) =>\n      linkUI\n        .getSelection()\n        .filter(\n          (link) =>\n            chartConfig.getNodeId(link.target.data) ===\n            chartConfig.getNodeId(treeNode.data)\n        ) as unknown as Selection<SVGElement, unknown, SVGElement, unknown>,\n    getText: (treeNode) => chartConfig.getNodeLabel(treeNode.data),\n    hasDescendants: (node) => !!node.data.children?.length,\n  })\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    buildTree(rootHierarchy)\n\n    nodeUI.update({\n      getData: () => [\n        nodes,\n        (treeNode) => chartConfig.getNodeId(treeNode.data),\n      ],\n      onNodeAdd: (clickedTreeNode) => {\n        const newNodeData = chartConfig.onNodeAdd(clickedTreeNode.data)\n        const newDataNode = getDataNode(newNodeData)\n        const newNodeHirarchy = hierarchy<DataNode<BaseData>>(\n          newDataNode\n        ) as TreeNode\n\n        // @ts-ignore\n        newNodeHirarchy.depth = clickedTreeNode.depth + 1\n        newNodeHirarchy.parent = clickedTreeNode\n\n        clickedTreeNode.children =\n          clickedTreeNode.children ?? clickedTreeNode.data._children ?? []\n        clickedTreeNode.data._children = clickedTreeNode.children\n        clickedTreeNode.children.push(newNodeHirarchy)\n\n        clickedTreeNode.data.children = clickedTreeNode.data.children ?? []\n        clickedTreeNode.data.children.push(newNodeHirarchy.data)\n\n        update(clickedTreeNode)\n      },\n      onNodeClick: (treeNode) => {\n        treeNode.children = treeNode.children\n          ? undefined\n          : treeNode.data._children\n\n        update(treeNode)\n      },\n      onNodeRemove: (clickedTreeNode) => {\n        const parentNode = chartConfig.onNodeRemove(clickedTreeNode.data)\n\n        const treeNode = findNode({\n          getId: (node) => chartConfig.getNodeId(node.data),\n          node: rootHierarchy,\n          nodeId: chartConfig.getNodeId(parentNode as DataNode<BaseData>),\n        }) as TreeNode\n\n        const nodeIndex = treeNode.children!.findIndex(\n          (node) =>\n            chartConfig.getNodeId(node.data) ===\n            chartConfig.getNodeId(clickedTreeNode.data)\n        )\n\n        treeNode.children!.splice(nodeIndex, 1)\n\n        update(treeNode)\n      },\n      source,\n    })\n\n    linkUI.update({\n      getData: () => [\n        links,\n        (treeLink) => chartConfig.getNodeId(treeLink.target.data),\n      ],\n      source,\n    })\n\n    rootTree.eachBefore((treeNode) => {\n      treeNode.data.x0 = treeNode.x\n      treeNode.data.y0 = treeNode.y\n    })\n  }\n\n  update(rootTree)\n}\n","// extracted by mini-css-extract-plugin\nexport var collapsibleTreeChart = \"collapsible-tree-module--collapsibleTreeChart--39sg1\";\nexport var node = \"collapsible-tree-module--node--3s-yN\";\nexport var link = \"collapsible-tree-module--link--tyAR_\";","import { json } from \"d3\"\n\nimport {\n  ChartConfig,\n  NodeShape,\n  findNode,\n  findParentNode,\n} from \"./collapsible-tree-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\ntype RawData = {\n  name: string\n}\n\ntype BaseData = RawData & {\n  id: number\n}\n\ntype RawNode = NodeShape<BaseData>\ntype BaseNode = NodeShape<BaseData>\n\nconst getBaseNode = ({\n  context,\n  rawNode,\n}: {\n  context: { id: number }\n  rawNode: RawNode\n}): BaseNode => {\n  const { id: nodeId } = context\n\n  context.id += 1\n\n  return {\n    ...rawNode,\n    children: (rawNode.children ?? []).map((rawNodeChildren) =>\n      getBaseNode({ context, rawNode: rawNodeChildren })\n    ),\n    id: nodeId,\n  }\n}\n\nconst findMaxId = (node: BaseNode): BaseNode[\"id\"] =>\n  (node.children ?? []).reduce(\n    (...[acc, childrenNode]) => Math.max(findMaxId(childrenNode), acc),\n    node.id\n  )\n\nexport const fetchData = async (): Promise<BaseNode> => {\n  const rawNode = (await json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as RawNode\n\n  return getBaseNode({ context: { id: 0 }, rawNode })\n}\n\ntype Config = ChartConfig<BaseData>\n\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeId: Config[\"getNodeId\"] = (node) => node.id\nconst canBeRemoved: Config[\"canBeRemoved\"] = (node) => node.id !== 0\n\nexport const createChartConfig = (rootData: BaseNode): Config => {\n  const onNodeAdd: Config[\"onNodeAdd\"] = (clickedNode) => {\n    const maxId = findMaxId(rootData)\n    const baseNode = findNode({\n      getId: (node) => node.id,\n      node: rootData,\n      nodeId: clickedNode.id,\n    })\n\n    if (!baseNode) {\n      throw new Error(\"Node not found\")\n    }\n\n    const newId = maxId + 1\n\n    baseNode.children = baseNode.children ?? []\n\n    const newNode = {\n      id: newId,\n      name: `New Node id: ${newId}`,\n    }\n\n    baseNode.children.push(newNode)\n\n    return newNode\n  }\n\n  const onNodeRemove: Config[\"onNodeRemove\"] = (clickedNode) => {\n    const parentNode = findParentNode({\n      getId: (node) => node.id,\n      node: rootData,\n      nodeId: clickedNode.id,\n    })\n\n    if (!parentNode) {\n      throw new Error(\"No parent node\")\n    }\n\n    const nodeIndex = parentNode.children!.findIndex(\n      (node) => node.id === clickedNode.id\n    )\n\n    parentNode.children!.splice(nodeIndex, 1)\n\n    return parentNode\n  }\n\n  return {\n    canBeRemoved,\n    getNodeId,\n    getNodeLabel,\n    onNodeAdd,\n    onNodeRemove,\n    rootData,\n    rootElId: CONTAINER_ID,\n  }\n}\n","import { renderChart } from \"./collapsible-tree-chart\"\nimport {\n  CONTAINER_ID,\n  createChartConfig,\n  fetchData,\n} from \"./collapsible-tree-chart-config\"\n\nconst main = async () => {\n  const rootData = await fetchData()\n\n  const chartConfig = createChartConfig(rootData)\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["treeLinkPathClass","LinkUI","opts","this","initialOpts","linkPath","linkHorizontal","x","diagonalNode","y","linkG","container","append","attr","linkDefaultColor","update","getInitialPosition","getPosition","openCloseAnimationDuration","getData","source","linkSelection","selectAll","data","linkEnter","enter","target","merge","transition","duration","link","exit","remove","getSelection","nodeCircleClass","nodeLabelClass","plusTriggerClass","minusTriggerClass","triggerClasses","NodeUI","hoveredItems","Set","nodeG","circleLinkForEffect","insert","displayRemoveButton","getNodeId","getPointingLinkForNode","getText","hasDescendants","nodeSelection","circleDefaultFill","node","has","nodeEnter","position","on","treeNode","onNodeClick","focusedTreeNode","add","select","forEach","className","style","pointingLink","size","animePath","anime","easing","endDelay","loop","targets","translateX","translateY","delete","text","clone","lower","clickEvent","nodeDatum","stopPropagation","onNodeAdd","onNodeRemove","nodeGroup","textDX","sourcePosition","inlineStyles","findNode","getId","nodeId","children","reduce","acc","otherNode","findParentNode","length","some","margin","height","getDataNode","initialNode","_children","undefined","map","subNode","x0","y0","renderChart","chartConfig","rootData","rootElId","rootEl","document","getElementById","classList","width","getBoundingClientRect","dataNodeRoot","rootHierarchy","hierarchy","buildTree","treeD3","nodeSize","rootTree","descendants","depth","svgG","translateOffset","draggedState","dragHandler","drag","dragEvent","dx","dy","parentNode","call","setupDrag","commonUIOpts","linkUI","nodeUI","canBeRemoved","filter","getNodeLabel","nodes","reverse","links","clickedTreeNode","newNodeData","newDataNode","newNodeHirarchy","parent","push","nodeIndex","findIndex","splice","treeLink","eachBefore","CONTAINER_ID","getBaseNode","context","rawNode","id","rawNodeChildren","findMaxId","childrenNode","Math","max","fetchData","json","ROOT_PATH","name","createChartConfig","clickedNode","maxId","baseNode","Error","newId","newNode","pageContext","main","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err"],"sourceRoot":""}