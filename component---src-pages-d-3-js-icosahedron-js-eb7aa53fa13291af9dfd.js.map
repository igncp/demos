{"version":3,"sources":["webpack://demos/./src/demos/icosahedron/icosahedron.ts","webpack://demos/./src/pages/d3js/icosahedron.js"],"names":["Icosahedron","opts","this","rootElId","setConfig","setDom","setVars","faces","dom","svg","selectAll","data","getIcosahedronFaces","enter","append","each","d","polygon","d3","map","projection","style","_d","index","config","color","vars","velocity","defaultVelocity","y","Math","atan2","PI","x","push","start","timer","height","rotationFactor1","rotationFactor2","t0","Date","now","width","document","getElementById","getBoundingClientRect","zeroVelocity","scale","attr","calcNewPosition","time","position","abs","sin","originalPos","rotate","forEach","p","i","join","on","String","demoInfo","pageContext","main","scripts","className","id"],"mappings":"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","file":"component---src-pages-d-3-js-icosahedron-js-eb7aa53fa13291af9dfd.js","sourcesContent":["import * as d3 from \"d3\"\n\ntype IcosahedronOpts = {\n  rootElId: string\n}\n\ntype Position = [number, number, number]\ntype Point2D = [number, number]\n\ntype Hull = Point2D[]\ntype Face = Hull\ntype Faces = Face[]\ntype FaceWithPolygon = Face & {\n  polygon: Hull\n}\n\ntype SvgSelection = d3.Selection<\n  SVGSVGElement,\n  FaceWithPolygon,\n  HTMLElement,\n  unknown\n>\n\nclass Icosahedron {\n  private rootElId: string\n\n  private config!: {\n    color: d3.ScaleOrdinal<string, string, never>\n    defaultVelocity: number[]\n    height: number\n    rotationFactor1: number\n    rotationFactor2: number\n    t0: number\n    width: number\n    zeroVelocity: number[]\n  }\n\n  private dom!: {\n    faces: null | d3.Selection<\n      SVGPathElement,\n      FaceWithPolygon,\n      SVGSVGElement,\n      unknown\n    >\n    projection: d3.GeoProjection\n    svg: SvgSelection\n  }\n\n  private vars!: {\n    velocity: number[] | null\n  }\n\n  private static getIcosahedronFaces(): Faces {\n    const faces: Faces = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces\n  }\n\n  public constructor(opts: IcosahedronOpts) {\n    this.rootElId = opts.rootElId\n    this.setConfig()\n    this.setDom()\n    this.setVars()\n\n    const faces = this.dom.svg\n      .selectAll(\"path\")\n      .data(Icosahedron.getIcosahedronFaces() as FaceWithPolygon[])\n      .enter()\n      .append(\"path\")\n      .each((d) => {\n        d.polygon = d3.polygonHull(\n          d.map(this.dom.projection) as Faces[0]\n        ) as Hull\n      })\n      .style(\"fill\", (_d: unknown, index: number) => {\n        const color = this.config.color(`${index}`)\n\n        return color\n      })\n\n    this.dom.faces = faces\n    this.vars.velocity = this.config.defaultVelocity\n  }\n\n  public start() {\n    d3.timer(() => this.timer())\n  }\n\n  private setConfig() {\n    const color = d3.scaleOrdinal(d3.schemePastel2)\n\n    this.config = {\n      color,\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      width: (document.getElementById(\n        this.rootElId\n      ) as HTMLElement).getBoundingClientRect().width,\n      zeroVelocity: [0, 0, 0],\n    }\n  }\n\n  private setDom() {\n    const projection = d3.geoOrthographic().scale(this.config.height / 2 - 10)\n    const svg = d3\n      .select(`#${this.rootElId}`)\n      .append(\"svg\")\n      .attr(\"width\", this.config.width)\n      .attr(\"height\", this.config.height) as SvgSelection\n\n    this.dom = {\n      faces: null,\n      projection,\n      svg,\n    }\n  }\n\n  private setVars() {\n    this.vars = {\n      velocity: null,\n    }\n  }\n\n  private calcNewPosition(time: number, position: Position): Position {\n    const { velocity } = this.vars\n\n    return [\n      velocity![0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity![1] + position[1],\n      position![2] + velocity![2],\n    ]\n  }\n\n  private timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(this.calcNewPosition(time, originalPos))\n    this.dom\n      .faces!.each((d) =>\n        d.forEach((p: [number, number], i: number) => {\n          d.polygon[i] = this.dom.projection(p) as Point2D\n\n          return null\n        })\n      )\n      .style(\"display\", (d) => {\n        const area = d3.polygonArea(d.polygon)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (d) => `M${d.polygon.join(\"L\")}Z`)\n      .on(\"click\", () => {\n        if (String(this.vars.velocity) === String(this.config.zeroVelocity)) {\n          this.vars.velocity = this.config.defaultVelocity\n\n          return\n        }\n\n        this.vars.velocity = this.config.zeroVelocity\n      })\n\n    return null\n  }\n}\n\nexport default () => {\n  const chart = new Icosahedron({\n    rootElId: \"chart\",\n  })\n\n  chart.start()\n}\n","import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/icosahedron/icosahedron\"\n\nimport \"@/demos/icosahedron/icosahedron.styl\"\n\nconst Icosahedron = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"icosahedron-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Icosahedron\n"],"sourceRoot":""}