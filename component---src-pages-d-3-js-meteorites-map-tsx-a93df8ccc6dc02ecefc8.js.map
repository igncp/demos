{"version":3,"sources":["webpack://demos/./src/demos/meteorites-map/meteorites-map.module.css","webpack://demos/./src/demos/meteorites-map/meteorites-map.ts","webpack://demos/./src/pages/d3js/meteorites-map.tsx"],"names":["meteorite","fetchData","Promise","all","json","ROOT_PATH","countries","meteorites","margin","height","removeSelection","meteoritesEls","modal","state","isDuringAnimation","selectedMeteorite","attr","styles","anime","targets","translateX","translateY","complete","text","texts","meteoriteClickHandler","clickedMeteorite","meteoritesParsed","projectionFn","rootElId","id","year","timeFormat","Date","mass","Intl","NumberFormat","format","html","name","recclass","nametype","qs","q","trim","allMeteorites","targetMeteorite","targetProj","geometry","coordinates","nearMeteorites","slice","filter","otherMeteorite","map","otherMeteoriteCoordinates","proj","vector","vectorLength","Math","sqrt","pow","vectorNormalized","nearMeteoritesSet","Set","a","vectorsMap","reduce","acc","nearMeteorite","getNearMeteoritessWithVectors","d","has","getTranslateFn","coordIdx","_el","idx","animatedMeteorite","getShouldSet0","top","document","getElementById","getBoundingClientRect","modalHiddenTop","window","scrollY","renderChart","width","geoMercator","translate","path","geoPath","projection","removeSelectionFn","geolocation","type","select","append","style","svg","on","svgMap","group","body","$","dialog","autoOpen","resizable","addInfo","selectAll","data","features","enter","clickEvent","stopPropagation","tooltip","track","pageContext","links","main","scripts"],"mappings":"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","file":"component---src-pages-d-3-js-meteorites-map-tsx-a93df8ccc6dc02ecefc8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport var meteorite = \"meteorites-map-module--meteorite--1d0Jo\";\nexport var active = \"meteorites-map-module--active--3vr62\";\nexport var moved = \"meteorites-map-module--moved--1Atuq\";\nexport var modal = \"meteorites-map-module--modal--2rmkA\";","import { Selection, geoMercator, geoPath, json, select, timeFormat } from \"d3\"\nimport anime from \"animejs\"\nimport qs from \"query-string\"\n\nimport * as styles from \"./meteorites-map.module.css\"\n\n// @TODO:\n// - complete static types\n// - fill more explanations in the dialog\n// - exclude bottom part of the map\n// - rename 'parsed' to something else\n// - review the checklist for the rest of refactors\n\ntype Meteorite = {\n  fall: string\n  geolocation: { coordinates: [number, number]; type: \"Point\" }\n  id: string\n  mass: string\n  name: string\n  nametype: string\n  recclass: string\n  reclat: string\n  reclong: string\n  year: string\n}\ntype MeteoriteParsed = Meteorite & {\n  geometry: Meteorite[\"geolocation\"]\n  type: \"Feature\"\n}\ntype Countries = any\ntype State = {\n  isDuringAnimation: boolean\n  selectedMeteorite: string | null\n}\n\nconst fetchData = async () => {\n  const [countries, meteorites] = (await (Promise.all([\n    json(`${ROOT_PATH}data/d3js/meteorites-map/world_countries.json`),\n    json(`${ROOT_PATH}data/d3js/meteorites-map/meteorites.json`),\n  ]) as unknown)) as unknown[]\n\n  return ({\n    countries,\n    meteorites,\n  } as unknown) as { countries: Countries; meteorites: Meteorite[] }\n}\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n}\n\nconst svgCutBottom = 250 // to remove the south pole which doesn't have any in the data\nconst height = 1000 - margin.top - margin.bottom\nconst modalHiddenTop = 200\n\nconst removeSelection = ({\n  meteoritesEls,\n  modal,\n  state,\n}: {\n  meteoritesEls: Selection<SVGPathElement, MeteoriteParsed, SVGGElement, any>\n  modal: any\n  state: State\n}) => {\n  if (state.isDuringAnimation) {\n    return\n  }\n\n  state.selectedMeteorite = null\n\n  meteoritesEls.attr(\"class\", styles.meteorite)\n\n  anime({\n    targets: `.${styles.meteorite}`,\n    translateX: 0,\n    translateY: 0,\n  })\n\n  state.isDuringAnimation = true\n\n  anime({\n    complete: () => {\n      state.isDuringAnimation = false\n      modal.text(\"\")\n    },\n    targets: `.${styles.modal}`,\n    translateY: 0,\n  })\n}\n\nconst getNearMeteoritessWithVectors = ({\n  allMeteorites,\n  projectionFn,\n  targetMeteorite,\n}: any) => {\n  const targetProj = projectionFn(targetMeteorite.geometry.coordinates)\n\n  const nearMeteorites = allMeteorites\n    .slice(0)\n    .filter((otherMeteorite: any) => !!otherMeteorite.geometry)\n    .map((otherMeteorite: any) => {\n      const {\n        geometry: { coordinates: otherMeteoriteCoordinates },\n      } = otherMeteorite\n      const proj = projectionFn(otherMeteoriteCoordinates)\n      const vector = [proj[0] - targetProj[0], proj[1] - targetProj[1]]\n      const vectorLength = Math.sqrt(\n        Math.pow(vector[0], 2) + Math.pow(vector[1], 2)\n      )\n\n      return {\n        ...otherMeteorite,\n        vector,\n        vectorLength,\n      }\n    })\n    .filter(\n      (otherMeteorite: any) =>\n        otherMeteorite.vectorLength < 20 && otherMeteorite.vectorLength !== 0\n    )\n    .map((otherMeteorite: any) => ({\n      ...otherMeteorite,\n      vectorNormalized: [\n        otherMeteorite.vector[0] / otherMeteorite.vectorLength,\n        otherMeteorite.vector[1] / otherMeteorite.vectorLength,\n      ],\n    }))\n\n  const nearMeteoritesSet = new Set(nearMeteorites.map((a: any) => a.id))\n\n  const vectorsMap = nearMeteorites.reduce((acc: any, nearMeteorite: any) => {\n    acc[nearMeteorite.id] = nearMeteorite.vectorNormalized\n\n    return acc\n  }, {})\n\n  return {\n    nearMeteorites,\n    nearMeteoritesSet,\n    vectorsMap,\n  }\n}\n\nconst texts = {\n  title: \"Meteorite landings in Earth\",\n}\n\nconst meteoriteClickHandler = ({\n  clickedMeteorite,\n  meteoritesEls,\n  meteoritesParsed,\n  modal,\n  projectionFn,\n  rootElId,\n  state,\n}: any) => {\n  if (state.isDuringAnimation) {\n    return\n  }\n\n  if (state.selectedMeteorite === clickedMeteorite.id) {\n    removeSelection({\n      meteoritesEls,\n      modal,\n      state,\n    })\n\n    return\n  }\n\n  state.selectedMeteorite = clickedMeteorite.id\n\n  const year = timeFormat(\"%Y\")(new Date(clickedMeteorite.year))\n  const mass = new Intl.NumberFormat().format(clickedMeteorite.mass)\n\n  modal.html(\n    `\n<h1>${clickedMeteorite.name}</h1>\n<p>Year: ${year}, Class: ${clickedMeteorite.recclass}</p>\n<p>${mass ? `Mass: ${mass}g, ` : \"\"}Name: ${clickedMeteorite.nametype}</p>\n<p><a href=\"https://www.google.com/search?${qs.stringify({\n      q: `${clickedMeteorite.name} Meteorite ${year}`,\n    })}\" target=\"_blank\">Click here to search</a></p>\n`.trim()\n  )\n\n  const { nearMeteoritesSet, vectorsMap } = getNearMeteoritessWithVectors({\n    allMeteorites: meteoritesParsed,\n    projectionFn,\n    targetMeteorite: clickedMeteorite,\n  })\n\n  const getShouldSet0 = (idx: any) => {\n    const { [idx]: animatedMeteorite } = meteoritesParsed\n\n    return (\n      animatedMeteorite.id === clickedMeteorite.id ||\n      !nearMeteoritesSet.has(animatedMeteorite.id)\n    )\n  }\n\n  meteoritesEls.attr(\"class\", (d: any) => {\n    if (nearMeteoritesSet.has(d.id)) {\n      return `${styles.moved} ${styles.meteorite}`\n    }\n\n    return d.id === clickedMeteorite.id\n      ? `${styles.active} ${styles.meteorite}`\n      : styles.meteorite\n  })\n\n  const getTranslateFn = (coordIdx: any) => (_el: unknown, idx: any) => {\n    if (getShouldSet0(idx)) {\n      return 0\n    }\n\n    const { [idx]: animatedMeteorite } = meteoritesParsed\n    const { [animatedMeteorite.id]: vectorNormalized } = vectorsMap\n\n    return vectorNormalized[coordIdx] * 20\n  }\n\n  anime({\n    targets: `.${styles.meteorite}`,\n    translateX: getTranslateFn(0),\n    translateY: getTranslateFn(1),\n  })\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n  const { top } = rootEl.getBoundingClientRect()\n\n  anime({\n    targets: `.${styles.modal}`,\n    translateY: modalHiddenTop + 50 + top + window.scrollY,\n  })\n}\n\nconst addInfo = ({\n  svg,\n  width,\n}: {\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, any>\n  width: number\n}) => {\n  const group = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${width - 50},50)`)\n    .attr(\"cursor\", \"pointer\")\n\n  svg.append(\"g\").html(`\n<filter id=\"pulse\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n  <feTurbulence result=\"cloud\" baseFrequency=\".01\" seed=\"1\"  type=\"fractalNoise\" numOctaves=\"2\">\n  <animate attributeName=\"baseFrequency\" calcMode=\"paced\" begin=\"0s\" dur=\"12s\" values=\".01;.13;.01;\" repeatCount=\"indefinite\"/>\n  </feTurbulence>\n  <feComposite operator=\"in\" in=\"cloud\" in2=\"SourceGraphic\"/>\n</filter>\n    `)\n\n  select(document.body).append(\"div\").attr(\"id\", \"info-dialog\").html(\n    `\n<p>The green circles refer to meteorites which were moved in the map to allow seeing the selected meteorite (red).</p>\n`.trim()\n  )\n\n  $(\"#info-dialog\").dialog({\n    autoOpen: false,\n    modal: true,\n    resizable: false,\n  })\n\n  group\n    .append(\"circle\")\n    .attr(\"fill\", \"#fff\")\n    .attr(\"stroke\", \"#ccc\")\n    .attr(\"r\", \"20\")\n    .attr(\"filter\", \"url(#pulse)\")\n\n  group\n    .append(\"text\")\n    .text(\"?\")\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", 20)\n    .attr(\"transform\", `translate(0,5)`)\n\n  group.on(\"click\", () => {\n    $(\"#info-dialog\").dialog(\"open\")\n  })\n}\n\ntype RenderChart = (o: {\n  countries: Countries\n  meteorites: Meteorite[]\n  rootElId: string\n}) => void\n\nconst renderChart: RenderChart = ({ countries, meteorites, rootElId }) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n  const projectionFn = geoMercator().translate([width / 2, height / 2])\n  const path = geoPath().projection(projectionFn)\n\n  const state: State = {\n    isDuringAnimation: false,\n    selectedMeteorite: null,\n  }\n\n  const removeSelectionFn = () => {\n    removeSelection({\n      meteoritesEls,\n      modal,\n      state,\n    })\n  }\n\n  const meteoritessClickHandlerFn = (\n    clickEvent: MouseEvent,\n    clickedMeteorite: MeteoriteParsed\n  ) => {\n    clickEvent.stopPropagation()\n    meteoriteClickHandler({\n      clickedMeteorite,\n      meteoritesEls,\n      meteoritesParsed,\n      modal,\n      projectionFn,\n      rootElId,\n      state,\n    })\n  }\n\n  const meteoritesParsed: MeteoriteParsed[] = meteorites.map((a) => ({\n    ...a,\n    geometry: a.geolocation,\n    type: \"Feature\",\n  }))\n\n  const modal = select(`#${rootElId}`)\n    .append(\"div\")\n    .attr(\"class\", styles.modal)\n    .style(\"top\", `${-modalHiddenTop}px`)\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height - svgCutBottom)\n    .on(\"click\", removeSelectionFn)\n\n  const svgMap = svg.append(\"g\").attr(\"class\", \"map\")\n\n  svg\n    .append(\"text\")\n    .text(texts.title)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"20px\")\n    .attr(\"transform\", `translate(${width / 2},40)`)\n    .style(\"font-weight\", \"bold\")\n\n  addInfo({\n    svg,\n    width,\n  })\n\n  svgMap\n    .append(\"g\")\n    .attr(\"class\", \"countries\")\n    .selectAll(\"path\")\n    .data(countries.features)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", path as any)\n    .attr(\"fill\", \"#ccc\")\n    .style(\"stroke\", \"white\")\n    .style(\"stroke-width\", 1.5)\n    .style(\"opacity\", 0.8)\n    .style(\"stroke\", \"white\")\n    .style(\"stroke-width\", 0.3)\n    .on(\"click\", removeSelectionFn)\n\n  const meteoritessWrapper = svgMap.append(\"g\").on(\"click\", removeSelectionFn)\n\n  const meteoritesEls = meteoritessWrapper\n    .selectAll(\"path\")\n    .data(meteoritesParsed)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", path as any)\n    .attr(\"class\", styles.meteorite)\n    .style(\"stroke\", \"white\")\n    .style(\"cursor\", \"pointer\")\n    .style(\"stroke-width\", 1.5)\n    .style(\"opacity\", 0.8)\n    .attr(\"title\", (d) => d.name)\n    .on(\"click\", meteoritessClickHandlerFn)\n\n  $(`.${styles.meteorite}`).tooltip({\n    track: true,\n  })\n}\n\nconst main = async () => {\n  const { countries, meteorites } = await fetchData()\n\n  renderChart({\n    countries,\n    meteorites,\n    rootElId: \"chart\",\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/meteorites-map/meteorites-map\"\n\nconst Area = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default Area\n"],"sourceRoot":""}