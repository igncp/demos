{"version":3,"file":"component---src-pages-d-3-js-trend-line-tsx-84027d047d2faaf861e9.js","mappings":"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","sources":["webpack://demos/./src/demos/trend-line/trend-line.module.css","webpack://demos/./src/demos/trend-line/trend-line-chart.ts","webpack://demos/./src/demos/trend-line/trend-line-chart-config.ts","webpack://demos/./src/demos/trend-line/trend-line.ts","webpack://demos/./src/pages/d3js/trend-line.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var trendLineChart = \"trend-line-module--trendLineChart--39352\";\nexport var axis = \"trend-line-module--axis--df010\";\nexport var line = \"trend-line-module--line--8249c\";\nexport var rline = \"trend-line-module--rline--34ea5\";","import {\n  Line,\n  Selection,\n  axisBottom,\n  axisLeft,\n  line as d3Line,\n  extent,\n  max,\n  min,\n  range,\n  scaleLinear,\n  scaleQuantile,\n  scaleTime,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./trend-line.module.css\"\n\nconst margin = {\n  bottom: 50,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst height = 500 - margin.top - margin.bottom\n\nconst animationTime = 2000\n\nconst getInterpolation =\n  <ChartData>({\n    line,\n    lineData,\n  }: {\n    line: Line<ChartData>\n    lineData: ChartData[]\n  }) =>\n  () => {\n    const interpolate = scaleQuantile()\n      .domain([0, 1])\n      .range(range(1, lineData.length + 1))\n\n    return (t: number): string => {\n      const interpolatedLine = lineData.slice(0, interpolate(t))\n\n      return line(interpolatedLine)!\n    }\n  }\n\ntype ChartConfig<ChartData> = {\n  chartText: string\n  getDashedLineX: (lineData: ChartData) => Date\n  getDashedLineY: (lineData: ChartData) => number\n  getFullLineX: (lineData: ChartData) => Date\n  getFullLineY: (lineData: ChartData) => number\n  initialZoomed: boolean\n  lineData: ChartData[]\n  rootElId: string\n}\n\ntype ChartElements = {\n  chartText: Selection<SVGTextElement, unknown, HTMLElement, undefined>\n  dashedLine: Selection<SVGPathElement, unknown, HTMLElement, undefined>\n  fullLine: Selection<SVGPathElement, unknown, HTMLElement, undefined>\n  rootEl: Selection<HTMLElement, unknown, HTMLElement, undefined>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, undefined>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, undefined>\n  xAxis: Selection<SVGGElement, unknown, HTMLElement, undefined>\n  yAxis: Selection<SVGGElement, unknown, HTMLElement, undefined>\n}\n\nclass TrendLineChart<ChartData> {\n  private readonly elements: ChartElements\n  private readonly config: ChartConfig<ChartData>\n  private readonly state: { isZoomed: boolean } = {\n    isZoomed: false,\n  }\n\n  public constructor(config: ChartConfig<ChartData>) {\n    const { initialZoomed, rootElId } = config\n\n    const rootEl = select<HTMLElement, unknown>(`#${rootElId}`)\n    const svg = rootEl.append(\"svg\")\n    const svgG = svg.append(\"g\")\n    const xAxis = svgG.append(\"g\")\n    const yAxis = svgG.append(\"g\")\n    const fullLine = svgG.append(\"path\")\n    const dashedLine = svgG.append(\"path\")\n    const chartText = svgG.append(\"text\")\n\n    this.elements = {\n      chartText,\n      dashedLine,\n      fullLine,\n      rootEl,\n      svg,\n      svgG,\n      xAxis,\n      yAxis,\n    }\n\n    this.config = config\n    this.renderContent(initialZoomed)\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public renderContent(isZoomed: boolean) {\n    this.state.isZoomed = isZoomed\n\n    this.render(true)\n  }\n\n  private render(withAnimation: boolean) {\n    const finalAnimationTime = withAnimation ? animationTime : 0\n    const {\n      config: {\n        getDashedLineX,\n        getDashedLineY,\n        getFullLineX,\n        getFullLineY,\n        lineData,\n        rootElId,\n      },\n      config,\n      elements: {\n        chartText,\n        dashedLine,\n        fullLine,\n        svg,\n        svgG,\n        xAxis: xAxisSel,\n        yAxis: yAxisSel,\n      },\n      state: { isZoomed },\n    } = this\n    const container = document.getElementById(rootElId) as HTMLElement\n\n    container.classList.add(styles.trendLineChart)\n\n    const width =\n      container.getBoundingClientRect().width - margin.left - margin.right\n\n    svg\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n    svgG.attr(\"transform\", `translate(${margin.left},${margin.right})`)\n\n    const x = scaleTime()\n      .range([0, width])\n      .domain(extent(lineData, getFullLineX) as [Date, Date])\n    const y = scaleLinear()\n      .range([height, 0])\n      .domain([\n        isZoomed ? (min(lineData, getFullLineY) as number) : 0,\n        max(lineData, getFullLineY) as number,\n      ])\n    const xAxis = axisBottom(x)\n    const yAxis = axisLeft(y)\n\n    const line = d3Line<ChartData>()\n      .x((lineItem) => x(getFullLineX(lineItem)))\n      .y((lineItem) => y(getFullLineY(lineItem)))\n\n    xAxisSel\n      .attr(\"class\", `x ${styles.axis}`)\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis)\n    yAxisSel.attr(\"class\", `y ${styles.axis}`).call(yAxis)\n\n    fullLine\n      .datum(lineData)\n      .interrupt()\n      .transition()\n      .duration(finalAnimationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.line)\n\n    const regressionLine = d3Line<ChartData>()\n      .x((lineItem) => x(getDashedLineX(lineItem)))\n      .y((lineItem) => y(getDashedLineY(lineItem)))\n\n    dashedLine\n      .datum(lineData)\n      .attr(\"d\", null)\n      .interrupt()\n      .transition()\n      .delay(finalAnimationTime)\n      .duration(finalAnimationTime)\n      .attrTween(\n        \"d\",\n        getInterpolation({\n          line: regressionLine,\n          lineData,\n        })\n      )\n      .attr(\"class\", styles.rline)\n\n    chartText\n      .attr(\"transform\", `translate(${width * 0.7},${height * 0.7})`)\n      .style(\"opacity\", finalAnimationTime ? 0 : 1)\n      .interrupt()\n      .transition()\n      .delay(finalAnimationTime * 2)\n      .text(config.chartText)\n      .style(\"opacity\", 1)\n  }\n\n  private readonly handleResize = () => {\n    this.render(false)\n  }\n}\n\nexport { TrendLineChart, ChartConfig }\n","import { timeParse, tsv } from \"d3\"\n\nimport { ChartConfig } from \"./trend-line-chart\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype InitialDataItem = {\n  occurred: string\n  value: string // eslint-disable-line id-denylist\n}\n\ntype DataItem = {\n  arbitraryValue: number\n  occurred: Date\n}\n\nconst createLinearRegression = (lineData: DataItem[]) => {\n  const linearRegression: {\n    intercept?: number\n    r2?: number\n    slope?: number\n  } = {}\n  const { length: itemsNum } = lineData\n\n  let sumX = 0\n  let sumY = 0\n  let sumXY = 0\n  let sumXX = 0\n  let sumYY = 0\n\n  lineData.forEach((lineItem) => {\n    sumY += lineItem.arbitraryValue\n    sumYY += lineItem.arbitraryValue * lineItem.arbitraryValue\n    sumXY += lineItem.occurred.getTime() * lineItem.arbitraryValue\n\n    sumX += lineItem.occurred.getTime()\n    sumXX += lineItem.occurred.getTime() * lineItem.occurred.getTime()\n  })\n\n  linearRegression.slope =\n    (itemsNum * sumXY - sumX * sumY) / (itemsNum * sumXX - sumX * sumX)\n  linearRegression.intercept = (sumY - linearRegression.slope * sumX) / itemsNum\n  linearRegression.r2 = Math.pow(\n    (itemsNum * sumXY - sumX * sumY) /\n      Math.sqrt(\n        (itemsNum * sumXX - sumX * sumX) * (itemsNum * sumYY - sumY * sumY)\n      ),\n    2\n  )\n\n  return linearRegression\n}\n\nconst fetchData = async (): Promise<DataItem[]> => {\n  const response = (await tsv(\n    `${ROOT_PATH}data/d3js/trend-line/data.tsv`\n  )) as InitialDataItem[]\n\n  const timeFormat = timeParse(\"%Y-%m-%d\")\n\n  return response.map((responseItem) => ({\n    arbitraryValue: +responseItem.value,\n    occurred: timeFormat(responseItem.occurred)!,\n  }))\n}\n\ntype Config = ChartConfig<DataItem>\n\nconst getFullLineX: Config[\"getFullLineX\"] = (lineItem) => lineItem.occurred\nconst getFullLineY: Config[\"getFullLineY\"] = (lineItem) =>\n  lineItem.arbitraryValue\nconst getDashedLineX: Config[\"getDashedLineX\"] = (lineItem) => lineItem.occurred\n\nconst getChartConfig = ({\n  initialZoomed,\n  lineData,\n}: {\n  initialZoomed: boolean\n  lineData: DataItem[]\n}): Config => {\n  const linearRegression = createLinearRegression(lineData)\n  const getDashedLineY: Config[\"getDashedLineY\"] = (lineItem) =>\n    linearRegression.intercept! + linearRegression.slope! * +lineItem.occurred\n  const chartText = `Slope: ${linearRegression.slope!.toExponential(3)}`\n\n  return {\n    chartText,\n    getDashedLineX,\n    getDashedLineY,\n    getFullLineX,\n    getFullLineY,\n    initialZoomed,\n    lineData,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { CONTAINER_ID, fetchData, getChartConfig }\n","import { selectAll } from \"d3\"\n\nimport { TrendLineChart } from \"./trend-line-chart\"\nimport {\n  CONTAINER_ID,\n  fetchData,\n  getChartConfig,\n} from \"./trend-line-chart-config\"\n\nconst main = async () => {\n  const lineData = await fetchData()\n\n  const getIsZoomed = () =>\n    (document.querySelector('input[value=\"zoom\"]') as HTMLInputElement).checked\n\n  const chartConfig = getChartConfig({\n    initialZoomed: getIsZoomed(),\n    lineData,\n  })\n\n  const chart = new TrendLineChart(chartConfig)\n\n  selectAll('input[name=\"mode\"]').on(\"change\", () => {\n    const isZoomed = getIsZoomed()\n\n    chart.renderContent(isZoomed)\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/trend-line/trend-line\"\n\nconst TrendLine = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form>\n      <label>\n        <input defaultChecked name=\"mode\" type=\"radio\" value=\"zoom\" /> Zoom\n      </label>\n      <label>\n        <input name=\"mode\" type=\"radio\" value=\"normal\" /> Normal\n      </label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default TrendLine\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["axis","margin","height","getInterpolation","line","lineData","interpolate","scaleQuantile","domain","range","length","t","interpolatedLine","slice","TrendLineChart","config","state","isZoomed","handleResize","render","initialZoomed","rootElId","rootEl","select","svg","append","svgG","xAxis","yAxis","fullLine","dashedLine","chartText","this","elements","renderContent","window","addEventListener","withAnimation","finalAnimationTime","getDashedLineX","getDashedLineY","getFullLineX","getFullLineY","xAxisSel","yAxisSel","container","document","getElementById","classList","add","width","getBoundingClientRect","attr","x","scaleTime","extent","y","scaleLinear","min","max","axisBottom","axisLeft","d3Line","lineItem","styles","call","datum","interrupt","transition","duration","attrTween","regressionLine","delay","style","text","CONTAINER_ID","fetchData","tsv","ROOT_PATH","response","timeFormat","timeParse","map","responseItem","arbitraryValue","value","occurred","getChartConfig","linearRegression","itemsNum","sumX","sumY","sumXY","sumXX","sumYY","forEach","getTime","slope","intercept","r2","Math","pow","sqrt","createLinearRegression","toExponential","main","chartConfig","getIsZoomed","querySelector","checked","chart","selectAll","on","pageContext","defaultChecked","name","type","id","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined"],"sourceRoot":""}