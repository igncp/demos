{"version":3,"sources":["webpack://demos/./src/demos/population-circles/population-circles.module.css","webpack://demos/./src/demos/population-circles/population-circles.ts","webpack://demos/./src/pages/d3js/population-circles.tsx"],"names":["slider","circle","dropShadowBaseId","margin","height","formatPopulation","populationNum","Number","toFixed","toLocaleString","undefined","maximumFractionDigits","minimumFractionDigits","typeNouns","females","males","total","getYearStr","dateStr","Date","getFullYear","renderChart","municipalities","onClick","rootElId","width","document","getElementById","getBoundingClientRect","state","lastPosition","k","x","y","populationRange","populationType","timeRangeIndex","color","scaleOrdinal","domain","map","municipality","name","range","schemeSet3","zoomBehavior","zoom","extent","on","zoomEvent","transition","select","this","duration","transform","attr","svg","append","join","call","addDropShadow","header","text","svgContent","transitionChart","itemsWithCount","filter","values","dataValues","count","valueToIdx","reduce","acc","val","idx","push","sortedDataValues","sort","a","b","percentiles","percentile","length","forEach","idx2","filteredData","_municipality","structure","hierarchy","children","sum","dataItem","leaves","pack","size","padding","date","data","year","populationTotal","item","populationText","totalNum","leafItem","getDataKey","municipalityNode","leaf","selectAll","exit","remove","getTitle","itemsName","ease","easeCircleInOut","enter","_event","selection","styles","hoverAnimation","anime","complete","strokeWidth","targets","node","seek","generateColor","generateDarkerColor","baseColor","chroma","darken","hex","setupLetter","letter","style","r","setupCircle","forwardData","circles","texts","easeSinInOut","$","tooltip","track","onPopulationPercentilesChange","newValues","onTimeSeriesChange","newIndex","onTypeChange","newType","slope","deviation","html","hotkeys","json","ROOT_PATH","window","open","qs","q","e","target","value","change","v","max","min","pageContext","links","main","scripts","id","label","radioIndex","className","key","defaultChecked","type","htmlFor"],"mappings":"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","file":"component---src-pages-d-3-js-population-circles-tsx-f30e413742f5a73c8d68.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport var radio = \"population-circles-module--radio--1S8Dr\";\nexport var slider = \"population-circles-module--slider--3hzyU\";\nexport var circle = \"population-circles-module--circle--Q63YD\";\nexport var header = \"population-circles-module--header--1mim1\";","import {\n  BaseType,\n  D3ZoomEvent,\n  HierarchyCircularNode,\n  Selection,\n  Transition,\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  json,\n  pack,\n  scaleOrdinal,\n  schemeSet3,\n  select,\n  zoom,\n} from \"d3\"\nimport anime from \"animejs\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\nimport chroma from \"chroma-js\"\n\nimport * as styles from \"./population-circles.module.css\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\ntype Municipality = {\n  name: string\n  values: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n}\n\ntype MunicipalityWithAnimation = Municipality & {\n  hoverAnimation?: anime.AnimeInstance | null\n}\n\ntype MunicipalityNode = HierarchyCircularNode<MunicipalityWithAnimation>\ntype MunicipalityTransition = Transition<\n  BaseType,\n  MunicipalityNode,\n  BaseType,\n  MunicipalityNode\n>\n\ntype PopulationType = keyof Municipality[\"values\"]\n\ntype State = {\n  lastPosition: { k: number; x: number; y: number }\n  populationRange: [number, number]\n  populationType: PopulationType\n  timeRangeIndex: number\n}\n\nconst fetchData = () =>\n  (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown) as Promise<Municipality[]>\n\nconst dropShadowBaseId = \"dropShadowBase\"\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\nconst height = 400\n\nconst formatPopulation = (populationNum: number) =>\n  Number(populationNum.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\nconst typeNouns: Record<string, string> = {\n  females: \"females\",\n  males: \"males\",\n  total: \"people\",\n}\n\nconst getYearStr = (dateStr: string) => new Date(dateStr).getFullYear()\n\ntype RenderChart = (o: {\n  municipalities: Municipality[]\n  onClick: (m: Municipality) => void\n  rootElId: string\n}) => {\n  onPopulationPercentilesChange: (vals: [number, number]) => void\n  onTimeSeriesChange: (val: number) => void\n  onTypeChange: (type: string) => void\n}\n\nconst renderChart: RenderChart = ({ municipalities, onClick, rootElId }) => {\n  const chartEl = document.getElementById(rootElId) as HTMLElement\n  const { width } = chartEl.getBoundingClientRect()\n\n  const state: State = {\n    lastPosition: { k: 1, x: 0, y: 0 },\n    populationRange: [0, 1],\n    populationType: \"total\",\n    timeRangeIndex: 0,\n  }\n\n  // this zoom function is not working well in all directions\n  const zoomed = function (\n    this: SVGSVGElement,\n    zoomEvent: D3ZoomEvent<SVGSVGElement, unknown>\n  ) {\n    const transition = select(this).transition().duration(150)\n    const { lastPosition } = state\n    let {\n      transform: { x, y },\n    } = zoomEvent\n    const {\n      transform: { k },\n    } = zoomEvent\n\n    if (k !== state.lastPosition.k) {\n      x = lastPosition.x\n      y = lastPosition.y\n    }\n\n    transition.attr(\"transform\", `translate(${x}, ${y}) scale(${k})`)\n\n    lastPosition.k = k\n    lastPosition.x = x\n    lastPosition.y = y\n  }\n\n  const color = scaleOrdinal<string, string>()\n    .domain(municipalities.map((municipality) => municipality.name))\n    .range(schemeSet3)\n\n  const zoomBehavior = zoom<SVGSVGElement, unknown>()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height + margin.top].join(\", \"))\n    .attr(\"font-size\", 10)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"text-anchor\", \"middle\")\n    .call(zoomBehavior)\n\n  addDropShadow(svg, dropShadowBaseId, 0.5, 2)\n\n  const header = svg\n    .append(\"text\")\n    .attr(\"class\", styles.header)\n    .text(\"\")\n    .attr(\"transform\", `translate(${width / 2}, 50)`)\n\n  const svgContent = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const transitionChart = () => {\n    const itemsWithCount = municipalities.filter((municipality) => {\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return !!(dataItem as unknown)\n    })\n    const dataValues = itemsWithCount.map((municipality) => {\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return dataItem.count\n    })\n    const valueToIdx = dataValues.reduce((acc, val, idx) => {\n      acc[val] = acc[val] ?? []\n      acc[val]!.push(idx)\n\n      return acc\n    }, {} as { [k: string]: number[] | undefined })\n    const sortedDataValues = dataValues.sort((a, b) => a - b)\n\n    const percentiles = sortedDataValues.reduce((acc, val, idx) => {\n      const percentile = idx / sortedDataValues.length\n      const { [val]: unsortedIndexes } = valueToIdx\n\n      unsortedIndexes!.forEach((idx2) => {\n        acc[idx2] = percentile\n      })\n\n      return acc\n    }, [] as number[])\n\n    const filteredData = itemsWithCount.filter((_municipality, idx) => {\n      const { [idx]: percentile } = percentiles\n\n      return (\n        typeof percentile === \"number\" &&\n        percentile >= state.populationRange[0] &&\n        percentile <= state.populationRange[1]\n      )\n    })\n\n    const structure = hierarchy({\n      children: filteredData,\n      name: \"\",\n      values: {\n        females: [],\n        males: [],\n        total: [],\n      } as Municipality[\"values\"],\n    }).sum((municipality) => {\n      if (!(municipality.values as unknown)) {\n        return 1\n      }\n\n      const {\n        values: {\n          [state.populationType]: { [state.timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return !(dataItem as unknown) ? 0 : dataItem.count\n    })\n    const root = pack<MunicipalityWithAnimation>()\n      .size(\n        state.populationType === \"total\"\n          ? [width, height]\n          : [width / 2, height / 2]\n      )\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    const {\n      data: {\n        values: {\n          [state.populationType]: {\n            [state.timeRangeIndex]: { date },\n          },\n        },\n      },\n    } = leaves[0]\n\n    const year = getYearStr(date)\n    const populationTotal = filteredData.reduce(\n      (acc, item) =>\n        acc +\n        item.values[state.populationType as PopulationType][\n          state.timeRangeIndex\n        ].count,\n      0\n    )\n    const populationText = `${formatPopulation(populationTotal)} ${\n      typeNouns[state.populationType]\n    }`\n\n    const { length: totalNum } = leaves.filter(\n      (leafItem) =>\n        leafItem.data.values[state.populationType].length >=\n        state.timeRangeIndex + 1\n    )\n\n    header.text(\n      `Population in Malaga: ${year} - ${populationText}${\n        state.populationRange[0] === 0 && state.populationRange[1] === 1\n          ? \"\"\n          : ` - From ${(state.populationRange[0] * 100).toFixed(\n              0\n            )} percentile to ${(state.populationRange[1] * 100).toFixed(\n              0\n            )} percentile`\n      } - ${totalNum} municipalities`\n    )\n\n    const getDataKey = (municipalityNode: unknown) =>\n      (municipalityNode as MunicipalityNode).data.name!\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves, getDataKey)\n\n    leaf.exit().remove()\n\n    const getTitle = (municipalityNode: MunicipalityNode) => {\n      const {\n        data: {\n          values: {\n            [state.populationType]: { [state.timeRangeIndex]: dataItem },\n          },\n        },\n      } = municipalityNode\n\n      if (!dataItem as unknown) {\n        return \"\"\n      }\n\n      const { [state.populationType]: itemsName } = typeNouns\n\n      return `${municipalityNode.data.name} - ${formatPopulation(\n        dataItem.count\n      )} ${itemsName} - ${getYearStr(dataItem.date)}`\n    }\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (municipalityNode) => {\n        if (state.populationType !== \"total\") {\n          return `translate(${municipalityNode.x + width / 4},${\n            municipalityNode.y + height / 4\n          })`\n        }\n\n        return `translate(${municipalityNode.x + 1},${municipalityNode.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\n        \"transform\",\n        (municipalityNode) =>\n          `translate(${municipalityNode.x + 1},${municipalityNode.y + 1})`\n      )\n      .on(\"mouseenter\", function (_event, municipalityNode) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this)\n          .select(\".letter\")\n          .attr(\"filter\", `url(#${dropShadowBaseId})`)\n\n        const hoverAnimation = anime({\n          complete: () => {\n            municipalityNode.data.hoverAnimation = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        municipalityNode.data = {\n          ...municipalityNode.data,\n          hoverAnimation,\n        }\n      })\n      .on(\"mouseleave\", function (_event, municipalityNode) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this).select(\".letter\").attr(\"filter\", null)\n\n        const {\n          data: { hoverAnimation },\n        } = municipalityNode\n\n        if (hoverAnimation) {\n          hoverAnimation.seek(0)\n          anime.remove(selection.node())\n          municipalityNode.data = {\n            ...municipalityNode.data,\n            hoverAnimation: null,\n          }\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (_event, municipalityNode) => {\n        onClick(municipalityNode.data)\n      })\n\n    const generateColor = (municipalityNode: MunicipalityNode) =>\n      color(municipalityNode.data.name)\n\n    const generateDarkerColor = (municipalityNode: MunicipalityNode) => {\n      const baseColor = generateColor(municipalityNode)\n\n      return chroma(baseColor).darken(1.5).hex()\n    }\n\n    const setupLetter = (\n      letter:\n        | MunicipalityTransition\n        | Selection<SVGTextElement, MunicipalityNode, SVGGElement, unknown>\n    ) => {\n      const el = letter.text(\n        (municipalityNode) => municipalityNode.data.name[0]!\n      ) as MunicipalityTransition\n\n      el.style(\n        \"font-size\",\n        (municipalityNode) => `${municipalityNode.r.toFixed(0)}px`\n      )\n        .attr(\"dy\", (municipalityNode) => municipalityNode.r / 3)\n        .attr(\"fill\", generateDarkerColor)\n    }\n\n    const setupCircle = (\n      circle:\n        | MunicipalityTransition\n        | Selection<SVGCircleElement, MunicipalityNode, SVGGElement, unknown>\n    ) => {\n      const elem = circle.attr(\n        \"r\",\n        (municipalityNode) => municipalityNode.r!\n      ) as MunicipalityTransition\n\n      elem.attr(\"fill\", generateColor).attr(\"stroke\", generateDarkerColor)\n    }\n\n    setupCircle(enter.append(\"circle\").attr(\"class\", styles.circle))\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const forwardData = (municipalityNode: MunicipalityNode) => municipalityNode\n\n    const circles = leaf\n      .selectAll(`.${styles.circle}`)\n      .data(forwardData, getDataKey)\n    const texts = leaf.selectAll(\".letter\").data(forwardData, getDataKey)\n\n    setupCircle(circles.transition().duration(1000).ease(easeSinInOut))\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  transitionChart()\n\n  return {\n    onPopulationPercentilesChange: (newValues: [number, number]) => {\n      state.populationRange = newValues\n      transitionChart()\n    },\n    onTimeSeriesChange: (newIndex: number) => {\n      state.timeRangeIndex = newIndex\n      transitionChart()\n    },\n    onTypeChange: (newType: string) => {\n      state.populationType = newType as PopulationType\n      transitionChart()\n    },\n  }\n}\n\nconst addDropShadow = (\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>,\n  name: string,\n  slope: number,\n  deviation: number\n) => {\n  svg.append(\"filter\").html(`\n<filter id=\"${name}\" height=\"130%\">\n  <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${deviation}\"/>\n  <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n  <feComponentTransfer>\n    <feFuncA type=\"linear\" slope=\"${slope}\"/>\n  </feComponentTransfer>\n  <feMerge>\n    <feMergeNode/>\n    <feMergeNode in=\"SourceGraphic\"/>\n  </feMerge>\n</filter>\n`)\n}\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const {\n    onPopulationPercentilesChange,\n    onTimeSeriesChange,\n    onTypeChange,\n  } = renderChart({\n    municipalities,\n    onClick: (municipality) => {\n      if (!hotkeys.isPressed(\"control\")) {\n        return\n      }\n\n      window.open(\n        `https://www.google.com/search?${qs.stringify({\n          q: `Malaga ${municipality.name}`,\n        })}`\n      )\n    },\n    rootElId: \"chart\",\n  })\n\n  select(\"form\").on(\"change\", (e) => {\n    onTypeChange(e.target.value)\n  })\n\n  $(\".population-slider\").slider({\n    change: (_event, { values }) => {\n      const newValues = (values as [number, number]).map((v) => v / 100) as [\n        number,\n        number\n      ]\n\n      onPopulationPercentilesChange(newValues)\n    },\n    range: true,\n    values: [0, 100],\n  })\n\n  const max = municipalities[0].values.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (_event, { value }) => {\n      onTimeSeriesChange(value as number)\n    },\n    max,\n    min: 0,\n    value: 0,\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[\"/vendors/jquery-ui/themes/base/jquery-ui.min.css\"]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[\"/vendors/jquery-ui/jquery-ui.min.js\"]}\n  >\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map(({ id, label }, radioIndex) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default PopulationCircles\n"],"sourceRoot":""}