{"version":3,"sources":["webpack://demos/./src/demos/icosahedron/icosahedron.js","webpack://demos/./src/pages/d3js/icosahedron.js"],"names":["Icosahedron","this","setConfig","setDom","setVars","dom","faces","svg","selectAll","data","icosahedronFaces","enter","append","each","d","polygon","d3","map","projection","style","_d","index","config","color","vars","velocity","defaultVelocity","y","Math","atan2","PI","x","push","height","rotationFactor1","rotationFactor2","t0","Date","now","width","$","innerWidth","zeroVelocity","scale","attr","calcNewPosition","time","position","abs","sin","timer","originalPos","rotate","forEach","p","i","join","on","String","start","demoInfo","pageContext","main","scripts","className","id"],"mappings":"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","file":"component---src-pages-d-3-js-icosahedron-js-a46eae5e0b76bb4015b8.js","sourcesContent":["import * as d3 from \"d3\"\n\nclass Icosahedron {\n  static icosahedronFaces() {\n    const faces = []\n    const y = (Math.atan2(1, 2) * 180) / Math.PI\n\n    for (let x = 0; x < 360; x += 360 / 5) {\n      faces.push(\n        [\n          [x + 0, -90],\n          [x + 0, -y],\n          [x + 72, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 72, -y],\n          [x + 0, -y],\n        ],\n        [\n          [x + 36, y],\n          [x + 0, -y],\n          [x - 36, y],\n        ],\n        [\n          [x + 36, y],\n          [x - 36, y],\n          [x - 36, 90],\n        ]\n      )\n    }\n\n    return faces\n  }\n\n  constructor() {\n    this.setConfig()\n    this.setDom()\n    this.setVars()\n    this.dom.faces = this.dom.svg\n      .selectAll(\"path\")\n      .data(Icosahedron.icosahedronFaces())\n      .enter()\n      .append(\"path\")\n      .each((d) => {\n        d.polygon = d3.polygonHull(d.map(this.dom.projection))\n      })\n      .style(\"fill\", (_d, index) => {\n        const color = this.config.color(index)\n\n        return color\n      })\n    this.vars.velocity = this.config.defaultVelocity\n  }\n\n  setConfig() {\n    this.config = {\n      color: d3.scaleOrdinal(d3.schemePastel2),\n      defaultVelocity: [1, 0.4, 0.07],\n      height: 500,\n      rotationFactor1: 1 / 1000,\n      rotationFactor2: 4,\n      t0: Date.now(),\n      width: $(\"#chart\").innerWidth(),\n      zeroVelocity: [0, 0, 0],\n    }\n  }\n\n  setDom() {\n    this.dom = {\n      faces: \"\",\n      projection: d3.geoOrthographic().scale(this.config.height / 2 - 10),\n      svg: d3\n        .select(\"#chart\")\n        .append(\"svg\")\n        .attr(\"width\", this.config.width)\n        .attr(\"height\", this.config.height),\n    }\n  }\n\n  setVars() {\n    this.vars = {\n      velocity: \"\",\n    }\n  }\n\n  calcNewPosition(velocity, time, position) {\n    return [\n      velocity[0] *\n        Math.abs(\n          Math.sin(time * this.config.rotationFactor1) *\n            this.config.rotationFactor2\n        ) +\n        position[0],\n      velocity[1] + position[1],\n      position[2] + velocity[2],\n    ]\n  }\n\n  timer() {\n    const time = Date.now() - this.config.t0\n    const originalPos = this.dom.projection.rotate()\n\n    this.dom.projection.rotate(\n      this.calcNewPosition(this.vars.velocity, time, originalPos)\n    )\n    this.dom.faces\n      .each((d) =>\n        d.forEach((p, i) => {\n          d.polygon[i] = this.dom.projection(p)\n\n          return null\n        })\n      )\n      .style(\"display\", (d) => {\n        const area = d3.polygonArea(d.polygon)\n\n        if (area > 0) {\n          return null\n        }\n\n        return \"none\"\n      })\n      .attr(\"d\", (d) => `M${d.polygon.join(\"L\")}Z`)\n      .on(\"click\", () => {\n        if (String(this.vars.velocity) === String(this.config.zeroVelocity)) {\n          this.vars.velocity = this.config.defaultVelocity\n\n          return\n        }\n\n        this.vars.velocity = this.config.zeroVelocity\n      })\n\n    return null\n  }\n\n  start() {\n    d3.timer(() => this.timer())\n  }\n}\n\nexport default () => {\n  const chart = new Icosahedron()\n\n  chart.start()\n}\n","import React from \"react\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/icosahedron/icosahedron\"\n\nimport \"@/demos/icosahedron/icosahedron.styl\"\n\nconst Icosahedron = ({ pageContext: { demoInfo } }) => (\n  <Demo demoInfo={demoInfo} main={main} scripts={[\"/vendors/d3/d3.min.js\"]}>\n    <div className=\"icosahedron-chart\" id=\"chart\" />\n  </Demo>\n)\n\nexport default Icosahedron\n"],"sourceRoot":""}