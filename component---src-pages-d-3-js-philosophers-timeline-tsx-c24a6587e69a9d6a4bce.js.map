{"version":3,"file":"component---src-pages-d-3-js-philosophers-timeline-tsx-c24a6587e69a9d6a4bce.js","mappings":"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","sources":["webpack://demos/./src/demos/philosophers-timeline/timeline-bands-brush-chart.ts","webpack://demos/./src/demos/philosophers-timeline/timeline-bands-brush-chart.module.css","webpack://demos/./src/demos/philosophers-timeline/philosophers-timeline.ts","webpack://demos/./src/demos/philosophers-timeline/philosophers-timeline-chart-data.ts","webpack://demos/./src/pages/d3js/philosophers-timeline.tsx"],"sourcesContent":["import {\n  BaseType,\n  ScaleTime,\n  Selection,\n  axisBottom,\n  brushX,\n  min as minD3,\n  scaleTime,\n  select,\n  selectAll,\n} from \"d3\"\n\nimport * as styles from \"./timeline-bands-brush-chart.module.css\"\n\nexport enum SortOrder {\n  Ascending = \"ascending\",\n  Descending = \"descending\",\n}\n\nenum TimeOrder {\n  Backward = \"backward\",\n  Forward = \"forward\",\n}\n\ntype RedrawComp = {\n  redraw?: () => void\n}\n\nconst margin = {\n  bottom: 0,\n  left: 20,\n  right: 20,\n  top: 60,\n}\n\ntype Band = RedrawComp & {\n  g: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  h: number\n  id: string\n  instantWidth: number\n  itemHeight: number\n  parts: RedrawComp[]\n  trackHeight: number\n  trackOffset: number\n  w: number\n  x: number\n  xScale: ScaleTime<number, number, number>\n  y: number\n  yScale: (track: number) => number\n}\n\nconst outerHeight = 700\nconst height = outerHeight - margin.top - margin.bottom\nconst bandGap = 25\n\nconst toYear = (date: Date) => {\n  const bcString = \" BC\"\n  const year = date.getUTCFullYear()\n\n  if (year >= 0) {\n    return year.toString()\n  }\n\n  return bcString + Math.abs(year)\n}\n\nconst filterBlackOpacity = ({\n  deviation,\n  id,\n  slope,\n  svg,\n}: {\n  deviation: number\n  id: string\n  slope: number\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs\n    .append(\"filter\")\n    .attr(\"height\", \"500%\")\n    .attr(\"id\", `drop-shadow-${id}`)\n    .attr(\"width\", \"500%\")\n    .attr(\"x\", \"-200%\")\n    .attr(\"y\", \"-200%\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", deviation)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", slope)\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\ntype ChartDataBase = {\n  instant: boolean\n  track: number\n}\n\nexport type ChartConfig<ChartData extends ChartDataBase> = {\n  chartTitle: string\n  getItemLimitLeft: (chartItem: ChartData) => Date\n  getItemLimitRight: (chartItem: ChartData) => Date\n  getItemText: (itemInfo: {\n    chartItem: ChartData\n    maxLetters: number\n  }) => string\n  getItemTitle: (chartItem: ChartData) => string\n  getSortFn: (\n    sortOrder: SortOrder\n  ) => (itemA: ChartData, itemB: ChartData) => number\n  onChartItemClick: (chartItem: ChartData) => void\n  rootElId: string\n}\n\nexport class Timeline<ChartData extends ChartDataBase> {\n  private readonly chart: Selection<SVGGElement, unknown, HTMLElement, unknown>\n\n  private bandY: number\n  private bandNum: number\n  private dataContent: {\n    chartItems?: ChartData[]\n    maxDate?: Date\n    minDate?: Date\n    nTracks?: number\n  }\n\n  private readonly components: RedrawComp[]\n  private bands: { [k: string]: Band }\n  private readonly width: number\n  private readonly chartConfig: ChartConfig<ChartData>\n\n  public constructor(chartConfig: ChartConfig<ChartData>) {\n    this.chartConfig = chartConfig\n\n    const rootEl = document.getElementById(chartConfig.rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.timelineChart)\n\n    const { width: outerWidth } = rootEl.getBoundingClientRect()\n\n    this.width = outerWidth - margin.left - margin.right\n\n    this.bandY = 0\n    this.bandNum = 0\n\n    this.dataContent = {}\n    this.components = []\n    this.bands = {}\n\n    const svg = select(`#${chartConfig.rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", outerHeight + margin.top + margin.bottom)\n      .attr(\"width\", outerWidth + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"chart-title\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(${outerWidth / 2},-20)`)\n      .text(chartConfig.chartTitle)\n      .style(\"font-weight\", \"bold\")\n\n    filterBlackOpacity({ deviation: 1, id: \"intervals\", slope: 0.2, svg })\n\n    svg\n      .append(\"clipPath\")\n      .attr(\"id\", \"chart-area\")\n      .append(\"rect\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", height)\n\n    svg.on(\"mouseup\", () =>\n      selectAll(`.${styles.interval} rect`).style(\n        \"filter\",\n        \"url(#drop-shadow-intervals)\"\n      )\n    )\n\n    this.chart = svg\n      .append(\"g\")\n      .attr(\"class\", styles.chart)\n      .attr(\"clip-path\", \"url(#chart-area)\")\n  }\n\n  public addChartData(timelineItems: ChartData[]) {\n    const tracks: Date[] = []\n\n    this.dataContent.chartItems = timelineItems\n\n    const calculateTracks = ({\n      chartItems,\n      sortOrderInitial,\n      timeOrderInitial,\n    }: {\n      chartItems: ChartData[]\n      sortOrderInitial?: SortOrder\n      timeOrderInitial?: TimeOrder\n    }) => {\n      const sortOrder = sortOrderInitial ?? SortOrder.Descending\n      const timeOrder = timeOrderInitial ?? TimeOrder.Forward\n\n      const sortBackward = () => {\n        chartItems.forEach((chartItem) => {\n          let trackIndex = 0\n\n          for (trackIndex = 0; trackIndex < tracks.length; trackIndex += 1) {\n            if (\n              this.chartConfig.getItemLimitRight(chartItem) < tracks[trackIndex]\n            ) {\n              break\n            }\n          }\n\n          chartItem.track = trackIndex\n          tracks[trackIndex] = this.chartConfig.getItemLimitLeft(chartItem)\n        })\n      }\n\n      const sortForward = () => {\n        chartItems.forEach((chartItem) => {\n          let trackIndex = 0\n\n          for (trackIndex = 0; trackIndex < tracks.length; trackIndex += 1) {\n            if (\n              this.chartConfig.getItemLimitLeft(chartItem) > tracks[trackIndex]\n            ) {\n              break\n            }\n          }\n\n          chartItem.track = trackIndex\n\n          tracks[trackIndex] = this.chartConfig.getItemLimitRight(chartItem)\n        })\n      }\n\n      const sortFn = this.chartConfig.getSortFn(sortOrder)\n\n      this.dataContent.chartItems!.sort(sortFn)\n\n      if (timeOrder === TimeOrder.Forward) {\n        sortForward()\n\n        return\n      }\n\n      sortBackward()\n    }\n\n    calculateTracks({\n      chartItems: this.dataContent.chartItems,\n      sortOrderInitial: SortOrder.Descending,\n      timeOrderInitial: TimeOrder.Backward,\n    })\n\n    this.dataContent.nTracks = tracks.length\n    this.dataContent.minDate = minD3(\n      this.dataContent.chartItems,\n      this.chartConfig.getItemLimitLeft\n    )\n    this.dataContent.maxDate = new Date()\n\n    return this\n  }\n\n  public xAxis(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n\n    const axis = axisBottom<Date>(band.xScale)\n      .tickSize(6)\n      .tickFormat((axisTick) => toYear(axisTick))\n\n    const xAxis: RedrawComp &\n      Selection<SVGGElement, unknown, HTMLElement, unknown> = this.chart\n      .append(\"g\")\n      .attr(\"class\", styles.axis)\n      .attr(\"transform\", `translate(0,${band.y + band.h})`)\n\n    xAxis.redraw = function () {\n      xAxis.call(axis)\n    }\n\n    band.parts.push(xAxis)\n    this.components.push(xAxis)\n\n    return this\n  }\n\n  public createTooltip() {\n    $(`.part.${styles.instant}, .part.${styles.interval}`).tooltip({\n      track: true,\n    })\n\n    return this\n  }\n\n  public addBand({\n    bandName,\n    sizeFactor,\n  }: {\n    bandName: string\n    sizeFactor: number\n  }) {\n    const band: Partial<Band> = {}\n\n    band.id = `band${this.bandNum}`\n    band.x = 0\n    band.y = this.bandY\n    band.w = this.width\n    band.h = height * (sizeFactor || 1)\n    band.trackOffset = 0\n    band.trackHeight = Math.min(\n      (band.h - band.trackOffset) / this.dataContent.nTracks!,\n      20\n    )\n    band.itemHeight = band.trackHeight * 0.7\n    band.parts = []\n    band.instantWidth = 100\n    band.xScale = scaleTime()\n      .domain([this.dataContent.minDate!, this.dataContent.maxDate!])\n      .range([0, band.w])\n\n    band.yScale = (track: number) =>\n      band.trackOffset! + track * band.trackHeight!\n\n    band.g = this.chart\n      .append(\"g\")\n      .attr(\"id\", band.id)\n      .attr(\"transform\", `translate(0,${band.y})`)\n\n    band.g\n      .append(\"rect\")\n      .attr(\"class\", styles.band)\n      .attr(\"width\", band.w)\n      .attr(\"height\", band.h)\n\n    const bandElements = band.g\n      .selectAll(\"g\")\n      .data<ChartData>(this.dataContent.chartItems!)\n      .enter()\n      .append<SVGSVGElement>(\"svg\")\n      .attr(\"y\", (chartItem) => band.yScale!(chartItem.track))\n      .attr(\"height\", band.itemHeight)\n      .attr(\"title\", this.chartConfig.getItemTitle)\n      .attr(\n        \"class\",\n        (chartItem) =>\n          `part ${chartItem.instant ? styles.instant : styles.interval}`\n      )\n\n    const intervals = select(`#band${this.bandNum}`).selectAll<\n      BaseType,\n      ChartData\n    >(`.${styles.interval}`)\n\n    const instants = select(`#band${this.bandNum}`).selectAll<\n      BaseType,\n      ChartData\n    >(`.${styles.instant}`)\n\n    intervals\n      .append(\"rect\")\n      .attr(\"height\", \"100%\")\n      .attr(\"width\", \"100%\")\n      .attr(\"x\", \"1px\")\n      .attr(\"y\", \".5px\")\n      .style(\"filter\", \"url(#drop-shadow-intervals)\")\n\n    intervals\n      .append(\"text\")\n      .attr(\"class\", styles.intervalLabel)\n      .attr(\"x\", 3)\n      .attr(\"y\", 9.5)\n\n    instants\n      .append(\"circle\")\n      .attr(\"cx\", band.itemHeight / 2)\n      .attr(\"cy\", band.itemHeight / 2)\n      .attr(\"r\", 5)\n\n    instants\n      .append(\"text\")\n      .attr(\"class\", styles.instantLabel)\n      .attr(\"x\", 15)\n      .attr(\"y\", 10)\n\n    const itemsSelections = [intervals, instants]\n\n    itemsSelections.forEach((selection) => {\n      selection.on(\"click\", (...[, chartItem]) =>\n        this.chartConfig.onChartItemClick(chartItem)\n      )\n      selection.style(\"cursor\", \"pointer\")\n    })\n\n    const {\n      chartConfig: { getItemLimitLeft, getItemLimitRight },\n    } = this\n\n    band.redraw = () => {\n      bandElements\n        .attr(\"x\", (chartItem: ChartData) =>\n          band.xScale!(getItemLimitLeft(chartItem))\n        )\n        .attr(\n          \"width\",\n          (chartItem: ChartData) =>\n            band.xScale!(getItemLimitRight(chartItem)) -\n            band.xScale!(getItemLimitLeft(chartItem))\n        )\n        .select(\"text\")\n        .text((chartItem: ChartData) => {\n          const scale =\n            band.xScale!(getItemLimitRight(chartItem)) -\n            band.xScale!(getItemLimitLeft(chartItem))\n          const maxLetters = scale / 9\n\n          return this.chartConfig.getItemText({ chartItem, maxLetters })\n        })\n\n      band.parts!.forEach((part) => part.redraw!())\n    }\n\n    this.bands[bandName] = band as Band\n    this.components.push(band)\n    this.bandY += band.h + bandGap\n    this.bandNum += 1\n\n    return this\n  }\n\n  public labels(bandName: string) {\n    const {\n      bands: { [bandName]: band },\n    } = this\n    const labelWidth = 46\n    const labelHeight = 20\n    const labelTop = band.y + band.h - 10\n    const yText = 15\n\n    type LabelDef = {\n      className: string\n      getText: (min: Date, max: Date) => string\n      id: string\n      left: number\n      textAnchor: string\n      textLeft: number\n      top: number\n    }\n\n    const labelDefs: LabelDef[] = [\n      {\n        className: styles.bandMinMaxLabel,\n        getText: (min: Date) => toYear(min),\n        id: \"Start of the selected interval\",\n        left: 0,\n        textAnchor: \"start\",\n        textLeft: 4,\n        top: labelTop,\n      },\n      {\n        className: styles.bandMinMaxLabel,\n        getText: (...[, max]: [unknown, Date]) => toYear(max),\n        id: \"End of the selected interval\",\n        left: band.w - labelWidth,\n        textAnchor: \"end\",\n        textLeft: band.w - 4,\n        top: labelTop,\n      },\n      {\n        className: styles.bandMidLabel,\n        getText: (...[min, max]: [Date, Date]) =>\n          (max.getUTCFullYear() - min.getUTCFullYear()).toString(),\n        id: \"Length of the selected interval\",\n        left: (band.w - labelWidth) / 2,\n        textAnchor: \"middle\",\n        textLeft: band.w / 2,\n        top: labelTop,\n      },\n    ]\n\n    const bandLabels = this.chart\n      .append(\"g\")\n      .attr(\"id\", `${bandName}Labels`)\n      .attr(\"transform\", `translate(0,${band.y + band.h + 1})`)\n      .selectAll(`#${bandName}Labels`)\n      .data(labelDefs)\n      .enter()\n      .append(\"g\")\n\n    bandLabels\n      .append(\"rect\")\n      .attr(\"class\", styles.bandLabel)\n      .attr(\"x\", (label) => label.left)\n      .attr(\"width\", labelWidth)\n      .attr(\"height\", labelHeight)\n      .style(\"opacity\", 1)\n\n    const labels: RedrawComp &\n      Selection<SVGTextElement, LabelDef, SVGGElement, unknown> = bandLabels\n      .append(\"text\")\n      .attr(\"class\", (label) => label.className)\n      .attr(\"id\", (label) => label.id)\n      .attr(\"x\", (label) => label.textLeft)\n      .attr(\"y\", yText)\n      .attr(\"text-anchor\", (label) => label.textAnchor)\n\n    labels.redraw = () => {\n      const min = band.xScale.domain()[0]\n      const max = band.xScale.domain()[1]\n\n      labels.text((label) => label.getText(min, max))\n    }\n\n    band.parts.push(labels)\n    this.components.push(labels)\n\n    return this\n  }\n\n  public addBrush({\n    brushBandName,\n    targetBandName,\n  }: {\n    brushBandName: string\n    targetBandName: string\n  }) {\n    const {\n      bands: { [brushBandName]: brushBand },\n    } = this\n    const brush = brushX()\n\n    const {\n      dataContent: { maxDate, minDate },\n    } = this\n    const totalRange = [minDate!.getTime(), maxDate!.getTime()]\n\n    const selectionScale = scaleTime<number, Date>()\n      .domain([0, this.width])\n      .range(totalRange)\n\n    brush.on(\"brush\", (brushEvent) => {\n      let newDomain = brushBand.xScale.domain()\n\n      if (brushEvent.selection) {\n        const {\n          selection: [selectionStart, selectionEnd],\n        } = brushEvent\n\n        newDomain = [\n          selectionScale(Math.max(0, selectionStart)),\n          selectionScale(Math.min(this.width, selectionEnd)),\n        ]\n      }\n\n      selectAll(`.${styles.interval} rect`).style(\"filter\", \"none\")\n\n      this.bands[targetBandName].xScale.domain(newDomain)\n      this.bands[targetBandName].redraw!()\n    })\n\n    const xBrush = brushBand.g\n      .append(\"svg\")\n      .attr(\"class\", `x`)\n      .call(brush as any) // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    xBrush\n      .selectAll(\"rect\")\n      .attr(\"y\", 1)\n      .attr(\"height\", brushBand.h - 1)\n\n    return this\n  }\n\n  public redraw() {\n    this.components.forEach((component: RedrawComp) => component.redraw!())\n\n    return this\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport var timelineChart = \"timeline-bands-brush-chart-module--timelineChart--1QNFT\";\nexport var axis = \"timeline-bands-brush-chart-module--axis--eEXbX\";\nexport var band = \"timeline-bands-brush-chart-module--band--kNhNr\";\nexport var bandLabel = \"timeline-bands-brush-chart-module--bandLabel--3R8M5\";\nexport var bandMinMaxLabel = \"timeline-bands-brush-chart-module--bandMinMaxLabel--9b1ie\";\nexport var bandMidLabel = \"timeline-bands-brush-chart-module--bandMidLabel--1FVWM\";\nexport var chart = \"timeline-bands-brush-chart-module--chart--1fxHv\";\nexport var interval = \"timeline-bands-brush-chart-module--interval--2eQUh\";\nexport var instant = \"timeline-bands-brush-chart-module--instant--2L0wB\";\nexport var instantLabel = \"timeline-bands-brush-chart-module--instantLabel--1mTHv\";\nexport var intervalLabel = \"timeline-bands-brush-chart-module--intervalLabel--2bkN7\";","import {\n  CONTAINER_ID,\n  TimeBandItem,\n  fetchData,\n  getChartConfig,\n} from \"./philosophers-timeline-chart-data\"\nimport { Timeline } from \"./timeline-bands-brush-chart\"\n\nenum BandName {\n  Main = \"mainBand\",\n  Navi = \"naviBand\",\n}\n\nconst main = async () => {\n  const timelineData = await fetchData()\n  const chartConfig = getChartConfig()\n\n  new Timeline<TimeBandItem>(chartConfig)\n    .addChartData(timelineData)\n    .addBand({ bandName: BandName.Main, sizeFactor: 0.82 })\n    .addBand({ bandName: BandName.Navi, sizeFactor: 0.08 })\n    .xAxis(BandName.Main)\n    .xAxis(BandName.Navi)\n    .labels(BandName.Main)\n    .labels(BandName.Navi)\n    .addBrush({ brushBandName: BandName.Navi, targetBandName: BandName.Main })\n    .redraw()\n    .createTooltip()\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import { csv, timeParse } from \"d3\"\nimport qs from \"query-string\"\n\nimport { ChartConfig, SortOrder } from \"./timeline-bands-brush-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\nexport type TimeBandItem = {\n  end: Date\n  instant: boolean\n  label: string\n  start: Date\n  track: number\n}\n\nconst toYear = (date: Date) => {\n  const bcString = \" BC\"\n  const year = date.getUTCFullYear()\n\n  if (year >= 0) {\n    return year.toString()\n  }\n\n  return bcString + Math.abs(year)\n}\n\nconst parseDate = function (dateString: string) {\n  const format = timeParse(\"%Y-%m-%d\")\n\n  let date = format(dateString)\n\n  if (date !== null) {\n    return date\n  }\n\n  const year = isNaN(Number(dateString))\n    ? -dateString.replace(/[^0-9]/g, \"\")\n    : +dateString\n\n  if (year < 0 || year > 99) {\n    date = new Date(year, 6, 1)\n  } else if (year === 0) {\n    date = new Date(-1, 6, 1)\n  } else {\n    date = new Date(year, 6, 1)\n    date.setUTCFullYear(year)\n  }\n\n  return date\n}\n\nconst yearMillis = 31622400000\n\nexport const fetchData = async (): Promise<TimeBandItem[]> => {\n  const timeBandItems = (await csv(\n    `${ROOT_PATH}data/d3js/philosophers-timeline/data.csv`\n  )) as unknown as TimeBandItem[]\n  const today = new Date()\n  const instantOffset = 100 * yearMillis\n\n  timeBandItems.forEach((timeBandItem) => {\n    timeBandItem.start = parseDate(timeBandItem.start.toString())\n\n    if ((timeBandItem.end as unknown) === \"\") {\n      timeBandItem.end = new Date(timeBandItem.start.getTime() + instantOffset)\n      timeBandItem.instant = true\n    } else {\n      timeBandItem.end = parseDate(timeBandItem.end.toString())\n      timeBandItem.instant = false\n    }\n\n    if (timeBandItem.end > today) {\n      timeBandItem.end = today\n    }\n  })\n\n  return timeBandItems\n}\n\ntype Config = ChartConfig<TimeBandItem>\n\nconst getItemLimitLeft: Config[\"getItemLimitLeft\"] = (timeBandItem) =>\n  timeBandItem.start\n\nconst getItemLimitRight: Config[\"getItemLimitRight\"] = (timeBandItem) =>\n  timeBandItem.end\n\nconst getSortFn: Config[\"getSortFn\"] =\n  (sortOrder) =>\n  (...[timeBandItemA, timeBandItemB]: [TimeBandItem, TimeBandItem]) => {\n    const factor = sortOrder === SortOrder.Ascending ? 1 : -1\n    const startDiff = Number(timeBandItemA.start) - Number(timeBandItemB.start)\n\n    if (startDiff !== 0) {\n      return startDiff * factor\n    }\n\n    return (Number(timeBandItemB.end) - Number(timeBandItemA.end)) * factor\n  }\n\nconst getItemText: Config[\"getItemText\"] = ({\n  chartItem: timeBandItem,\n  maxLetters,\n}) => {\n  if (timeBandItem.label.length > maxLetters) {\n    return `${timeBandItem.label.substr(0, maxLetters - 1)}..`\n  }\n\n  return timeBandItem.label\n}\n\nconst getItemTitle: Config[\"getItemTitle\"] = (timeBandItem) => {\n  if (timeBandItem.instant) {\n    return `${timeBandItem.label}: ${toYear(timeBandItem.start)}`\n  }\n\n  return `${timeBandItem.label}: ${toYear(timeBandItem.start)} - ${toYear(\n    timeBandItem.end\n  )}`\n}\n\nconst onChartItemClick: Config[\"onChartItemClick\"] = (timelineChart) => {\n  const query = !timelineChart.instant\n    ? `Philosopher ${timelineChart.label} ${\n        (timelineChart.end as unknown) ? timelineChart.end.getFullYear() : \"\"\n      }`.trim()\n    : timelineChart.label\n\n  window.open(\n    `https://www.google.com/search?${qs.stringify({\n      q: query,\n    })}`\n  )\n}\n\nconst chartTitle = \"Philosophers through History\"\n\nexport const getChartConfig = (): Config => ({\n  chartTitle,\n  getItemLimitLeft,\n  getItemLimitRight,\n  getItemText,\n  getItemTitle,\n  getSortFn,\n  onChartItemClick,\n  rootElId: CONTAINER_ID,\n})\n","import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n} from \"@/demos/philosophers-timeline/philosophers-timeline\"\n\nconst PhilosophersTimeline = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default PhilosophersTimeline\n"],"names":["SortOrder","TimeOrder","bandMinMaxLabel","interval","instant","BandName","margin","height","toYear","date","year","getUTCFullYear","toString","Math","abs","Timeline","chartConfig","this","rootEl","document","getElementById","rootElId","classList","add","outerWidth","getBoundingClientRect","width","bandY","bandNum","dataContent","components","bands","svg","select","text","append","attr","chartTitle","style","deviation","id","slope","filter","feMerge","filterBlackOpacity","on","selectAll","styles","chart","addChartData","timelineItems","tracks","chartItems","sortOrderInitial","timeOrderInitial","sortOrder","timeOrder","sortFn","Descending","Backward","Forward","getSortFn","sort","forEach","chartItem","trackIndex","length","getItemLimitRight","track","getItemLimitLeft","nTracks","minDate","minD3","maxDate","Date","xAxis","bandName","band","axis","axisBottom","xScale","tickSize","tickFormat","axisTick","y","h","redraw","call","parts","push","createTooltip","$","tooltip","addBand","sizeFactor","x","w","trackOffset","trackHeight","min","itemHeight","instantWidth","scaleTime","domain","range","yScale","g","bandElements","data","enter","getItemTitle","intervals","instants","selection","onChartItemClick","maxLetters","getItemText","part","labels","labelTop","labelDefs","className","getText","left","textAnchor","textLeft","top","max","bandLabels","label","addBrush","brushBandName","targetBandName","brushBand","brush","brushX","totalRange","getTime","selectionScale","brushEvent","newDomain","selectionStart","selectionEnd","component","CONTAINER_ID","parseDate","dateString","timeParse","format","isNaN","Number","replace","setUTCFullYear","fetchData","csv","ROOT_PATH","timeBandItems","today","timeBandItem","start","end","timeBandItemA","timeBandItemB","factor","Ascending","startDiff","substr","timelineChart","query","getFullYear","trim","window","open","qs","q","main","timelineData","Main","Navi","pageContext","links","JQUERYUI","scripts"],"sourceRoot":""}