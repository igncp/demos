{"version":3,"sources":["webpack://demos/./src/demos/_utils/browserRaphael.ts","webpack://demos/./src/demos/circular-arcs/circular-arcs.ts","webpack://demos/./src/demos/circular-arcs/circular-arcs.module.css","webpack://demos/./src/pages/raphael/circular-arcs.tsx"],"names":["Raphael","window","require","arcFn","angle","endX","endY","radius1","radius2","startX","startY","arcSVG","join","this","path","circularArc","centerX","centerY","endAngle","radius","startAngle","Math","cos","PI","sin","arc","createArc","arcI","fill","paper","stroke","center","width","pow","height","attr","hover","animate","strokeWidth","rootElId","chartWrapper","document","getElementById","classList","add","getBoundingClientRect","Promise","resolve","pageContext","main","id"],"mappings":"mGAAA,IAAMA,EAA4B,oBAAXC,OAAyB,KAAOC,EAAQ,MAE/D,O,iHCqBA,SAASC,EAAT,GAGG,IADCC,EACF,EADEA,MAAOC,EACT,EADSA,KAAMC,EACf,EADeA,KAAMC,EACrB,EADqBA,QAASC,EAC9B,EAD8BA,QAASC,EACvC,EADuCA,OAAQC,EAC/C,EAD+CA,OAEzCC,EAAS,CAACJ,EAASC,EAASJ,EAAO,EAAG,EAAGC,EAAMC,GAAMM,KAAK,KAEhE,OAAOC,KAAKC,KAAL,IAAcL,EAAd,IAAwBC,EAAxB,MAAoCC,GAW7C,SAASI,EAAT,GAGG,IADCC,EACF,EADEA,QAASC,EACX,EADWA,QAASC,EACpB,EADoBA,SAAUC,EAC9B,EAD8BA,OAAQC,EACtC,EADsCA,WAEhCX,EAASO,EAAUG,EAASE,KAAKC,IAAKF,EAAaC,KAAKE,GAAM,KAC9Db,EAASO,EAAUE,EAASE,KAAKG,IAAKJ,EAAaC,KAAKE,GAAM,KAE9DlB,EAAOW,EAAUG,EAASE,KAAKC,IAAKJ,EAAWG,KAAKE,GAAM,KAC1DjB,EAAOW,EAAUE,EAASE,KAAKG,IAAKN,EAAWG,KAAKE,GAAM,KAEhE,OAAOV,KAAKY,IAAI,CACdrB,MAAO,EACPC,KAAMA,EAAOI,EACbH,KAAMA,EAAOI,EACbH,QAASY,EACTX,QAASW,EACTV,SACAC,WAIJ,IAoCMgB,EAAY,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAChCC,EAASF,EAAMG,OAAS,EAAIL,GAAnB,EAETF,EAAMI,EAAMd,YAAY,CAC5BC,QAASe,EAAS,GAAKV,KAAKY,IAAIN,EAAM,KACtCV,QAASY,EAAMK,QAAU,IAAa,EAAPP,GAC/BT,SAAU,EACVC,OAAQU,EAAMG,OAAS,EAAIL,GAC3BP,WAAY,MAGdK,EACGU,KAAK,OAAQP,GACbO,KAAK,eAAgB,IACrBA,KAAK,SAAUL,GACfK,KAAK,eA1GU,GA4GDV,EAlDdW,OACD,WACEvB,KAAKsB,KAAK,eAAgB,IAE1BtB,KAAKwB,QACH,CACE,eAAgBC,KAElB,IACA,aAGJ,WACEzB,KAAKsB,KAAK,eAAgB,IAE1BtB,KAAKwB,QACH,CACE,eA3EU,GA6EZ,IACA,cA2DR,EA1Ba,WACX,IAAME,EAAW,QACXC,EAAeC,SAASC,eAAeH,GAE7CC,EAAaG,UAAUC,ICxHM,kDD0H7B,IAAQZ,EAAUQ,EAAaK,wBAAvBb,MAGRhC,mBAAyBe,EACzBf,WAAiBG,EAIjB,IAFA,IAAM0B,GAAQ7B,OAAQuC,EAAUP,EALjB,KAONL,EAAO,EAAGA,GAAQ,KAAMA,EAC/BD,EAAU,CACRC,OACAC,KAAM,UACNC,QACAC,OAAQ,YAIZ,OAAOgB,QAAQC,WE9HjB,EANqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACnB,gBAAC,IAAD,CAAMC,KAAMA,EAAMD,YAAaA,GAC7B,uBAAKE,GAAG","file":"component---src-pages-raphael-circular-arcs-tsx-0010b37f2edfff493f7a.js","sourcesContent":["const Raphael = typeof window === \"undefined\" ? null : require(\"raphael\")\n\nexport default Raphael\n","import { RaphaelPaper, RaphaelPath } from \"raphael\"\n\nimport Raphael from \"@/demos/_utils/browserRaphael\"\n\nimport * as styles from \"./circular-arcs.module.css\"\n\nconst strokeWidth = 3\n\ntype ExtendedRaphael = RaphaelPaper & {\n  arc: typeof arcFn\n  circularArc: typeof circularArc\n}\n\ntype ArcFnOpts = {\n  angle: number\n  endX: number\n  endY: number\n  radius1: number\n  radius2: number\n  startX: number\n  startY: number\n}\n\nfunction arcFn(\n  this: RaphaelPaper,\n  { angle, endX, endY, radius1, radius2, startX, startY }: ArcFnOpts\n) {\n  const arcSVG = [radius1, radius2, angle, 0, 1, endX, endY].join(\" \")\n\n  return this.path(`M${startX} ${startY} a ${arcSVG}`)\n}\n\ntype CircularArcOpts = {\n  centerX: number\n  centerY: number\n  endAngle: number\n  radius: number\n  startAngle: number\n}\n\nfunction circularArc(\n  this: ExtendedRaphael,\n  { centerX, centerY, endAngle, radius, startAngle }: CircularArcOpts\n) {\n  const startX = centerX + radius * Math.cos((startAngle * Math.PI) / 180)\n  const startY = centerY + radius * Math.sin((startAngle * Math.PI) / 180)\n\n  const endX = centerX + radius * Math.cos((endAngle * Math.PI) / 180)\n  const endY = centerY + radius * Math.sin((endAngle * Math.PI) / 180)\n\n  return this.arc({\n    angle: 0,\n    endX: endX - startX,\n    endY: endY - startY,\n    radius1: radius,\n    radius2: radius,\n    startX,\n    startY,\n  })\n}\n\nconst addHoverHandlers = function (el: RaphaelPath) {\n  const widthMultiplier = 2.5\n\n  el.hover(\n    function () {\n      this.attr(\"fill-opacity\", 0.3)\n\n      this.animate(\n        {\n          \"stroke-width\": strokeWidth * widthMultiplier,\n        },\n        500,\n        \"bounce\"\n      )\n    },\n    function () {\n      this.attr(\"fill-opacity\", 0.2)\n\n      this.animate(\n        {\n          \"stroke-width\": strokeWidth,\n        },\n        500,\n        \"bounce\"\n      )\n    }\n  )\n}\n\ntype CreateArcOpts = {\n  arcI: number\n  fill: string\n  paper: ExtendedRaphael\n  stroke: string\n}\n\nconst createArc = ({ arcI, fill, paper, stroke }: CreateArcOpts) => {\n  const center = paper.width / (4 + arcI) + (strokeWidth - 1)\n\n  const arc = paper.circularArc({\n    centerX: center + 30 + Math.pow(arcI, 1.5),\n    centerY: paper.height - (100 - arcI * 2),\n    endAngle: 0,\n    radius: paper.width / (4 + arcI),\n    startAngle: 180,\n  })\n\n  arc\n    .attr(\"fill\", fill)\n    .attr(\"fill-opacity\", 0.2)\n    .attr(\"stroke\", stroke)\n    .attr(\"stroke-width\", strokeWidth)\n\n  addHoverHandlers(arc)\n}\n\nconst main = () => {\n  const rootElId = \"chart\"\n  const chartWrapper = document.getElementById(rootElId) as HTMLElement\n\n  chartWrapper.classList.add(styles.circularArcsChart)\n\n  const { width } = chartWrapper.getBoundingClientRect()\n  const height = 500\n\n  Raphael.fn.circularArc = circularArc\n  Raphael.fn.arc = arcFn\n\n  const paper = Raphael(rootElId, width, height)\n\n  for (let arcI = 0; arcI <= 50; ++arcI) {\n    createArc({\n      arcI,\n      fill: \"#85D588\",\n      paper,\n      stroke: \"#558857\",\n    })\n  }\n\n  return Promise.resolve()\n}\n\nexport default main\n","// extracted by mini-css-extract-plugin\nexport var circularArcsChart = \"circular-arcs-module--circularArcsChart--6jEV-\";","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/circular-arcs/circular-arcs\"\n\nconst CircularArcs = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default CircularArcs\n"],"sourceRoot":""}