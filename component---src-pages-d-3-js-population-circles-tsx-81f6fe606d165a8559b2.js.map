{"version":3,"file":"component---src-pages-d-3-js-population-circles-tsx-81f6fe606d165a8559b2.js","mappings":"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","sources":["webpack://demos/./src/demos/population-circles/population-circles.module.css","webpack://demos/./src/demos/population-circles/population-circles-chart.ts","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://demos/./src/demos/population-circles/population-circles-chart-data.ts","webpack://demos/./src/demos/population-circles/population-circles.ts","webpack://demos/./src/pages/d3js/population-circles.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var radio = \"population-circles-module--radio--d7ab8\";\nexport var slider = \"population-circles-module--slider--4b739\";\nexport var circle = \"population-circles-module--circle--25c38\";\nexport var header = \"population-circles-module--header--396bb\";","import anime from \"animejs\"\nimport chroma from \"chroma-js\"\nimport {\n  BaseType,\n  D3ZoomEvent,\n  HierarchyCircularNode,\n  Selection,\n  Transition,\n  easeCircleInOut,\n  easeSinInOut,\n  hierarchy,\n  pack,\n  scaleOrdinal,\n  schemeSet3,\n  select,\n  zoom,\n} from \"d3\"\n\nimport * as styles from \"./population-circles.module.css\"\n\nconst dropShadowBaseId = \"dropShadowBase\"\n\nconst margin = {\n  bottom: 0,\n  left: 0,\n  right: 0,\n  top: 70,\n}\nconst height = 400\n\ntype ChartConfig<CircleData> = {\n  colorDomain: string[]\n  getChartItems: () => CircleData[]\n  getEmptyItem: () => CircleData\n  getHeaderText: (options: { chartItems: CircleData[] }) => string\n  getIsSmall: () => boolean\n  getItemId: (circleData: CircleData) => string\n  getItemLabel: (circleData: CircleData) => string\n  getItemMetric: (circleData: CircleData) => number\n  getItemTitle: (options: { circleData: CircleData }) => string\n  getStringForColor: (circleData: CircleData) => string\n  onClick: (m: CircleData) => void\n  rootElId: string\n}\n\ntype RenderChartReturn = {\n  updateChart: () => void\n}\n\ntype AddDropShadow = (options: {\n  deviation: number\n  name: string\n  slope: number\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}) => void\n\nconst addDropShadow: AddDropShadow = ({ deviation, name, slope, svg }) => {\n  svg.append(\"filter\").html(`\n<filter id=\"${name}\" height=\"130%\">\n  <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${deviation}\"/>\n  <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n  <feComponentTransfer>\n    <feFuncA type=\"linear\" slope=\"${slope}\"/>\n  </feComponentTransfer>\n  <feMerge>\n    <feMergeNode/>\n    <feMergeNode in=\"SourceGraphic\"/>\n  </feMerge>\n</filter>\n`)\n}\n\nconst renderChart = <CircleData>(\n  chartConfig: ChartConfig<CircleData>\n): RenderChartReturn => {\n  type ChartNode = HierarchyCircularNode<CircleData>\n\n  const chartEl = document.getElementById(chartConfig.rootElId) as HTMLElement\n  const { width } = chartEl.getBoundingClientRect()\n\n  const lastPosition = { k: 1, x: 0, y: 0 }\n\n  // this zoom function is not working well in all directions\n  // eslint-disable-next-line max-params\n  function zoomed(\n    this: SVGSVGElement,\n    zoomEvent: D3ZoomEvent<SVGSVGElement, unknown>\n  ) {\n    const transition = select(this).transition().duration(150)\n    let {\n      transform: { x, y },\n    } = zoomEvent\n    const {\n      transform: { k },\n    } = zoomEvent\n\n    if (k !== lastPosition.k) {\n      x = lastPosition.x\n      y = lastPosition.y\n    }\n\n    transition.attr(\"transform\", `translate(${x}, ${y}) scale(${k})`)\n\n    lastPosition.k = k\n    lastPosition.x = x\n    lastPosition.y = y\n  }\n\n  const color = scaleOrdinal<string, string>()\n    .domain(chartConfig.colorDomain)\n    .range(schemeSet3)\n\n  const zoomBehavior = zoom<SVGSVGElement, unknown>()\n    .extent([\n      [0, 0],\n      [width / 2, height / 2],\n    ])\n    .on(\"end\", zoomed)\n\n  const svg = select(`#${chartConfig.rootElId}`)\n    .append(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height + margin.top].join(\", \"))\n    .attr(\"font-size\", 10)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"text-anchor\", \"middle\")\n    .call(zoomBehavior)\n\n  addDropShadow({ deviation: 2, name: dropShadowBaseId, slope: 0.5, svg })\n\n  const header = svg\n    .append(\"text\")\n    .attr(\"class\", styles.header)\n    .text(\"\")\n    .attr(\"transform\", `translate(${width / 2}, 50)`)\n\n  const svgContent = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const transitionChart = () => {\n    const filteredData = chartConfig.getChartItems()\n    const hoverAnimations: { [k: string]: anime.AnimeInstance | null } = {}\n\n    const structure = hierarchy({\n      ...chartConfig.getEmptyItem(),\n      children: filteredData,\n    }).sum(chartConfig.getItemMetric)\n\n    const isSmall = chartConfig.getIsSmall()\n\n    const root = pack<CircleData>()\n      .size(isSmall ? [width / 2, height / 2] : [width, height])\n      .padding(3)(structure)\n\n    const leaves = root.leaves()\n\n    header.text(\n      chartConfig.getHeaderText({\n        chartItems: filteredData,\n      })\n    )\n\n    const getDataKey = (node: unknown) =>\n      chartConfig.getItemId((node as HierarchyCircularNode<CircleData>).data)\n\n    const leaf = svgContent.selectAll(\".leaf\").data(leaves, getDataKey)\n\n    leaf.exit().remove()\n\n    const getTitle = (node: HierarchyCircularNode<CircleData>) =>\n      chartConfig.getItemTitle({\n        circleData: node.data,\n      })\n\n    leaf\n      .attr(\"title\", getTitle)\n      .transition()\n      .duration(1000)\n      .ease(easeCircleInOut)\n      .attr(\"transform\", (chartNode) => {\n        if (isSmall) {\n          return `translate(${chartNode.x + width / 4},${\n            chartNode.y + height / 4\n          })`\n        }\n\n        return `translate(${chartNode.x + 1},${chartNode.y + 1})`\n      })\n\n    const enter = leaf\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"leaf\")\n      .attr(\"title\", getTitle)\n      .attr(\"transform\", (node) => `translate(${node.x + 1},${node.y + 1})`)\n      .on(\"mouseenter\", function onMouseEnter(...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this)\n          .select(\".letter\")\n          .attr(\"filter\", `url(#${dropShadowBaseId})`)\n\n        const id = chartConfig.getItemId(node.data)\n\n        const hoverAnimation = anime({\n          complete: () => {\n            hoverAnimations[id] = null\n          },\n          strokeWidth: \"5px\",\n          targets: [selection.node()],\n        })\n\n        hoverAnimations[id] = hoverAnimation\n      })\n      .on(\"mouseleave\", function onMouseLeave(...[, node]) {\n        const selection = select(this).select(`.${styles.circle}`)\n\n        select(this).select(\".letter\").attr(\"filter\", null)\n\n        const id = chartConfig.getItemId(node.data)\n        const { [id]: hoverAnimation } = hoverAnimations\n\n        if (hoverAnimation) {\n          hoverAnimation.seek(0)\n          anime.remove(selection.node())\n          hoverAnimations[id] = null\n        }\n\n        anime({\n          strokeWidth: \"0px\",\n          targets: [selection.node()],\n        })\n      })\n      .on(\"click\", (...[, node]) => {\n        chartConfig.onClick(node.data)\n      })\n\n    const generateColor = (node: HierarchyCircularNode<CircleData>) =>\n      color(chartConfig.getStringForColor(node.data))\n\n    const generateDarkerColor = (node: ChartNode) => {\n      const baseColor = generateColor(node)\n\n      return chroma(baseColor).darken(1.5).hex()\n    }\n\n    type ChartTransition = Transition<BaseType, ChartNode, BaseType, ChartNode>\n\n    const setupLetter = (\n      letter:\n        | ChartTransition\n        | Selection<SVGTextElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const letterSelection = letter.text((node) =>\n        chartConfig.getItemLabel(node.data)\n      ) as ChartTransition\n\n      letterSelection\n        .style(\"font-size\", (node) => `${node.r.toFixed(0)}px`)\n        .attr(\"dy\", (node) => node.r / 3)\n        .attr(\"fill\", generateDarkerColor)\n    }\n\n    const setupCircle = (\n      circle:\n        | ChartTransition\n        | Selection<SVGCircleElement, ChartNode, SVGGElement, unknown>\n    ) => {\n      const elem = circle.attr(\"r\", (node) => node.r) as ChartTransition\n\n      elem.attr(\"fill\", generateColor).attr(\"stroke\", generateDarkerColor)\n    }\n\n    setupCircle(enter.append(\"circle\").attr(\"class\", styles.circle))\n\n    setupLetter(enter.append(\"text\").attr(\"class\", \"letter\"))\n\n    const forwardData = (node: ChartNode) => node\n\n    const circles = leaf\n      .selectAll(`.${styles.circle}`)\n      .data(forwardData, getDataKey)\n    const texts = leaf.selectAll(\".letter\").data(forwardData, getDataKey)\n\n    setupCircle(circles.transition().duration(1000).ease(easeSinInOut))\n\n    setupLetter(texts.transition().duration(1000).ease(easeSinInOut))\n\n    $(\".leaf\").tooltip({\n      track: true,\n    })\n  }\n\n  transitionChart()\n\n  return {\n    updateChart: transitionChart,\n  }\n}\n\nexport { ChartConfig, renderChart }\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { json } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\nimport qs from \"query-string\"\n\nimport { ChartConfig } from \"./population-circles-chart\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype PopulationRecord = {\n  count: number\n  date: string\n}\n\ntype Municipality = {\n  metrics: {\n    females: PopulationRecord[]\n    males: PopulationRecord[]\n    total: PopulationRecord[]\n  }\n  name: string\n}\n\ntype PopulationType = keyof Municipality[\"metrics\"]\n\ntype State = {\n  populationRange: [number, number]\n  populationType: PopulationType\n  timeRangeIndex: number\n}\n\nconst createState = (): State => ({\n  populationRange: [0, 1],\n  populationType: \"total\",\n  timeRangeIndex: 0,\n})\n\nconst fetchData = async () => {\n  type OriginalMunicipality = {\n    [key in keyof Omit<Municipality, \"metrics\">]: Municipality[key]\n  } & {\n    values: Municipality[\"metrics\"] // eslint-disable-line id-denylist\n  }\n\n  const originalMunicipalities = (await (json(\n    `${ROOT_PATH}data/d3js/population-circles/data.json`\n  ) as unknown)) as OriginalMunicipality[]\n\n  /* eslint-disable id-denylist */\n  return originalMunicipalities.map(({ values, ...otherProps }) => ({\n    ...otherProps,\n    metrics: values,\n  }))\n  /* eslint-enable id-denylist */\n}\n\nconst formatPopulation = (populationNum: number) =>\n  Number(populationNum.toFixed(0)).toLocaleString(undefined, {\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n  })\n\nconst typeNouns: Record<string, string> = {\n  females: \"females\",\n  males: \"males\",\n  total: \"people\",\n}\n\nconst getYearStr = (dateStr: string) => new Date(dateStr).getFullYear()\n\nconst createChartConfig = ({\n  municipalities,\n  state,\n}: {\n  municipalities: Municipality[]\n  state: State\n}): ChartConfig<Municipality> => {\n  type Config = ChartConfig<Municipality>\n\n  const colorDomain = municipalities.map((municipality) => municipality.name)\n  const getStringForColor = (municipality: Municipality) => municipality.name\n\n  const getEmptyItem = (): Municipality => ({\n    metrics: {\n      females: [],\n      males: [],\n      total: [],\n    },\n    name: \"\",\n  })\n\n  const getItemMetric: Config[\"getItemMetric\"] = (\n    municipality: Municipality\n  ) => {\n    if (!(municipality.metrics as unknown)) {\n      return 1\n    }\n\n    const {\n      metrics: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = municipality\n\n    return !(valueItem as unknown) ? 0 : valueItem.count\n  }\n\n  const getChartItems: Config[\"getChartItems\"] = () => {\n    const { populationRange, populationType, timeRangeIndex } = state\n    const itemsWithCount = municipalities.filter((municipality) => {\n      const {\n        metrics: {\n          [populationType]: { [timeRangeIndex]: valueItem },\n        },\n      } = municipality\n\n      return !!(valueItem as unknown)\n    })\n\n    const dataValues = itemsWithCount.map((municipality) => {\n      const {\n        metrics: {\n          [populationType]: { [timeRangeIndex]: dataItem },\n        },\n      } = municipality\n\n      return dataItem.count\n    })\n\n    const valueToIdx = dataValues.reduce<Record<string, number[] | undefined>>(\n      (...[acc, valueItem, valueIndex]) => {\n        acc[valueItem] = acc[valueIndex] ?? []\n        acc[valueItem]!.push(valueIndex)\n\n        return acc\n      },\n      {}\n    )\n\n    const sortedDataValues = dataValues.sort(\n      (...[municipalityAValue, municipalityBValue]) =>\n        municipalityAValue - municipalityBValue\n    )\n\n    const percentiles = sortedDataValues.reduce<number[]>(\n      (...[percentilesAcc, valueItem, valueIndex]) => {\n        const percentile = valueIndex / sortedDataValues.length\n        const { [valueItem]: unsortedIndexes } = valueToIdx\n\n        unsortedIndexes!.forEach((unsortedValueIndex: number) => {\n          percentilesAcc[unsortedValueIndex] = percentile\n        })\n\n        return percentilesAcc\n      },\n      []\n    )\n\n    return itemsWithCount.filter((...[, percentileIndex]) => {\n      const { [percentileIndex]: percentile } = percentiles\n\n      return (\n        typeof percentile === \"number\" &&\n        percentile >= populationRange[0] &&\n        percentile <= populationRange[1]\n      )\n    })\n  }\n\n  const getHeaderText: Config[\"getHeaderText\"] = ({ chartItems }) => {\n    const {\n      metrics: {\n        [state.populationType]: {\n          [state.timeRangeIndex]: { date },\n        },\n      },\n    } = chartItems[0]\n\n    const year = getYearStr(date)\n\n    const populationTotal = chartItems.reduce(\n      (...[acc, circleData]) =>\n        acc +\n        circleData.metrics[state.populationType][state.timeRangeIndex].count,\n      0\n    )\n\n    const populationText = `${formatPopulation(populationTotal)} ${\n      typeNouns[state.populationType]\n    }`\n\n    const { length: totalNum } = chartItems.filter(\n      (chartItem) =>\n        chartItem.metrics[state.populationType].length >=\n        state.timeRangeIndex + 1\n    )\n\n    return `Population in Malaga: ${year} - ${populationText}${\n      state.populationRange[0] === 0 && state.populationRange[1] === 1\n        ? \"\"\n        : ` - From ${(state.populationRange[0] * 100).toFixed(\n            0\n          )} percentile to ${(state.populationRange[1] * 100).toFixed(\n            0\n          )} percentile`\n    } - ${totalNum} municipalities`\n  }\n\n  const getItemId: Config[\"getItemId\"] = (municipality) => municipality.name\n\n  const getItemTitle: Config[\"getItemTitle\"] = ({ circleData }) => {\n    const {\n      metrics: {\n        [state.populationType]: { [state.timeRangeIndex]: valueItem },\n      },\n    } = circleData\n\n    if (!valueItem as unknown) {\n      return \"\"\n    }\n\n    const { [state.populationType]: itemsName } = typeNouns\n\n    return `${circleData.name} - ${formatPopulation(\n      valueItem.count\n    )} ${itemsName} - ${getYearStr(valueItem.date)}`\n  }\n\n  const getItemLabel: Config[\"getItemLabel\"] = (municipality) =>\n    municipality.name[0]!\n\n  const getIsSmall = () => state.populationType !== \"total\"\n\n  const onClick: Config[\"onClick\"] = (municipality) => {\n    if (!hotkeys.isPressed(\"control\")) {\n      return\n    }\n\n    window.open(\n      `https://www.google.com/search?${qs.stringify({\n        q: `Malaga ${municipality.name}`,\n      })}`\n    )\n  }\n\n  return {\n    colorDomain,\n    getChartItems,\n    getEmptyItem,\n    getHeaderText,\n    getIsSmall,\n    getItemId,\n    getItemLabel,\n    getItemMetric,\n    getItemTitle,\n    getStringForColor,\n    onClick,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { CONTAINER_ID, Municipality, createChartConfig, createState, fetchData }\n","import { select } from \"d3\"\nimport hotkeys from \"hotkeys-js\"\n\nimport { renderChart } from \"./population-circles-chart\"\nimport {\n  CONTAINER_ID,\n  Municipality,\n  createChartConfig,\n  createState,\n  fetchData,\n} from \"./population-circles-chart-data\"\n\nconst main = async () => {\n  hotkeys(\"control\", () => {})\n\n  const municipalities = await fetchData()\n\n  const state = createState()\n  const chartConfig = createChartConfig({ municipalities, state })\n\n  const { updateChart } = renderChart<Municipality>(chartConfig)\n\n  select(\"form\").on(\n    \"change\",\n    // eslint-disable-next-line id-denylist\n    (changeEvent: { target: { value: typeof state[\"populationType\"] } }) => {\n      state.populationType = changeEvent.target.value\n      updateChart()\n    }\n  )\n\n  $(\".population-slider\").slider({\n    change: (...[, { values: populationValues }]) => {\n      const newValues = (populationValues as [number, number]).map(\n        (v) => v / 100\n      ) as [number, number]\n\n      state.populationRange = newValues\n      updateChart()\n    },\n    range: true,\n    values: [0, 100], // eslint-disable-line id-denylist\n  })\n\n  const max = municipalities[0].metrics.total.length - 1\n\n  $(\".time-slider\").slider({\n    change: (...[, { value: timeRangeIndex }]) => {\n      state.timeRangeIndex = timeRangeIndex as number\n      updateChart()\n    },\n    max,\n    min: 0,\n    value: 0, // eslint-disable-line id-denylist\n  })\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n} from \"@/demos/population-circles/population-circles\"\nimport * as styles from \"@/demos/population-circles/population-circles.module.css\"\n\nconst PopulationCircles = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <form>\n      {[\n        { id: \"total\", label: \"Total\" },\n        { id: \"males\", label: \"Males\" },\n        { id: \"females\", label: \"Females\" },\n      ].map((...[{ id, label }, radioIndex]) => (\n        <div className={styles.radio} key={id}>\n          <input\n            defaultChecked={radioIndex === 0}\n            id={id}\n            name=\"type\"\n            type=\"radio\"\n            value={id}\n          />\n          <label htmlFor={id}>{label}</label>\n        </div>\n      ))}\n    </form>\n    <div className={styles.slider}>\n      <p>Time</p>\n      <div className=\"time-slider\" />\n    </div>\n    <div className={styles.slider}>\n      <p>Population Percentile</p>\n      <div className=\"population-slider\" />\n    </div>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default PopulationCircles\n"],"names":["slider","circle","dropShadowBaseId","margin","height","renderChart","chartConfig","width","document","getElementById","rootElId","getBoundingClientRect","lastPosition","k","x","y","deviation","name","slope","color","scaleOrdinal","domain","colorDomain","range","schemeSet3","zoomBehavior","zoom","extent","on","zoomEvent","transition","select","this","duration","transform","attr","svg","append","join","call","html","header","text","svgContent","transitionChart","filteredData","getChartItems","hoverAnimations","structure","hierarchy","getEmptyItem","children","sum","getItemMetric","isSmall","getIsSmall","leaves","pack","size","padding","getHeaderText","chartItems","getDataKey","node","getItemId","data","leaf","selectAll","exit","remove","getTitle","getItemTitle","circleData","ease","easeCircleInOut","chartNode","enter","selection","styles","id","hoverAnimation","anime","complete","strokeWidth","targets","seek","onClick","generateColor","getStringForColor","generateDarkerColor","baseColor","chroma","darken","hex","setupLetter","letter","getItemLabel","style","r","toFixed","setupCircle","forwardData","circles","texts","easeSinInOut","$","tooltip","track","updateChart","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","CONTAINER_ID","fetchData","json","ROOT_PATH","originalMunicipalities","map","values","otherProps","metrics","formatPopulation","populationNum","Number","toLocaleString","undefined","maximumFractionDigits","minimumFractionDigits","typeNouns","females","males","total","getYearStr","dateStr","Date","getFullYear","createChartConfig","municipalities","state","municipality","populationRange","populationType","timeRangeIndex","itemsWithCount","filter","dataValues","count","valueToIdx","reduce","acc","valueItem","valueIndex","push","sortedDataValues","sort","municipalityAValue","municipalityBValue","percentiles","percentilesAcc","percentile","unsortedIndexes","forEach","unsortedValueIndex","percentileIndex","date","year","populationTotal","populationText","totalNum","chartItem","itemsName","hotkeys","window","open","qs","q","main","changeEvent","value","change","populationValues","newValues","v","max","min","pageContext","links","JQUERYUI","scripts","label","radioIndex","className","defaultChecked","type","htmlFor"],"sourceRoot":""}