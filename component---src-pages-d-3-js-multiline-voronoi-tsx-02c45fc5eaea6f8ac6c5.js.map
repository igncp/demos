{"version":3,"file":"component---src-pages-d-3-js-multiline-voronoi-tsx-02c45fc5eaea6f8ac6c5.js","mappings":"wNAEWA,EAAO,wCAEPC,EAAY,6CAIZC,EAAc,+CCiDnBC,EAAe,IAyCfC,EAAAA,WAQJ,WAAmBC,GAA6C,IAAD,YAsP9CC,aAAe,WAC9B,EAAKC,UAtPLC,KAAKH,OAASA,EAEd,IAAMI,GAAMC,EAAAA,EAAAA,IAAO,IAAIF,KAAKH,OAAOM,UAAYC,OAAO,OAChDC,EAAOJ,EAAIG,OAAO,KAClBE,EAAQD,EAAKD,OAAO,KAAKG,KAAK,QAAYC,EAAlC,YACRC,EAAQJ,EAAKD,OAAO,KAAKG,KAAK,QAAYC,EAAlC,YAEdH,EACGD,OAAO,QACPG,KAAK,IAAK,IACVA,KAAK,KAAM,SACXG,MAAM,cAAe,QACrBC,KAAKX,KAAKH,OAAOe,YAtFN,SAChBX,GAEA,IACMY,EADOZ,EAAIG,OAAO,QACJA,OAAO,UAAUG,KAAK,KAAM,eAEhDM,EACGT,OAAO,kBACPG,KAAK,KAAM,eACXA,KAAK,eAAgB,GAExBM,EAAOT,OAAO,YAAYG,KAAK,KAAM,GAAGA,KAAK,KAAM,GACnDM,EACGT,OAAO,uBACPA,OAAO,WACPG,KAAK,QAAS,KACdA,KAAK,OAAQ,UAEhB,IAAMO,EAAUD,EAAOT,OAAO,WAE9BU,EAAQV,OAAO,eACfU,EAAQV,OAAO,eAAeG,KAAK,KAAM,iBAmEvCQ,CAAUV,GAEV,IAAMW,EAAeX,EAAKD,OAAO,KAAKG,KAAK,QDxH5B,0CCyHTU,EAASZ,EAAKD,OAAO,UAAUG,KAAK,IAAK,KACzCW,EAAeb,EAAKD,OAAO,KAAKG,KAAK,QDvH1B,4CCyHXY,EAnEW,SACnBd,GAEA,IAAMc,EAAUd,EACbD,OAAO,KACPG,KAAK,QD5DW,4CC6DhBA,KAAK,YAAa,wBAkBrB,OAhBAY,EACGf,OAAO,QACPG,KAAK,YAAa,uBAClBA,KAAK,OAAQ,SACbA,KAAK,SAAU,IACfA,KAAK,QAASZ,GACdY,KAAK,KAAM,GACXA,KAAK,KAAM,GACXG,MAAM,SAAU,qBAChBA,MAAM,UAAW,QACjBA,MAAM,iBAAkB,QACxBA,MAAM,SAAU,WAEnBS,EAAQf,OAAO,QAAQG,KAAK,QAAS,SAASA,KAAK,KAAM,IACzDY,EAAQf,OAAO,QAAQG,KAAK,QAAS,SAASA,KAAK,KAAM,IAElDY,EA2CWC,CAAaf,GAE7BL,KAAKqB,SAAW,CACdJ,OAAAA,EACAD,aAAAA,EACAf,IAAAA,EACAI,KAAAA,EACAc,QAAAA,EACAD,aAAAA,EACAZ,MAAAA,EACAG,MAAAA,GAGFT,KAAKsB,MAAQ,CACXC,aAAa,EACbC,UAAWxB,KAAKH,OAAO4B,OAGzBzB,KAAKD,SAEL2B,OAAOC,iBAAiB,SAAU3B,KAAKF,cACxC,EAEc8B,UAAf,SAAyBC,GACvB,IAAMC,EAAgB,CACpBC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,IAGP,OAAIL,EAAQ,IACH,OAAP,UACKC,EADL,CAEEE,KAAM,GACNC,MAAO,IAIJH,GACR,kBAuLA,OAvLA,EAEMK,WAAP,SAAkBC,GAChBpC,KAAKqB,SAASH,aAAamB,QDnKN,+CCmKkCD,IACxD,EAEOrC,OAAR,WAAkB,IAAD,OACf,EAGIC,KAFFH,OAAU4B,EADZ,EACYA,MAAOtB,EADnB,EACmBA,SAAUmC,EAD7B,EAC6BA,MAC3BjB,EACErB,KADFqB,SAEIkB,GAAQC,EAAAA,EAAAA,KAAaC,EAAAA,KAErBC,EAASC,SAASC,eAAezC,GAEvCuC,EAAOG,UAAUC,IDrLc,0DCuL/B,IAAeC,EAAYL,EAAOM,wBAA1BnB,MACFoB,EAASrD,EAAsBgC,UAAUmB,GACzClB,EACJa,EAAOM,wBAAwBnB,MAAQoB,EAAOjB,KAAOiB,EAAOhB,MACxDiB,EAAgBrB,EAAQ,IAExBsB,EAAS,IAAMF,EAAOf,IAAMe,EAAOlB,OAEnCqB,GAASC,EAAAA,EAAAA,MAAYC,MAAM,CAAC,EAAGzB,IAC/B0B,GAASC,EAAAA,EAAAA,OAAcF,MAAM,CAACH,EAAQ,IAEtCM,EAAmB,SAACC,GAAD,OACvBN,EAAO,EAAKvD,OAAO8D,eAAeD,KAC9BE,EAAmB,SAACF,GAAD,OACvBH,EAAO,EAAK1D,OAAOgE,eAAeH,KAE9BI,EAAwD,GAE9DzC,EAASpB,IACNM,KAAK,QAASsB,EAAQoB,EAAOjB,KAAOiB,EAAOhB,OAC3C1B,KAAK,SAAU4C,EAASF,EAAOf,IAAMe,EAAOlB,QAE/CV,EAAShB,KAAKE,KAAK,YAAnB,aAA6C0C,EAAOjB,KAApD,IAA4DiB,EAAOf,IAAnE,KAEAkB,EAAOW,QAAOC,EAAAA,EAAAA,KAAa1B,IAC3BiB,EACGQ,OAAO,CACN,GACAE,EAAAA,EAAAA,KAAIxC,GAAO,SAACyC,GAAD,OACTD,EAAAA,EAAAA,KAAI,EAAKpE,OAAOsE,cAAcD,GAAO,EAAKrE,OAAOgE,qBAGpDO,OAEH/C,EAASf,MACNC,KAAK,YADR,eACoC4C,EADpC,KAEGkB,MAAKC,EAAAA,EAAAA,KAAWlB,GAAQmB,MAAMrB,EAAgB,OAAIsB,IAErDnD,EAASZ,MAAM4D,MAAKI,EAAAA,EAAAA,KAASlB,GAAQgB,MAAM,GAAI,MAE/C,IAAML,GAAOQ,EAAAA,EAAAA,OAAqBC,EAAElB,GAAkBmB,EAAEhB,GAGtD/D,EAEEG,KAFFH,OACS2B,EACPxB,KADFsB,MAASE,UAGLqD,EAAexD,EAASL,aAAa8D,UAAU,QAAQC,KAAKvD,GAElEqD,EAAaG,QAAQ5E,OAAO,QAAQM,MAAM,SAAU,qBACpDmE,EAAaI,OAAOC,SAEpB7D,EAASL,aACN8D,UAAqC,QACrCvE,KAAK,KAAK,SAAsB4E,GAC/B,IAAMC,EAAavF,EAAOwF,UAAUF,GAEpCrB,EAAgBsB,GAAcpF,KAE9B,IAAMsF,EAASzF,EAAOsE,cAAcgB,GAEpC,OAAOjB,EAAKoB,MAEb5E,MAAM,UAAU,uFAAO6E,EAAP,YAAsBhD,EAAMgD,EAAUC,eAEzD,IASMC,EAAU,WAA0C,IAAD,wEAAlC/B,EAAkC,KACvD,EAAKpC,MAAMC,aAAe,EAAKD,MAAMC,YAErC,EAAKD,MAAME,UACL,EAAKF,MAAMC,YAMN,CALUE,EAAMiE,MACrB,SAACC,GAAD,OACE9F,EAAOwF,UAAUM,KAAc9F,EAAO+F,mBAAmBlC,OAMxDjC,EAGTJ,EAASF,QAAQ0E,GAAG,YAAa,MAAMA,GAAG,QAAS,MAEnD,EAAK9F,UAoCD+F,EAAatE,EAAUuE,QAAqB,WAAyB,IAAD,wEAAnBC,EAAmB,KAAdb,EAAc,KAClEG,EAASzF,EAAOsE,cAAcgB,GAMpC,OAJAG,EAAOW,SAAQ,SAACvC,GACdsC,EAAIE,KAAKxC,MAGJsC,IACN,IAEGG,EAAUC,EAAAA,EAAAA,KACdN,EACArC,EACAG,GACAuC,QAAQ,EACPlD,EAAOjB,MACPiB,EAAOf,IACRL,EAAQoB,EAAOhB,MACfkB,EAASF,EAAOlB,SAGZsE,EAAiBrG,KAAKqB,SAASH,aAClC4D,UAAsC,QACtCC,KACCe,GACA,SAACpC,GAAD,OACK7D,EAAO+F,mBAAmBlC,GAD/B,IACyC7D,EAAO8D,eAAeD,MAGnE2C,EAAerB,QAAQ5E,OAAO,QAC9BiG,EAAepB,OAAOC,SAEtBlF,KAAKqB,SAASH,aACX4D,UAAsC,QACtCvE,KAAK,KAAK,uFAAO+F,EAAP,YAAuBH,EAAQI,WAAWD,MACpDT,GAAG,aApEY,SAAZW,IAAsD,IAAD,wEAAlC9C,EAAkC,KACnD+C,EAAS5G,EAAO+F,mBAAmBlC,GACvBgD,EAAa5C,EAAtB2C,IAETvG,EAAAA,EAAAA,IAAOwG,GAAUrE,QAAQ7B,GAAkB,GACzCkG,EAASC,WAA2BC,YAAYF,GAElD,IAAMG,EAAgBpD,EAAiBC,GACjCoD,EAAgBlD,EAAiBF,GAEjCqD,EAAaC,KAAKC,IACtBpF,EAAQlC,IACRqH,KAAK/C,IAzOYtE,IAyOUkH,IAEvBK,EAAaJ,EAEnBzF,EAASF,QACNZ,KAAK,YADR,aACkCwG,EADlC,IACgDG,EADhD,KAEGrB,GAAG,aAAa,WACfW,EAAU,KAAM9C,MAEjBmC,GAAG,SAAS,WACXJ,EAAQ,KAAM/B,MAElBrC,EAASJ,OAAOV,KACd,YADF,aAEesG,EAFf,IAEgCC,EAFhC,KAKAzF,EAASF,QAAQjB,OAAO,UAAUS,KAAKd,EAAOsH,gBAAgBzD,IAC9DrC,EAASF,QAAQjB,OAAO,UAAUS,KAAKd,EAAOuH,gBAAgB1D,OAuC7DmC,GAAG,YAnGW,WAA0C,IAAD,wEAAlCnC,EAAkC,KAClD+C,EAAS5G,EAAO+F,mBAAmBlC,GACvBgD,EAAa5C,EAAtB2C,GAIT,OAFAvG,EAAAA,EAAAA,IAAOwG,GAAUrE,QAAQ7B,GAAkB,GAEpCa,EAASF,QAAQZ,KAAK,YAAa,2BA8FzCsF,GAAG,QAASJ,IAChB,EA5PG7F,GC9FAyH,EAAe,QACfC,EAAkB,eAkBlBC,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGIC,EAAY,QAEZC,EAAS,mCAAG,mGACVC,GAAcC,EAAAA,EAAAA,KAAWH,GACzBI,GAAaC,EAAAA,EAAAA,KAAUL,GAFb,UAISM,EAAAA,EAAAA,KACpBC,+CALW,cAIVC,EAJU,OAQVC,EAAiBC,OAAOC,KAAKH,EAAU,IAC1CI,KAAI,SAACC,GAAD,OAAOT,EAAWS,MACtBxH,OAAOyH,QAEJC,EAAiBP,EAAUI,KAAI,SAACI,GACpC,IAAMC,EAAOD,EAAYC,KACtBC,QAAQ,sCAAuC,IAC/CC,OAEH,MAAO,CACLC,QAASX,EAAOG,KAAI,SAACS,GACnB,IAAMC,EAAUpB,EAAYmB,GACgBE,EAAcP,EAAjDM,GACHE,EAAyBV,OAAOS,GAAa,IAEnD,MAAO,CACLE,SAAUR,EACVI,KAAAA,EACAG,eAAAA,MAGJP,KAAAA,MA7BY,kBAiCT,CAAEF,OAAAA,EAAQN,OAAAA,IAjCD,2CAAH,qDAsCT5C,EAAiC,SAAC6D,GAAD,OAAUA,EAAKT,MAEhDtE,EAAyC,SAAC+E,GAAD,OAAUA,EAAKN,SACxD/E,EAA2C,SAACsF,GAAD,OAC/CA,EAAWH,gBAEP7B,EAA6C,SAACgC,GAAD,OAC9CA,EAAWF,SAASN,OAD0B,MAG7CvB,EAA6C,SAAC+B,GAClD,IAAMN,EACJtB,EAAW4B,EAAWN,KAAKO,YADnB,OAEHD,EAAWN,KAAKQ,cAEvB,MAAM,KAAkC,IAA5BF,EAAWH,gBAAsBM,QAAQ,GAArD,OAA8DT,GAG1DjD,EAAmD,SAACuD,GAAD,OACvDA,EAAWF,UAEPtF,EAA2C,SAACwF,GAAD,OAAgBA,EAAWN,MAEtEU,EAAiB,SAAC,GAAD,IACrBhB,EADqB,EACrBA,OACAN,EAFqB,EAErBA,OAFqB,MAMR,CACbrH,WAAY,uBACZyE,UAAAA,EACAO,mBAAAA,EACAzB,cAAAA,EACAR,eAAAA,EACAE,eAAAA,EACAsD,gBAAAA,EACAC,gBAAAA,EACA3F,MAAO8G,EACPpI,SAAUkH,EACV/E,MAAO2F,IC1GHuB,EAAI,mCAAG,8GACsB/B,IADtB,gBACHc,EADG,EACHA,OAAQN,EADL,EACKA,OACVwB,EAAcF,EAAe,CAAEhB,OAAAA,EAAQN,OAAAA,IAEvCyB,EAAQ,IAAI9J,EAAsB6J,GAElCE,EAAOhH,SAASC,eAAepC,GACrBmC,SAASC,eAAeyE,GAEhCT,YAAY+C,IAEpBzJ,EAAAA,EAAAA,IAAO,iBACJ0J,SAAS,YAAY,GACrB/D,GAAG,UAAU,SAACgE,GACbH,EAAMvH,WAAY0H,EAAWC,OAA4BC,UAAW,MAd7D,4CAAH,qDAoBV,ICTA,EAVyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACvB,gBAAC,IAAD,CAAMR,KAAMA,EAAMQ,YAAaA,GAC7B,wBAAMC,GAAIzJ,GACR,yBAAOyJ,GAAI3C,EAAiB4C,KAAK,aAAc,IAC/C,yBAAOC,QAAS7C,GAAhB,uBAEF,uBAAK2C,GAAI5C","sources":["webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.module.css","webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi-chart.ts","webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi-chart-config.ts","webpack://demos/./src/demos/multiline-voronoi/multiline-voronoi.ts","webpack://demos/./src/pages/d3js/multiline-voronoi.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var multilineVoronoiChart = \"multiline-voronoi-module--multilineVoronoiChart--706ac\";\nexport var axis = \"multiline-voronoi-module--axis--73b38\";\nexport var lines = \"multiline-voronoi-module--lines--3e92b\";\nexport var lineHover = \"multiline-voronoi-module--lineHover--07a40\";\nexport var tooltip = \"multiline-voronoi-module--tooltip--f507c\";\nexport var voronoi = \"multiline-voronoi-module--voronoi--c0339\";\nexport var voronoiShow = \"multiline-voronoi-module--voronoiShow--cb86f\";\nexport var formVoronoi = \"multiline-voronoi-module--formVoronoi--b33e2\";","import {\n  Selection,\n  axisBottom,\n  axisLeft,\n  extent,\n  line as lineD3,\n  max,\n  scaleLinear,\n  scaleOrdinal,\n  scaleTime,\n  schemePastel2,\n  select,\n} from \"d3\"\nimport { Delaunay } from \"d3-delaunay\"\n\nimport * as styles from \"./multiline-voronoi.module.css\"\n\ntype LineId = string\n\ntype ChartConfig<ChartLine, ChartPoint> = Readonly<{\n  chartTitle: string\n  getLineId: (line: ChartLine) => LineId\n  getLineIdFromPoint: (point: ChartPoint) => LineId\n  getLinePoints: (line: ChartLine) => ChartPoint[]\n  getPointXValue: (point: ChartPoint) => Date\n  getPointYValue: (point: ChartPoint) => number\n  getTooltipPart1: (point: ChartPoint) => string\n  getTooltipPart2: (point: ChartPoint) => string\n  lines: ChartLine[]\n  rootElId: string\n  times: Date[]\n}>\n\nconst addFilter = (\n  svg: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const defs = svg.append(\"defs\")\n  const filter = defs.append(\"filter\").attr(\"id\", \"drop-shadow\")\n\n  filter\n    .append(\"feGaussianBlur\")\n    .attr(\"in\", \"SourceAlpha\")\n    .attr(\"stdDeviation\", 1)\n\n  filter.append(\"feOffset\").attr(\"dx\", 1).attr(\"dy\", 1)\n  filter\n    .append(\"feComponentTransfer\")\n    .append(\"feFuncA\")\n    .attr(\"slope\", \"1\")\n    .attr(\"type\", \"linear\")\n\n  const feMerge = filter.append(\"feMerge\")\n\n  feMerge.append(\"feMergeNode\")\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\")\n}\n\nconst tooltipWidth = 300\nconst tooltipWidthHalf = tooltipWidth / 2\n\nconst buildTooltip = (\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n) => {\n  const tooltip = svgG\n    .append(\"g\")\n    .attr(\"class\", styles.tooltip)\n    .attr(\"transform\", \"translate(-100,-100)\")\n\n  tooltip\n    .append(\"rect\")\n    .attr(\"transform\", \"translate(-150,-50)\")\n    .attr(\"fill\", \"white\")\n    .attr(\"height\", 50)\n    .attr(\"width\", tooltipWidth)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .style(\"filter\", \"url(#drop-shadow)\")\n    .style(\"opacity\", \"0.65\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"cursor\", \"default\")\n\n  tooltip.append(\"text\").attr(\"class\", \"text1\").attr(\"y\", -30)\n  tooltip.append(\"text\").attr(\"class\", \"text2\").attr(\"y\", -10)\n\n  return tooltip\n}\n\ntype ChartElements = Readonly<{\n  circle: Selection<SVGCircleElement, unknown, HTMLElement, unknown>\n  linesWrapper: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n  svgG: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  tooltip: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  voronoiGroup: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  xAxis: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  yAxis: Selection<SVGGElement, unknown, HTMLElement, unknown>\n}>\n\nclass MultilineVoronoiChart<ChartLine, ChartPoint> {\n  private readonly config: ChartConfig<ChartLine, ChartPoint>\n  private readonly elements: ChartElements\n  private readonly state: {\n    clickToggle: boolean\n    usedLines: ChartLine[]\n  }\n\n  public constructor(config: ChartConfig<ChartLine, ChartPoint>) {\n    this.config = config\n\n    const svg = select(`#${this.config.rootElId}`).append(\"svg\")\n    const svgG = svg.append(\"g\")\n    const xAxis = svgG.append(\"g\").attr(\"class\", `${styles.axis} axis--x`)\n    const yAxis = svgG.append(\"g\").attr(\"class\", `${styles.axis} axis--y`)\n\n    svgG\n      .append(\"text\")\n      .attr(\"x\", 20)\n      .attr(\"dy\", \".32em\")\n      .style(\"font-weight\", \"bold\")\n      .text(this.config.chartTitle)\n\n    addFilter(svgG)\n\n    const linesWrapper = svgG.append(\"g\").attr(\"class\", styles.lines)\n    const circle = svgG.append(\"circle\").attr(\"r\", 3.5)\n    const voronoiGroup = svgG.append(\"g\").attr(\"class\", styles.voronoi)\n\n    const tooltip = buildTooltip(svgG)\n\n    this.elements = {\n      circle,\n      linesWrapper,\n      svg,\n      svgG,\n      tooltip,\n      voronoiGroup,\n      xAxis,\n      yAxis,\n    }\n\n    this.state = {\n      clickToggle: false,\n      usedLines: this.config.lines,\n    }\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  private static getMargin(width: number) {\n    const defaultMargin = {\n      bottom: 70,\n      left: 80,\n      right: 70,\n      top: 60,\n    }\n\n    if (width < 530) {\n      return {\n        ...defaultMargin,\n        left: 35,\n        right: 5,\n      }\n    }\n\n    return defaultMargin\n  }\n\n  public setVoronoi(newValue: boolean) {\n    this.elements.voronoiGroup.classed(styles.voronoiShow, newValue)\n  }\n\n  private render() {\n    const {\n      config: { lines, rootElId, times },\n      elements,\n    } = this\n    const color = scaleOrdinal(schemePastel2)\n\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.multilineVoronoiChart)\n\n    const { width: elWidth } = rootEl.getBoundingClientRect()\n    const margin = MultilineVoronoiChart.getMargin(elWidth)\n    const width =\n      rootEl.getBoundingClientRect().width - margin.left - margin.right\n    const isSmallDevice = width < 530\n\n    const height = 500 - margin.top - margin.bottom\n\n    const xScale = scaleTime().range([0, width])\n    const yScale = scaleLinear().range([height, 0])\n\n    const lineXTransformer = (point: ChartPoint) =>\n      xScale(this.config.getPointXValue(point))\n    const lineYTransformer = (point: ChartPoint) =>\n      yScale(this.config.getPointYValue(point))\n\n    const lineIdToElement: { [lineId: string]: SVGPathElement } = {}\n\n    elements.svg\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n\n    elements.svgG.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    xScale.domain(extent<Date>(times) as [Date, Date])\n    yScale\n      .domain([\n        0,\n        max(lines, (line) =>\n          max(this.config.getLinePoints(line), this.config.getPointYValue)\n        ) as number,\n      ])\n      .nice()\n\n    elements.xAxis\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(axisBottom(xScale).ticks(isSmallDevice ? 2 : undefined))\n\n    elements.yAxis.call(axisLeft(yScale).ticks(10, \"%\"))\n\n    const line = lineD3<ChartPoint>().x(lineXTransformer).y(lineYTransformer)\n\n    const {\n      config,\n      state: { usedLines },\n    } = this\n\n    const updatedLines = elements.linesWrapper.selectAll(\"path\").data(usedLines)\n\n    updatedLines.enter().append(\"path\").style(\"filter\", \"url(#drop-shadow)\")\n    updatedLines.exit().remove()\n\n    elements.linesWrapper\n      .selectAll<SVGPathElement, ChartLine>(\"path\")\n      .attr(\"d\", function generateLine(usedLine) {\n        const usedLineId = config.getLineId(usedLine)\n\n        lineIdToElement[usedLineId] = this\n\n        const points = config.getLinePoints(usedLine)\n\n        return line(points)\n      })\n      .style(\"stroke\", (...[, lineIndex]) => color(lineIndex.toString()))\n\n    const mouseout = (...[, point]: [unknown, ChartPoint]) => {\n      const lineId = config.getLineIdFromPoint(point)\n      const { [lineId]: linePath } = lineIdToElement\n\n      select(linePath).classed(styles.lineHover, false)\n\n      return elements.tooltip.attr(\"transform\", \"translate(-100,-100)\")\n    }\n\n    const clicked = (...[, point]: [unknown, ChartPoint]) => {\n      this.state.clickToggle = !this.state.clickToggle\n\n      this.state.usedLines = (() => {\n        if (this.state.clickToggle) {\n          const lineData = lines.find(\n            (lineItem) =>\n              config.getLineId(lineItem) === config.getLineIdFromPoint(point)\n          ) as ChartLine\n\n          return [lineData]\n        }\n\n        return lines\n      })()\n\n      elements.tooltip.on(\"mouseover\", null).on(\"click\", null)\n\n      this.render()\n    }\n\n    const mouseover = (...[, point]: [unknown, ChartPoint]) => {\n      const lineId = config.getLineIdFromPoint(point)\n      const { [lineId]: linePath } = lineIdToElement\n\n      select(linePath).classed(styles.lineHover, true)\n      ;(linePath.parentNode as SVGGElement).appendChild(linePath)\n\n      const rawTranslateX = lineXTransformer(point)\n      const rawTranslateY = lineYTransformer(point)\n\n      const translateX = Math.min(\n        width - tooltipWidth / 2,\n        Math.max(tooltipWidthHalf, rawTranslateX)\n      )\n      const translateY = rawTranslateY\n\n      elements.tooltip\n        .attr(\"transform\", `translate(${translateX},${translateY})`)\n        .on(\"mouseover\", () => {\n          mouseover(null, point)\n        })\n        .on(\"click\", () => {\n          clicked(null, point)\n        })\n      elements.circle.attr(\n        \"transform\",\n        `translate(${rawTranslateX},${rawTranslateY})`\n      )\n\n      elements.tooltip.select(\".text1\").text(config.getTooltipPart1(point))\n      elements.tooltip.select(\".text2\").text(config.getTooltipPart2(point))\n    }\n\n    const flatPoints = usedLines.reduce<ChartPoint[]>((...[acc, usedLine]) => {\n      const points = config.getLinePoints(usedLine)\n\n      points.forEach((point) => {\n        acc.push(point)\n      })\n\n      return acc\n    }, [])\n\n    const voronoi = Delaunay.from(\n      flatPoints,\n      lineXTransformer,\n      lineYTransformer\n    ).voronoi([\n      -margin.left,\n      -margin.top,\n      width + margin.right,\n      height + margin.bottom,\n    ])\n\n    const updatedVoronoi = this.elements.voronoiGroup\n      .selectAll<SVGPathElement, ChartPoint>(\"path\")\n      .data(\n        flatPoints,\n        (point) =>\n          `${config.getLineIdFromPoint(point)}-${config.getPointXValue(point)}`\n      )\n\n    updatedVoronoi.enter().append(\"path\")\n    updatedVoronoi.exit().remove()\n\n    this.elements.voronoiGroup\n      .selectAll<SVGPathElement, ChartPoint>(\"path\")\n      .attr(\"d\", (...[, pointIndex]) => voronoi.renderCell(pointIndex))\n      .on(\"mouseover\", mouseover)\n      .on(\"mouseout\", mouseout)\n      .on(\"click\", clicked)\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nexport { MultilineVoronoiChart, ChartConfig }\n","import { timeFormat, timeParse, tsv } from \"d3\"\n\nimport { ChartConfig } from \"./multiline-voronoi-chart\"\n\nconst CONTAINER_ID = \"chart\"\nconst SHOW_VORONOI_ID = \"show-voronoi\"\n\ntype InitialDataItem = {\n  [monthKey: string]: string\n  name: string\n}\n\ntype CityMetric = {\n  cityName: string\n  date: Date\n  employmentRate: number\n}\n\ntype City = {\n  metrics: CityMetric[]\n  name: string\n}\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nconst formatStr = \"%Y-%m\"\n\nconst fetchData = async () => {\n  const monthFormat = timeFormat(formatStr)\n  const monthParse = timeParse(formatStr)\n\n  const dataItems = (await tsv(\n    `${ROOT_PATH}data/d3js/multiline-voronoi/data.tsv`\n  )) as unknown as InitialDataItem[]\n\n  const months: Date[] = Object.keys(dataItems[0])\n    .map((v) => monthParse(v)!)\n    .filter(Number)\n\n  const cities: City[] = dataItems.map((initialCity: InitialDataItem) => {\n    const name = initialCity.name\n      .replace(/(msa|necta div|met necta|met div)$/i, \"\")\n      .trim()\n\n    return {\n      metrics: months.map((date: Date) => {\n        const itemKey = monthFormat(date)\n        const { [itemKey as keyof InitialDataItem]: itemValue } = initialCity\n        const employmentRate: number = Number(itemValue) / 100\n\n        return {\n          cityName: name,\n          date,\n          employmentRate,\n        }\n      }),\n      name,\n    }\n  })\n\n  return { cities, months }\n}\n\ntype Config = ChartConfig<City, City[\"metrics\"][number]>\n\nconst getLineId: Config[\"getLineId\"] = (city) => city.name\n\nconst getLinePoints: Config[\"getLinePoints\"] = (city) => city.metrics\nconst getPointYValue: Config[\"getPointYValue\"] = (cityMetric) =>\n  cityMetric.employmentRate\n\nconst getTooltipPart1: Config[\"getTooltipPart1\"] = (cityMetric: CityMetric) =>\n  `${cityMetric.cityName.trim()}: `\n\nconst getTooltipPart2: Config[\"getTooltipPart2\"] = (cityMetric: CityMetric) => {\n  const date = `${\n    monthNames[cityMetric.date.getMonth()]\n  } of ${cityMetric.date.getFullYear()}`\n\n  return ` ${(cityMetric.employmentRate * 100).toFixed(2)}% - ${date}`\n}\n\nconst getLineIdFromPoint: Config[\"getLineIdFromPoint\"] = (cityMetric) =>\n  cityMetric.cityName\n\nconst getPointXValue: Config[\"getPointXValue\"] = (cityMetric) => cityMetric.date\n\nconst getChartConfig = ({\n  cities,\n  months,\n}: {\n  cities: City[]\n  months: Date[]\n}): Config => ({\n  chartTitle: \"US Unemployment Rate\",\n  getLineId,\n  getLineIdFromPoint,\n  getLinePoints,\n  getPointXValue,\n  getPointYValue,\n  getTooltipPart1,\n  getTooltipPart2,\n  lines: cities,\n  rootElId: CONTAINER_ID,\n  times: months,\n})\n\nexport { CONTAINER_ID, SHOW_VORONOI_ID, fetchData, getChartConfig }\n","import { select } from \"d3\"\n\nimport { MultilineVoronoiChart } from \"./multiline-voronoi-chart\"\nimport {\n  CONTAINER_ID,\n  SHOW_VORONOI_ID,\n  fetchData,\n  getChartConfig,\n} from \"./multiline-voronoi-chart-config\"\nimport * as styles from \"./multiline-voronoi.module.css\"\n\nconst main = async () => {\n  const { cities, months } = await fetchData()\n  const chartConfig = getChartConfig({ cities, months })\n\n  const chart = new MultilineVoronoiChart(chartConfig)\n\n  const form = document.getElementById(styles.formVoronoi) as HTMLElement\n  const chartEl = document.getElementById(CONTAINER_ID) as HTMLElement\n\n  chartEl.appendChild(form)\n\n  select(`#${SHOW_VORONOI_ID}`)\n    .property(\"disabled\", false)\n    .on(\"change\", (mouseEvent: MouseEvent) => {\n      chart.setVoronoi((mouseEvent.target as HTMLInputElement).checked || false)\n    })\n}\n\nexport { CONTAINER_ID, SHOW_VORONOI_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  SHOW_VORONOI_ID,\n} from \"@/demos/multiline-voronoi/multiline-voronoi\"\nimport * as styles from \"@/demos/multiline-voronoi/multiline-voronoi.module.css\"\n\nconst MultilineVoronoi = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <form id={styles.formVoronoi}>\n      <input id={SHOW_VORONOI_ID} type=\"checkbox\" />{\" \"}\n      <label htmlFor={SHOW_VORONOI_ID}>Show Voronoi lines</label>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default MultilineVoronoi\n"],"names":["axis","lineHover","formVoronoi","tooltipWidth","MultilineVoronoiChart","config","handleResize","render","this","svg","select","rootElId","append","svgG","xAxis","attr","styles","yAxis","style","text","chartTitle","filter","feMerge","addFilter","linesWrapper","circle","voronoiGroup","tooltip","buildTooltip","elements","state","clickToggle","usedLines","lines","window","addEventListener","getMargin","width","defaultMargin","bottom","left","right","top","setVoronoi","newValue","classed","times","color","scaleOrdinal","schemePastel2","rootEl","document","getElementById","classList","add","elWidth","getBoundingClientRect","margin","isSmallDevice","height","xScale","scaleTime","range","yScale","scaleLinear","lineXTransformer","point","getPointXValue","lineYTransformer","getPointYValue","lineIdToElement","domain","extent","max","line","getLinePoints","nice","call","axisBottom","ticks","undefined","axisLeft","lineD3","x","y","updatedLines","selectAll","data","enter","exit","remove","usedLine","usedLineId","getLineId","points","lineIndex","toString","clicked","find","lineItem","getLineIdFromPoint","on","flatPoints","reduce","acc","forEach","push","voronoi","Delaunay","updatedVoronoi","pointIndex","renderCell","mouseover","lineId","linePath","parentNode","appendChild","rawTranslateX","rawTranslateY","translateX","Math","min","translateY","getTooltipPart1","getTooltipPart2","CONTAINER_ID","SHOW_VORONOI_ID","monthNames","formatStr","fetchData","monthFormat","timeFormat","monthParse","timeParse","tsv","ROOT_PATH","dataItems","months","Object","keys","map","v","Number","cities","initialCity","name","replace","trim","metrics","date","itemKey","itemValue","employmentRate","cityName","city","cityMetric","getMonth","getFullYear","toFixed","getChartConfig","main","chartConfig","chart","form","property","mouseEvent","target","checked","pageContext","id","type","htmlFor"],"sourceRoot":""}