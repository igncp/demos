{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./src/demos/trend-line/trend-line.ts","webpack://demos/./src/pages/d3js/trend-line.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","fetchData","tsv","ROOT_PATH","result","timeFormat","timeParse","data","map","d","occurred","margin","height","animationTime","getInterpolation","line","interpolate","scaleQuantile","domain","range","length","t","interpolatedLine","slice","renderGraph","initialZoomed","rootElId","el","document","getElementById","classList","add","width","getBoundingClientRect","renderContent","isZoomed","svg","select","text","append","attr","x","scaleTime","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","d3Line","extent","min","max","call","datum","transition","duration","attrTween","lr","n","sumX","sumY","sumXY","sumXX","sumYY","forEach","getTime","slope","intercept","r2","Math","pow","sqrt","linearRegression","regressionLine","tmp","delay","style","toExponential","getIsZoomed","querySelector","checked","selectAll","on","demoInfo","pageContext","main","defaultChecked","name","type","id"],"mappings":"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","file":"component---src-pages-d-3-js-trend-line-tsx-160d6ddd59894c56f551.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import {\n  Line,\n  axisBottom,\n  axisLeft,\n  extent,\n  line as d3Line,\n  max,\n  min,\n  range,\n  scaleLinear,\n  scaleQuantile,\n  scaleTime,\n  select,\n  selectAll,\n  timeParse,\n  tsv,\n} from \"d3\"\n\nimport \"./trend-line.styl\"\n\ntype InitialDataItem = {\n  occurred: string\n  value: string\n}\n\ntype DataItem = {\n  occurred: Date\n  value: number\n}\n\nconst fetchData = async (): Promise<DataItem[]> => {\n  const result = (await tsv(\n    `${ROOT_PATH}data/d3js/trend-line/data.tsv`\n  )) as InitialDataItem[]\n\n  const timeFormat = timeParse(\"%Y-%m-%d\")\n\n  const data = result.map((d) => ({\n    occurred: timeFormat(d.occurred) as Date,\n    value: +d.value,\n  }))\n\n  return data\n}\n\nconst margin = {\n  bottom: 50,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst height = 500 - margin.top - margin.bottom\n\nconst animationTime = 2000\n\nconst getInterpolation = (data: DataItem[], line: Line<DataItem>) => {\n  const interpolate = scaleQuantile()\n    .domain([0, 1])\n    .range(range(1, data.length + 1))\n\n  return (t: number): any => {\n    const interpolatedLine = data.slice(0, interpolate(t))\n\n    return line(interpolatedLine)\n  }\n}\n\nconst linearRegression = (data: DataItem[]) => {\n  const lr: { slope?: number; intercept?: number; r2?: number } = {}\n  const n = data.length\n\n  let sumX = 0\n  let sumY = 0\n  let sumXY = 0\n  let sumXX = 0\n  let sumYY = 0\n\n  data.forEach((d) => {\n    sumX += d.occurred.getTime()\n    sumY += d.value\n    sumXX += d.occurred.getTime() * d.occurred.getTime()\n    sumYY += d.value * d.value\n    sumXY += d.occurred.getTime() * d.value\n  })\n  lr.slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX)\n  lr.intercept = (sumY - lr.slope * sumX) / n\n  lr.r2 = Math.pow(\n    (n * sumXY - sumX * sumY) /\n      Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY)),\n    2\n  )\n\n  return lr\n}\n\nconst renderGraph = ({\n  data,\n  initialZoomed,\n  rootElId,\n}: {\n  data: DataItem[]\n  initialZoomed: boolean\n  rootElId: string\n}) => {\n  const el = document.getElementById(rootElId) as HTMLElement\n\n  el.classList.add(\"trend-line-chart\")\n\n  const width = el.getBoundingClientRect().width - margin.left - margin.right\n\n  const renderContent = (isZoomed: boolean) => {\n    const svg = select(`#${rootElId}`)\n      .text(\"\")\n      .append(\"svg\")\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.right})`)\n\n    const x = scaleTime().range([0, width])\n    const y = scaleLinear().range([height, 0])\n    const xAxis = axisBottom(x)\n    const yAxis = axisLeft(y)\n\n    const line = d3Line<DataItem>()\n      .x((d) => x(d.occurred))\n      .y((d) => y(d.value))\n\n    x.domain(extent(data, (d) => d.occurred) as [Date, Date])\n    y.domain([\n      isZoomed ? (min(data, (d) => d.value) as number) : 0,\n      max(data, (d) => d.value) as number,\n    ])\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(xAxis)\n    svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis)\n\n    svg\n      .append(\"path\")\n      .datum(data)\n      .transition()\n      .duration(animationTime)\n      .attrTween(\"d\", () => getInterpolation(data, line))\n      .attr(\"class\", \"line\")\n\n    const lr = linearRegression(data)\n\n    const regressionLine = d3Line<DataItem>()\n      .x((d) => x(d.occurred))\n      .y((d) => {\n        const tmp = lr.intercept! + lr.slope! * +d.occurred\n\n        return y(tmp)\n      })\n\n    svg\n      .append(\"path\")\n      .datum(data)\n      .transition()\n      .delay(animationTime)\n      .duration(animationTime)\n      .attrTween(\"d\", () => getInterpolation(data, regressionLine))\n      .attr(\"class\", \"rline\")\n\n    svg\n      .append(\"text\")\n      .attr(\"transform\", `translate(${width * 0.7},${height * 0.7})`)\n      .style(\"opacity\", 0)\n      .transition()\n      .delay(animationTime * 2)\n      .text(`Slope: ${lr.slope!.toExponential(3)}`)\n      .style(\"opacity\", 1)\n  }\n\n  renderContent(initialZoomed)\n\n  return {\n    renderContent,\n  }\n}\n\nconst main = async () => {\n  const rootElId = \"chart\"\n  const data = await fetchData()\n\n  const getIsZoomed = () =>\n    (document.querySelector('input[value=\"zoom\"]') as HTMLInputElement).checked\n\n  const { renderContent } = renderGraph({\n    data,\n    initialZoomed: getIsZoomed(),\n    rootElId,\n  })\n\n  selectAll('input[name=\"mode\"]').on(\"change\", () => {\n    const isZoomed = getIsZoomed()\n\n    renderContent(isZoomed)\n  })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/trend-line/trend-line\"\n\nconst TrendLine = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <form>\n      <label>\n        <input defaultChecked name=\"mode\" type=\"radio\" value=\"zoom\" /> Zoom\n      </label>\n      <label>\n        <input name=\"mode\" type=\"radio\" value=\"normal\" /> Normal\n      </label>\n    </form>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default TrendLine\n"],"sourceRoot":""}