{"version":3,"file":"component---src-pages-d-3-js-collapsible-tree-tsx-f68f184110d6c5efc058.js","mappings":"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","sources":["webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-ui-link.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-ui-small-button.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-ui-node.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.module.css","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-config.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/pages/d3js/collapsible-tree.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { BaseType, Link, Selection, linkHorizontal } from \"d3\"\n\nimport { CommonUIProps, Point } from \"./collapsible-tree-chart-ui-common\"\n\nconst treeLinkPathClass = \"tree-link\"\n\ntype DiagonalLink = { source: Point; target: Point }\n\ntype UILinkOpts<Container extends BaseType, NodeDatum> = CommonUIProps<\n  Container,\n  NodeDatum\n>\n\n/**\n * Responsible for handle the UI of the link, without any knowledge of the node\n * tree structure, with a constraint on the link data.\n */\nexport class UILink<\n  Container extends BaseType,\n  LinkDatum extends DiagonalLink,\n  NodeDatum\n> {\n  private readonly initialOpts: UILinkOpts<Container, NodeDatum>\n  private readonly linkG: Selection<SVGGElement, NodeDatum, Element, unknown>\n  private readonly linkPath: Link<unknown, DiagonalLink, Point>\n\n  public constructor(opts: UILinkOpts<Container, NodeDatum>) {\n    this.initialOpts = opts\n\n    this.linkPath = linkHorizontal<DiagonalLink, Point>()\n      .x((diagonalNode) => diagonalNode.y)\n      .y((diagonalNode) => diagonalNode.x)\n\n    this.linkG = opts.container\n      .append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", opts.linkDefaultColor)\n      .attr(\"stroke-opacity\", 0.4)\n      .attr(\"stroke-width\", 1.5)\n  }\n\n  public update(opts: {\n    getData: () => [LinkDatum[], (linkData: LinkDatum) => number]\n    source: NodeDatum\n  }) {\n    const {\n      initialOpts: {\n        getInitialPosition,\n        getPosition,\n        openCloseAnimationDuration,\n      },\n      linkG,\n      linkPath,\n    } = this\n    const { getData, source } = opts\n\n    const linkSelection = linkG\n      .selectAll<SVGPathElement, LinkDatum>(\"path\")\n      .data(...getData())\n\n    const linkEnter = linkSelection\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", treeLinkPathClass)\n      .attr(\"d\", () => {\n        const diagonalNode = getInitialPosition(source)\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return linkPath(diagonalLink)\n      })\n\n    linkSelection\n      .merge(linkEnter)\n      .transition()\n      .duration(openCloseAnimationDuration)\n      .attr(\"d\", (link) => linkPath(link))\n\n    linkSelection\n      .exit()\n      .transition()\n      .duration(openCloseAnimationDuration)\n      .remove()\n      .attr(\"d\", () => {\n        const diagonalNode = getPosition(source)\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return linkPath(diagonalLink)\n      })\n  }\n\n  public getSelection() {\n    return this.linkG.selectAll<SVGPathElement, LinkDatum>(\n      `.${treeLinkPathClass}`\n    )\n  }\n}\n","import { BaseType, Selection, select } from \"d3\"\n\ntype UISmallButtonOpts = {\n  dx: string\n  fontSize: string\n  text: string\n}\n\nexport class UISmallButton<\n  Element extends BaseType,\n  Datum,\n  ElementAbove extends BaseType\n> {\n  private readonly className: string\n  private readonly initialOpts: UISmallButtonOpts\n\n  public constructor(opts: UISmallButtonOpts) {\n    this.className = `small-button-${Math.random().toFixed(6).split(\".\")[1]}`\n\n    this.initialOpts = opts\n  }\n\n  public add({\n    container,\n    onClick,\n  }: {\n    container: Selection<Element, Datum, ElementAbove, unknown>\n    onClick: (datum: Datum) => void\n  }) {\n    const {\n      initialOpts: { dx, fontSize, text },\n    } = this\n    const groupSelection = container\n      .append(\"g\")\n      .style(\"transform\", `translate(${dx},-10px)`)\n      .attr(\"class\", this.className)\n      .style(\"display\", \"none\")\n      .attr(\"cursor\", \"pointer\")\n\n    groupSelection\n      .append(\"circle\")\n      .attr(\"r\", 8)\n      .attr(\"cx\", 5)\n      .attr(\"cy\", -7)\n      .attr(\"fill\", \"#ddd\")\n      .style(\"font-size\", fontSize)\n      .text(text)\n\n    const textSelection = groupSelection\n      .append(\"text\")\n      .style(\"font-size\", fontSize)\n      .text(text)\n\n    groupSelection\n      .on(\"mouseenter\", () => {\n        textSelection.attr(\"fill\", \"orange\")\n      })\n      .on(\"mouseleave\", () => {\n        textSelection.attr(\"fill\", null)\n      })\n      .on(\"click\", (...[clickEvent, datum]) => {\n        clickEvent.stopPropagation()\n        onClick(datum)\n      })\n  }\n\n  public hide<ContainerElement extends SVGElement>({\n    container,\n    filterFn,\n  }: {\n    container: ContainerElement\n    filterFn?: (itemData: Datum) => boolean\n  }) {\n    select<ContainerElement, Datum>(container)\n      .selectAll<SVGTextElement, Datum>(`.${this.className}`)\n      .style(\"display\", (itemData) =>\n        !filterFn || filterFn(itemData) ? \"none\" : \"block\"\n      )\n  }\n}\n","import anime from \"animejs\"\nimport { BaseType, Selection, select } from \"d3\"\n\nimport { CommonUIProps } from \"./collapsible-tree-chart-ui-common\"\nimport { UISmallButton } from \"./collapsible-tree-chart-ui-small-button\"\n\ntype UINodeOpts<Container extends BaseType, Datum> = CommonUIProps<\n  Container,\n  Datum\n> &\n  Readonly<{\n    displayRemoveButton: (nodeData: Datum) => boolean\n    getNodeId: (nodeData: Datum) => number\n    getPointingLinkForNode: (\n      nodeData: Datum\n    ) => Selection<SVGElement, unknown, SVGElement, unknown>\n    getText: (nodeData: Datum) => string\n    hasDescendants: (node: Datum) => boolean\n  }>\n\nconst nodeCircleClass = \"node-circle\"\nconst nodeLabelClass = \"node-label\"\n\n/**\n * Responsible for handle the UI of the node, without any knowledge of the node\n * tree structure (it doesn't know how the children nodes are referenced)\n */\nexport class UINode<Container extends BaseType, Datum> {\n  private readonly initialOpts: UINodeOpts<Container, Datum>\n  private readonly nodeG: Selection<SVGGElement, Datum, Element, unknown>\n  private readonly hoveredItems = new Set<number>()\n\n  private readonly plusButton: UISmallButton<SVGGElement, Datum, SVGGElement>\n  private readonly minusButton: UISmallButton<SVGGElement, Datum, SVGGElement>\n\n  private readonly circleLinkForEffect: Selection<\n    SVGCircleElement,\n    Datum,\n    Element,\n    unknown\n  >\n\n  public constructor(opts: UINodeOpts<Container, Datum>) {\n    this.initialOpts = opts\n\n    this.nodeG = this.initialOpts.container\n      .append(\"g\")\n      .attr(\"pointer-events\", \"all\")\n\n    this.circleLinkForEffect = this.initialOpts.container\n      .insert(\"circle\", \":first-child\")\n      .attr(\"r\", 4)\n      .attr(\"fill\", \"none\")\n\n    this.plusButton = new UISmallButton({\n      dx: \"0px\",\n      fontSize: \"20px\",\n      text: \"+\",\n    })\n\n    this.minusButton = new UISmallButton({\n      dx: \"-15px\",\n      fontSize: \"25px\",\n      text: \"-\",\n    })\n  }\n\n  public update(opts: {\n    getData: () => [Datum[], (nodeData: Datum) => number]\n    onNodeAdd: (node: Datum) => void\n    onNodeClick: (node: Datum) => void\n    onNodeRemove: (node: Datum) => void\n    source: Datum\n  }) {\n    const { source } = opts\n    const {\n      circleLinkForEffect,\n      hoveredItems,\n      initialOpts: {\n        displayRemoveButton,\n        getInitialPosition,\n        getNodeId,\n        getPointingLinkForNode,\n        getPosition,\n        getText,\n        hasDescendants,\n        linkDefaultColor,\n      },\n    } = this\n\n    const nodeSelection = this.nodeG\n      .selectAll<SVGGElement, Datum>(\"g\")\n      .data(...opts.getData())\n\n    const circleDefaultFill = (node: Datum) => {\n      if (hasDescendants(node)) {\n        return hoveredItems.has(getNodeId(node)) ? \"blue\" : \"green\"\n      }\n\n      return \"red\"\n    }\n\n    const nodeEnter = nodeSelection\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => {\n        const position = getInitialPosition(source)\n\n        return `translate(${position.y},${position.x})`\n      })\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (...[, treeNode]) => {\n        opts.onNodeClick(treeNode)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .attr(\"class\", nodeCircleClass)\n      .attr(\"stroke-width\", 10)\n\n    const textDX = 10\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"class\", nodeLabelClass)\n      .attr(\"dy\", \"5px\")\n      .style(\"font-size\", \"20px\")\n      .text(getText)\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    const { minusButton, plusButton } = this\n\n    const buttons = [plusButton, minusButton]\n\n    const showButtonsIfNecessary = (container: SVGGElement) => {\n      buttons.forEach((button) => {\n        button.hide({\n          container,\n          filterFn: (node) =>\n            button === minusButton && !displayRemoveButton(node),\n        })\n      })\n    }\n\n    nodeEnter\n      .on(\"mouseenter\", function onMouseEnter(...[, focusedTreeNode]) {\n        hoveredItems.add(getNodeId(focusedTreeNode))\n\n        select<SVGGElement, Datum>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n\n        showButtonsIfNecessary(this)\n\n        const pointingLink = getPointingLinkForNode(focusedTreeNode)\n\n        if (!pointingLink.size()) {\n          return\n        }\n\n        pointingLink.style(\"stroke\", \"orange\")\n        circleLinkForEffect.attr(\"fill\", \"orange\")\n\n        const animePath = anime.path(pointingLink.node() as SVGElement)\n\n        anime({\n          duration: 500,\n          easing: \"easeInOutSine\",\n          endDelay: 1000,\n          loop: true,\n          targets: circleLinkForEffect.node(),\n          translateX: animePath(\"x\"),\n          translateY: animePath(\"y\"),\n        })\n      })\n      .on(\"mouseleave\", function onMouseLeave(...[, focusedTreeNode]) {\n        hoveredItems.delete(getNodeId(focusedTreeNode))\n\n        select<SVGGElement, Datum>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n\n        buttons.forEach((button) => {\n          button.hide({\n            container: this,\n          })\n        })\n\n        const pointingLink = getPointingLinkForNode(focusedTreeNode)\n\n        if (!pointingLink.size()) {\n          return\n        }\n\n        circleLinkForEffect.attr(\"fill\", \"none\")\n\n        pointingLink.style(\"stroke\", linkDefaultColor)\n        anime.remove(circleLinkForEffect.node())\n      })\n\n    nodeSelection\n      .merge(nodeEnter)\n      .transition()\n      .duration(this.initialOpts.openCloseAnimationDuration)\n      .attr(\"transform\", (treeNode) => {\n        const position = getPosition(treeNode)\n\n        return `translate(${position.y},${position.x})`\n      })\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    const groupsToUpdate = [nodeSelection, nodeEnter]\n\n    groupsToUpdate.forEach((nodeGroup) => {\n      plusButton.add({\n        container: nodeGroup,\n        onClick: (nodeDatum) => {\n          opts.onNodeAdd(nodeDatum)\n        },\n      })\n\n      minusButton.add({\n        container: nodeGroup,\n        onClick: (nodeDatum) => {\n          opts.onNodeRemove(nodeDatum)\n        },\n      })\n\n      nodeGroup.each(function setupHover(nodeDatum) {\n        const isHovered = hoveredItems.has(getNodeId(nodeDatum))\n\n        if (isHovered) {\n          showButtonsIfNecessary(this)\n        }\n      })\n\n      nodeGroup.attr(\"cursor\", (treeNode) =>\n        hasDescendants(treeNode) ? \"pointer\" : \"default\"\n      )\n\n      nodeGroup\n        .selectAll<SVGCircleElement, Datum>(`.${nodeCircleClass}`)\n        .attr(\"fill\", circleDefaultFill)\n\n      nodeGroup\n        .selectAll<SVGCircleElement, Datum>(`.${nodeLabelClass}`)\n        .attr(\"dx\", (treeNode) =>\n          hasDescendants(treeNode) ? `-${textDX}px` : `${textDX}px`\n        )\n        .attr(\"x\", (treeNode) => (hasDescendants(treeNode) ? -6 : 6))\n        .attr(\"text-anchor\", (treeNode) =>\n          hasDescendants(treeNode) ? \"end\" : \"start\"\n        )\n    })\n\n    const sourcePosition = getPosition(source)\n\n    nodeSelection\n      .exit()\n      .transition()\n      .duration(this.initialOpts.openCloseAnimationDuration)\n      .remove()\n      .attr(\"transform\", `translate(${sourcePosition.y},${sourcePosition.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n  }\n}\n","import {\n  D3DragEvent,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  Selection,\n  drag,\n  hierarchy,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport { UILink } from \"./collapsible-tree-chart-ui-link\"\nimport { UINode } from \"./collapsible-tree-chart-ui-node\"\nimport * as styles from \"./collapsible-tree.module.css\"\n\nconst inlineStyles = {\n  linkDefaultColor: \"#555\",\n} as const\n\ntype NodeShape<Content> = Content & {\n  children?: Array<NodeShape<Content>>\n}\n\nconst findNode = <NodeData>({\n  getId,\n  node,\n  nodeId,\n}: {\n  getId: (node: NodeShape<NodeData>) => number\n  node: NodeShape<NodeData>\n  nodeId: number\n}): NodeShape<NodeData> | null => {\n  if (getId(node) === nodeId) {\n    return node\n  }\n\n  return (node.children ?? []).reduce<NodeShape<NodeData> | null>(\n    (...[acc, otherNode]) =>\n      acc ?? findNode({ getId, node: otherNode, nodeId }),\n    null\n  )\n}\n\nconst findParentNode = <NodeData>({\n  getId,\n  node,\n  nodeId,\n}: {\n  getId: (node: NodeShape<NodeData>) => number\n  node: NodeShape<NodeData>\n  nodeId: number\n}): NodeShape<NodeData> | null => {\n  if (!node.children?.length) {\n    return null\n  }\n\n  const hasNode = node.children.some((otherNode) => getId(otherNode) === nodeId)\n\n  if (hasNode) {\n    return node\n  }\n\n  return node.children.reduce<NodeShape<NodeData> | null>(\n    (...[acc, otherNode]) =>\n      acc ?? findParentNode({ getId, node: otherNode, nodeId }),\n    null\n  )\n}\n\ntype ChartNode<BaseData> = BaseData &\n  NodeShape<{\n    _children: Array<HierarchyPointNode<ChartNode<BaseData>>> | undefined\n    x: number\n    x0: number\n    y: number\n    y0: number\n  }>\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst openCloseAnimationDuration = 750\nconst height = 800 - margin.top - margin.bottom\n\nconst getChartNode = <BaseData>(\n  initialNode: NodeShape<BaseData>\n): ChartNode<BaseData> => ({\n  ...initialNode,\n  _children: undefined,\n  children: (initialNode.children ?? []).map((subNode) =>\n    getChartNode(subNode)\n  ),\n  x: 0,\n  x0: 0,\n  y: 0,\n  y0: 0,\n})\n\nconst setupDrag = <SelectionData>(\n  svgG: Selection<SVGGElement, SelectionData, HTMLElement, unknown>\n) => {\n  const translateOffset = {\n    x: margin.left,\n    y: height / 2,\n  } as const\n\n  const draggedState = {\n    x: 0,\n    y: 0,\n  }\n\n  const dragHandler = drag<SVGSVGElement, unknown>().on(\n    \"drag\",\n    (dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>) => {\n      draggedState.x += dragEvent.dx\n      draggedState.y += dragEvent.dy\n\n      svgG.attr(\n        \"transform\",\n        `translate(${translateOffset.x + draggedState.x},${\n          translateOffset.y + draggedState.y\n        })`\n      )\n    }\n  )\n\n  svgG.attr(\"transform\", `translate(${translateOffset.x},${translateOffset.y})`)\n\n  const svg = select(svgG.node()!.parentNode as SVGSVGElement)\n\n  svg.style(\"cursor\", \"move\").call(dragHandler)\n}\n\ntype ChartConfig<BaseData> = {\n  canBeRemoved: (node: ChartNode<BaseData>) => boolean\n  getNodeId: (node: ChartNode<BaseData>) => number\n  getNodeLabel: (node: ChartNode<BaseData>) => string\n  onNodeAdd: (node: ChartNode<BaseData>) => NodeShape<BaseData>\n  onNodeRemove: (node: ChartNode<BaseData>) => NodeShape<BaseData>\n  rootData: NodeShape<BaseData>\n  rootElId: string\n}\n\nconst renderChart = <BaseData>(chartConfig: ChartConfig<BaseData>) => {\n  const { rootData, rootElId } = chartConfig\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  type TreeNode = HierarchyPointNode<ChartNode<BaseData>>\n  type TreeLink = HierarchyPointLink<ChartNode<BaseData>>\n\n  const dataNodeRoot = getChartNode(rootData)\n\n  const rootHierarchy = hierarchy<ChartNode<BaseData>>(dataNodeRoot)\n\n  rootHierarchy.data.x0 = height / 2\n  rootHierarchy.data.y0 = 0\n\n  const buildTree = treeD3<ChartNode<BaseData>>().nodeSize([40, 250])\n\n  const rootTree = buildTree(rootHierarchy)\n\n  rootTree.descendants().forEach((treeNode: TreeNode) => {\n    treeNode.data._children = treeNode.children\n\n    if (treeNode.depth) {\n      treeNode.children = undefined\n    }\n  })\n\n  const svgG = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n\n  setupDrag(svgG)\n\n  const commonUIOpts = {\n    container: svgG,\n    getInitialPosition: (node: TreeNode) => ({\n      x: node.data.x0,\n      y: node.data.y0,\n    }),\n    getPosition: (node: TreeNode) => ({ x: node.x, y: node.y }),\n    linkDefaultColor: inlineStyles.linkDefaultColor,\n    openCloseAnimationDuration,\n  }\n\n  const uiLink = new UILink<SVGGElement, TreeLink, TreeNode>(commonUIOpts)\n\n  const uiNode = new UINode({\n    ...commonUIOpts,\n    displayRemoveButton: (treeNode) => chartConfig.canBeRemoved(treeNode.data),\n    getNodeId: (treeNode) => chartConfig.getNodeId(treeNode.data),\n    getPointingLinkForNode: (treeNode) =>\n      uiLink\n        .getSelection()\n        .filter(\n          (link) =>\n            chartConfig.getNodeId(link.target.data) ===\n            chartConfig.getNodeId(treeNode.data)\n        ) as unknown as Selection<SVGElement, unknown, SVGElement, unknown>,\n    getText: (treeNode) => chartConfig.getNodeLabel(treeNode.data),\n    hasDescendants: (node) => !!node.data.children?.length,\n  })\n\n  const update = (source: TreeNode) => {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    buildTree(rootHierarchy)\n\n    uiNode.update({\n      getData: () => [\n        nodes,\n        (treeNode) => chartConfig.getNodeId(treeNode.data),\n      ],\n      onNodeAdd: (clickedTreeNode) => {\n        const newNodeData = chartConfig.onNodeAdd(clickedTreeNode.data)\n        const newDataNode = getChartNode(newNodeData)\n        const newNodeHirarchy = hierarchy<ChartNode<BaseData>>(\n          newDataNode\n        ) as TreeNode\n\n        // @ts-expect-error\n        newNodeHirarchy.depth = clickedTreeNode.depth + 1\n        newNodeHirarchy.parent = clickedTreeNode\n\n        clickedTreeNode.children =\n          clickedTreeNode.children ?? clickedTreeNode.data._children ?? []\n        clickedTreeNode.data._children = clickedTreeNode.children\n        clickedTreeNode.children.push(newNodeHirarchy)\n\n        clickedTreeNode.data.children = clickedTreeNode.data.children ?? []\n        clickedTreeNode.data.children.push(newNodeHirarchy.data)\n\n        window.requestAnimationFrame(() => {\n          update(clickedTreeNode)\n        })\n      },\n      onNodeClick: (treeNode) => {\n        treeNode.children = treeNode.children\n          ? undefined\n          : treeNode.data._children\n\n        update(treeNode)\n      },\n      onNodeRemove: (clickedTreeNode) => {\n        const parentNode = chartConfig.onNodeRemove(clickedTreeNode.data)\n\n        const treeNode = findNode({\n          getId: (node) => chartConfig.getNodeId(node.data),\n          node: rootHierarchy,\n          nodeId: chartConfig.getNodeId(parentNode as ChartNode<BaseData>),\n        }) as TreeNode\n\n        const nodeIndex = treeNode.children!.findIndex(\n          (node) =>\n            chartConfig.getNodeId(node.data) ===\n            chartConfig.getNodeId(clickedTreeNode.data)\n        )\n\n        treeNode.children!.splice(nodeIndex, 1)\n\n        update(treeNode)\n      },\n      source,\n    })\n\n    uiLink.update({\n      getData: () => [\n        links,\n        (treeLink) => chartConfig.getNodeId(treeLink.target.data),\n      ],\n      source,\n    })\n\n    rootTree.eachBefore((treeNode) => {\n      treeNode.data.x0 = treeNode.x\n      treeNode.data.y0 = treeNode.y\n    })\n  }\n\n  update(rootTree)\n}\n\nexport { NodeShape, findNode, findParentNode, ChartConfig, renderChart }\n","// extracted by mini-css-extract-plugin\nexport var collapsibleTreeChart = \"collapsible-tree-module--collapsibleTreeChart--32549\";\nexport var node = \"collapsible-tree-module--node--c0811\";\nexport var link = \"collapsible-tree-module--link--20248\";","import { json } from \"d3\"\n\nimport {\n  ChartConfig,\n  NodeShape,\n  findNode,\n  findParentNode,\n} from \"./collapsible-tree-chart\"\n\nconst CONTAINER_ID = \"chart\"\n\ntype RawData = {\n  name: string\n}\n\ntype BaseData = RawData & {\n  id: number\n}\n\ntype RawNode = NodeShape<BaseData>\ntype BaseNode = NodeShape<BaseData>\n\nconst getBaseNode = ({\n  context,\n  rawNode,\n}: {\n  context: { id: number }\n  rawNode: RawNode\n}): BaseNode => {\n  const { id: nodeId } = context\n\n  context.id += 1\n\n  return {\n    ...rawNode,\n    children: (rawNode.children ?? []).map((rawNodeChildren) =>\n      getBaseNode({ context, rawNode: rawNodeChildren })\n    ),\n    id: nodeId,\n  }\n}\n\nconst findMaxId = (node: BaseNode): BaseNode[\"id\"] =>\n  (node.children ?? []).reduce(\n    (...[acc, childrenNode]) => Math.max(findMaxId(childrenNode), acc),\n    node.id\n  )\n\nconst fetchData = async (): Promise<BaseNode> => {\n  const rawNode = (await json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as RawNode\n\n  return getBaseNode({ context: { id: 0 }, rawNode })\n}\n\ntype Config = ChartConfig<BaseData>\n\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeId: Config[\"getNodeId\"] = (node) => node.id\nconst canBeRemoved: Config[\"canBeRemoved\"] = (node) => node.id !== 0\n\nconst createChartConfig = (rootData: BaseNode): Config => {\n  const onNodeAdd: Config[\"onNodeAdd\"] = (clickedNode) => {\n    const maxId = findMaxId(rootData)\n    const baseNode = findNode({\n      getId: (node) => node.id,\n      node: rootData,\n      nodeId: clickedNode.id,\n    })\n\n    if (!baseNode) {\n      throw new Error(\"Node not found\")\n    }\n\n    const newId = maxId + 1\n\n    baseNode.children = baseNode.children ?? []\n\n    const newNode = {\n      id: newId,\n      name: `New Node id: ${newId}`,\n    }\n\n    baseNode.children.push(newNode)\n\n    return newNode\n  }\n\n  const onNodeRemove: Config[\"onNodeRemove\"] = (clickedNode) => {\n    const parentNode = findParentNode({\n      getId: (node) => node.id,\n      node: rootData,\n      nodeId: clickedNode.id,\n    })\n\n    if (!parentNode) {\n      throw new Error(\"No parent node\")\n    }\n\n    const nodeIndex = parentNode.children!.findIndex(\n      (node) => node.id === clickedNode.id\n    )\n\n    parentNode.children!.splice(nodeIndex, 1)\n\n    return parentNode\n  }\n\n  return {\n    canBeRemoved,\n    getNodeId,\n    getNodeLabel,\n    onNodeAdd,\n    onNodeRemove,\n    rootData,\n    rootElId: CONTAINER_ID,\n  }\n}\n\nexport { CONTAINER_ID, fetchData, createChartConfig }\n","import { renderChart } from \"./collapsible-tree-chart\"\nimport {\n  CONTAINER_ID,\n  createChartConfig,\n  fetchData,\n} from \"./collapsible-tree-chart-config\"\n\nconst main = async () => {\n  const rootData = await fetchData()\n\n  const chartConfig = createChartConfig(rootData)\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["treeLinkPathClass","UILink","opts","this","initialOpts","linkPath","linkHorizontal","x","diagonalNode","y","linkG","container","append","attr","linkDefaultColor","update","getInitialPosition","getPosition","openCloseAnimationDuration","getData","source","linkSelection","selectAll","data","linkEnter","enter","target","merge","transition","duration","link","exit","remove","getSelection","UISmallButton","className","Math","random","toFixed","split","add","onClick","dx","fontSize","text","groupSelection","style","textSelection","on","clickEvent","datum","stopPropagation","hide","filterFn","select","itemData","nodeCircleClass","nodeLabelClass","UINode","hoveredItems","Set","nodeG","circleLinkForEffect","insert","plusButton","minusButton","displayRemoveButton","getNodeId","getPointingLinkForNode","getText","hasDescendants","nodeSelection","circleDefaultFill","node","has","nodeEnter","position","treeNode","onNodeClick","clone","lower","buttons","showButtonsIfNecessary","forEach","button","focusedTreeNode","pointingLink","size","animePath","anime","easing","endDelay","loop","targets","translateX","translateY","delete","nodeGroup","nodeDatum","onNodeAdd","onNodeRemove","each","textDX","sourcePosition","inlineStyles","findNode","getId","nodeId","children","reduce","acc","otherNode","findParentNode","length","some","margin","height","getChartNode","initialNode","_children","undefined","map","subNode","x0","y0","renderChart","chartConfig","rootData","rootElId","rootEl","document","getElementById","classList","width","getBoundingClientRect","dataNodeRoot","rootHierarchy","hierarchy","buildTree","treeD3","nodeSize","rootTree","descendants","depth","svgG","translateOffset","draggedState","dragHandler","drag","dragEvent","dy","parentNode","call","setupDrag","commonUIOpts","uiLink","uiNode","canBeRemoved","filter","getNodeLabel","nodes","reverse","links","clickedTreeNode","newNodeData","newDataNode","newNodeHirarchy","parent","push","window","requestAnimationFrame","nodeIndex","findIndex","splice","treeLink","eachBefore","CONTAINER_ID","getBaseNode","context","rawNode","id","rawNodeChildren","findMaxId","childrenNode","max","fetchData","json","ROOT_PATH","name","createChartConfig","clickedNode","maxId","baseNode","Error","newId","newNode","main","pageContext","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err"],"sourceRoot":""}