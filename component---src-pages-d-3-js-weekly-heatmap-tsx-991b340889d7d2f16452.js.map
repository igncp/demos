{"version":3,"sources":["webpack://demos/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://demos/./src/demos/weekly-heatmap/weekly-heatmap.ts","webpack://demos/./src/pages/d3js/weekly-heatmap.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","colors","buckets","length","days","hours","fetchData","tsv","ROOT_PATH","data","map","timeItem","day","hour","margin","renderChart","rootElId","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","height","Math","ceil","cellSize","floor","legendElementWidth","max","maxD3","colorScale","scaleQuantile","domain","range","svg","select","append","attr","selectAll","enter","text","_d","dayIndex","style","hourStr","hourIndex","heatMap","transition","duration","tooltip","legend","concat","quantiles","d","_value","valueIndex","toFixed","selector","$","container","delay","hide","show","viewport","demoInfo","pageContext","main","id"],"mappings":"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","file":"component---src-pages-d-3-js-weekly-heatmap-tsx-991b340889d7d2f16452.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { max as maxD3, scaleQuantile, select, tsv } from \"d3\"\n\nimport \"./weekly-heatmap.styl\"\n\ntype TimeItem = {\n  day: number\n  hour: number\n  value: number\n}\n\nconst colors = [\n  \"#ffffd9\",\n  \"#edf8b1\",\n  \"#c7e9b4\",\n  \"#7fcdbb\",\n  \"#41b6c4\",\n  \"#1d91c0\",\n  \"#225ea8\",\n  \"#253494\",\n  \"#081d58\",\n]\nconst buckets = colors.length\n\nconst days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]\nconst hours = [\n  \"1 am\",\n  \"2 am\",\n  \"3 am\",\n  \"4 am\",\n  \"5 am\",\n  \"6 am\",\n  \"7 am\",\n  \"8 am\",\n  \"9 am\",\n  \"10 am\",\n  \"11 am\",\n  \"12 am\",\n  \"1 pm\",\n  \"2 pm\",\n  \"3 pm\",\n  \"4 pm\",\n  \"5 pm\",\n  \"6 pm\",\n  \"7 pm\",\n  \"8 pm\",\n  \"9 pm\",\n  \"10 pm\",\n  \"11 pm\",\n  \"12 pm\",\n]\n\nconst fetchData = async (): Promise<TimeItem[]> => {\n  const data: any = await tsv(`${ROOT_PATH}data/d3js/weekly-heatmap/data.tsv`)\n\n  return data.map((timeItem: TimeItem) => ({\n    day: +timeItem.day,\n    hour: +timeItem.hour,\n    value: +timeItem.value,\n  }))\n}\n\nconst margin = {\n  bottom: 100,\n  left: 50,\n  right: 50,\n  top: 50,\n}\n\nconst hoursInDay = 24\nconst rectRadiusSize = 100\nconst extraHeight = 60\nconst axisOffset = -6\n\nconst workingDayMin = 0\nconst workingDayMax = 4\nconst workingHourMin = 7\nconst workingHourMax = 16\n\nconst legendStroke = \"#ccc\"\n\nconst renderChart = async ({\n  data,\n  rootElId,\n}: {\n  data: TimeItem[]\n  rootElId: string\n}) => {\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(\"weekly-heatmap-chart\")\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.left - margin.right\n  const height =\n    Math.ceil((width * 10) / hoursInDay) -\n    margin.top -\n    margin.bottom +\n    extraHeight\n  const cellSize = Math.floor(width / hoursInDay)\n  const legendElementWidth = cellSize * 2\n\n  const max = maxD3(data, (timeItem) => timeItem.value)\n\n  const colorScale = scaleQuantile<string>()\n    .domain([0, buckets - 1, max])\n    .range(colors)\n\n  const svg = select(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"width\", width + margin.left + margin.right)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n  svg\n    .selectAll(\".dayLabel\")\n    .data(days)\n    .enter()\n    .append(\"text\")\n    .text((day) => day)\n    .attr(\"class\", (_d, dayIndex) => {\n      if (dayIndex >= workingDayMin && dayIndex <= workingDayMax) {\n        return \"dayLabel mono axis axis-workweek\"\n      }\n\n      return \"dayLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(${axisOffset},${cellSize / 1.5})`)\n    .attr(\"x\", 0)\n    .attr(\"y\", (_d, dayIndex) => dayIndex * cellSize)\n    .style(\"text-anchor\", \"end\")\n\n  svg\n    .selectAll(\".timeLabel\")\n    .data(hours)\n    .enter()\n    .append(\"text\")\n    .text((hourStr) => hourStr)\n    .attr(\"class\", (_d, hourIndex) => {\n      if (hourIndex >= workingHourMin && hourIndex <= workingHourMax) {\n        return \"timeLabel mono axis axis-worktime\"\n      }\n\n      return \"timeLabel mono axis\"\n    })\n    .attr(\"transform\", `translate(${cellSize / 2}, ${axisOffset})`)\n    .attr(\"x\", (_d, hourIndex) => hourIndex * cellSize)\n    .attr(\"y\", 0)\n    .style(\"text-anchor\", \"middle\")\n\n  const heatMap = svg\n    .selectAll(\".hour\")\n    .data(data)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"hour bordered\")\n    .attr(\"height\", cellSize)\n    .attr(\"rx\", rectRadiusSize)\n    .attr(\"ry\", rectRadiusSize)\n    .attr(\"width\", cellSize)\n    .attr(\"x\", (timeItem) => (timeItem.hour - 1) * cellSize)\n    .attr(\"y\", (timeItem) => (timeItem.day - 1) * cellSize)\n    .style(\"fill\", colors[0])\n\n  heatMap\n    .transition()\n    .duration(6000)\n    .style(\"fill\", (timeItem) => colorScale(timeItem.value))\n\n  heatMap.attr(\"data-title\", (timeItem) => `Value: ${timeItem.value}`)\n\n  tooltip(\".hour\")\n\n  const legend = svg\n    .selectAll(\".legend\")\n    .data<any>([0].concat(colorScale.quantiles()), (d) => d)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"legend\")\n\n  legend\n    .append(\"rect\")\n    .attr(\"x\", (_value, valueIndex) => legendElementWidth * valueIndex)\n    .attr(\"y\", height)\n    .attr(\"width\", legendElementWidth)\n    .attr(\"height\", cellSize / 2)\n    .style(\"fill\", (_value, valueIndex) => colors[valueIndex])\n    .style(\"stroke\", legendStroke)\n\n  legend\n    .append(\"text\")\n    .attr(\"class\", \"mono\")\n    .text((value) => `â‰¥ ${value.toFixed(2)}`)\n    .attr(\"x\", (_value, valueIndex) => legendElementWidth * valueIndex)\n    .attr(\"y\", height + cellSize)\n}\n\n// @TODO: tooltip not working\nconst tooltip = (selector: string) => {\n  const opts = {\n    leftOffst: 60,\n    tOpts: {\n      container: \"body\",\n      delay: {\n        hide: 0,\n        show: 500,\n      },\n      viewport: {\n        selector: \"#chart svg\",\n      },\n    },\n    topOffst: 40,\n  }\n\n  const sel: any = $(selector)\n\n  sel.tooltip(opts.tOpts)\n}\n\nconst main = async () => {\n  const data = await fetchData()\n\n  renderChart({ data, rootElId: \"chart\" })\n}\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main from \"@/demos/weekly-heatmap/weekly-heatmap\"\n\nconst WeeklyHeatmap = ({ pageContext: { demoInfo } }: DemoPageProps) => (\n  <Demo demoInfo={demoInfo} main={main}>\n    <div id=\"chart\" />\n  </Demo>\n)\n\nexport default WeeklyHeatmap\n"],"sourceRoot":""}