{"version":3,"file":"component---src-pages-d-3-js-collapsible-tree-tsx-7d25693eae6d1e698c01.js","mappings":"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","sources":["webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.module.css","webpack://demos/./src/demos/collapsible-tree/collapsible-tree-chart-config.ts","webpack://demos/./src/demos/collapsible-tree/collapsible-tree.ts","webpack://demos/./src/pages/d3js/collapsible-tree.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import {\n  D3DragEvent,\n  HierarchyNode,\n  HierarchyPointLink,\n  HierarchyPointNode,\n  Selection,\n  drag,\n  hierarchy,\n  linkHorizontal,\n  select,\n  tree as treeD3,\n} from \"d3\"\n\nimport * as styles from \"./collapsible-tree.module.css\"\n\nexport type NodeShape<Content> = Content & {\n  children?: Array<NodeShape<Content>>\n}\n\ntype DataNode<BaseData> = BaseData &\n  NodeShape<{\n    _children: Array<HierarchyPointNode<DataNode<BaseData>>> | undefined\n    x: number\n    x0: number\n    y: number\n    y0: number\n  }>\n\ntype DiagonalNode = { x: number; y: number }\ntype DiagonalLink = { source: DiagonalNode; target: DiagonalNode }\n\nconst margin = {\n  bottom: 20,\n  left: 120,\n  right: 120,\n  top: 20,\n}\n\nconst duration = 750\nconst height = 800 - margin.top - margin.bottom\n\nconst getDataNode = <BaseData>(\n  initialNode: NodeShape<BaseData>\n): DataNode<BaseData> => ({\n  ...initialNode,\n  _children: undefined,\n  children: (initialNode.children ?? []).map((subNode) => getDataNode(subNode)),\n  x: 0,\n  x0: 0,\n  y: 0,\n  y0: 0,\n})\n\nconst setupDrag = <SelectionData>(\n  svgG: Selection<SVGGElement, SelectionData, HTMLElement, unknown>\n) => {\n  const translateOffset = {\n    x: margin.left,\n    y: height / 2,\n  } as const\n\n  const draggedState = {\n    x: 0,\n    y: 0,\n  }\n\n  const dragHandler = drag<SVGSVGElement, unknown>().on(\n    \"drag\",\n    (dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>) => {\n      draggedState.x += dragEvent.dx\n      draggedState.y += dragEvent.dy\n\n      svgG.attr(\n        \"transform\",\n        `translate(${translateOffset.x + draggedState.x},${\n          translateOffset.y + draggedState.y\n        })`\n      )\n    }\n  )\n\n  svgG.attr(\"transform\", `translate(${translateOffset.x},${translateOffset.y})`)\n\n  const svg = select(svgG.node()!.parentNode as SVGSVGElement)\n\n  svg.style(\"cursor\", \"move\").call(dragHandler)\n}\n\nexport type ChartConfig<BaseData> = {\n  getNodeId: (node: DataNode<BaseData>) => number\n  getNodeLabel: (node: DataNode<BaseData>) => string\n  rootData: NodeShape<BaseData>\n  rootElId: string\n}\n\nexport const renderChart = <BaseData>(chartConfig: ChartConfig<BaseData>) => {\n  const { rootData, rootElId } = chartConfig\n\n  const rootEl = document.getElementById(rootElId) as HTMLElement\n\n  rootEl.classList.add(styles.collapsibleTreeChart)\n\n  const width =\n    rootEl.getBoundingClientRect().width - margin.right - margin.left\n\n  type TreeNode = HierarchyPointNode<DataNode<BaseData>>\n  type TreeLink = HierarchyPointLink<DataNode<BaseData>>\n  type HierarchyDataNode = HierarchyNode<DataNode<BaseData>>\n\n  const dataNodeRoot = getDataNode(rootData)\n\n  const rootHierarchy = hierarchy<DataNode<BaseData>>(dataNodeRoot)\n\n  rootHierarchy.data.x0 = height / 2\n  rootHierarchy.data.y0 = 0\n\n  const tree = treeD3<DataNode<BaseData>>().nodeSize([40, 250])\n\n  const rootTree = tree(rootHierarchy)\n\n  rootTree.descendants().forEach((treeNode: TreeNode) => {\n    treeNode.data._children = treeNode.children\n\n    if (treeNode.depth) {\n      treeNode.children = undefined\n    }\n  })\n\n  const diagonal = linkHorizontal<DiagonalLink, DiagonalNode>()\n    .x((diagonalNode) => diagonalNode.y)\n    .y((diagonalNode) => diagonalNode.x)\n\n  const svgG = select<SVGElement, TreeNode>(`#${rootElId}`)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n\n  setupDrag(svgG)\n\n  const gLink = svgG\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5)\n\n  const gNode = svgG.append(\"g\").attr(\"pointer-events\", \"all\")\n\n  const update = function (source: TreeNode) {\n    const nodes = rootTree.descendants().reverse()\n    const links = rootTree.links()\n\n    tree(rootHierarchy)\n\n    let left = rootHierarchy\n    let right = rootHierarchy\n\n    rootHierarchy.eachBefore((node: HierarchyDataNode) => {\n      if (node.data.x < left.data.x) {\n        left = node\n      }\n\n      if (node.data.x > right.data.x) {\n        right = node\n      }\n    })\n\n    const node = gNode\n      .selectAll<SVGGElement, TreeNode>(\"g\")\n      .data(nodes, (treeNode) => chartConfig.getNodeId(treeNode.data))\n\n    const circleDefaultFill = (treeNode: TreeNode) =>\n      treeNode.data._children ? \"green\" : \"red\"\n\n    const nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", () => `translate(${source.data.y0},${source.data.x0})`)\n      .attr(\"cursor\", (treeNode) =>\n        treeNode.data._children ? \"pointer\" : \"default\"\n      )\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (...[, treeNode]) => {\n        treeNode.children = treeNode.children\n          ? undefined\n          : treeNode.data._children\n\n        update(treeNode)\n      })\n      .on(\"mouseenter\", function () {\n        select<SVGGElement, TreeNode>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", (treeNode) =>\n            treeNode.data._children ? \"blue\" : circleDefaultFill(treeNode)\n          )\n      })\n      .on(\"mouseleave\", function () {\n        select<SVGGElement, TreeNode>(this)\n          .select<SVGCircleElement>(\"circle\")\n          .attr(\"fill\", circleDefaultFill)\n      })\n\n    nodeEnter\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .attr(\"fill\", circleDefaultFill)\n      .attr(\"stroke-width\", 10)\n\n    nodeEnter\n      .append(\"text\")\n      .attr(\"dy\", \"5px\")\n      .attr(\"dx\", (treeNode) => (treeNode.data._children ? \"-10px\" : \"10px\"))\n      .attr(\"x\", (treeNode) => (treeNode.data._children ? -6 : 6))\n      .style(\"font-size\", \"20px\")\n      .attr(\"text-anchor\", (treeNode) =>\n        treeNode.data._children ? \"end\" : \"start\"\n      )\n      .text((treeNode) => chartConfig.getNodeLabel(treeNode.data))\n      .clone(true)\n      .lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\")\n\n    node\n      .merge(nodeEnter)\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", (treeNode) => `translate(${treeNode.y},${treeNode.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1)\n\n    node\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"transform\", () => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n\n    const link = gLink\n      .selectAll<SVGPathElement, TreeLink>(\"path\")\n      .data(links, (treeLink) => chartConfig.getNodeId(treeLink.target.data))\n\n    const linkEnter = link\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", () => {\n        const diagonalNode = {\n          x: source.data.x0,\n          y: source.data.y0,\n        }\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return diagonal(diagonalLink)\n      })\n\n    link.merge(linkEnter).transition().duration(duration).attr(\"d\", diagonal)\n\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .remove()\n      .attr(\"d\", () => {\n        const diagonalNode = {\n          x: source.x,\n          y: source.y,\n        }\n        const diagonalLink = { source: diagonalNode, target: diagonalNode }\n\n        return diagonal(diagonalLink)\n      })\n\n    rootTree.eachBefore((treeNode) => {\n      treeNode.data.x0 = treeNode.x\n      treeNode.data.y0 = treeNode.y\n    })\n  }\n\n  update(rootTree)\n}\n","// extracted by mini-css-extract-plugin\nexport var collapsibleTreeChart = \"collapsible-tree-module--collapsibleTreeChart--39sg1\";\nexport var node = \"collapsible-tree-module--node--3s-yN\";\nexport var link = \"collapsible-tree-module--link--tyAR_\";","import { json } from \"d3\"\n\nimport { ChartConfig, NodeShape } from \"./collapsible-tree-chart\"\n\nexport const CONTAINER_ID = \"chart\"\n\ntype RawData = {\n  name: string\n}\n\ntype BaseData = RawData & {\n  id: number\n}\n\ntype RawNode = NodeShape<BaseData>\ntype BaseNode = NodeShape<BaseData>\n\nconst getBaseNode = ({\n  context,\n  rawNode,\n}: {\n  context: { id: number }\n  rawNode: RawNode\n}): BaseNode => {\n  const { id: nodeId } = context\n\n  context.id += 1\n\n  return {\n    ...rawNode,\n    children: (rawNode.children ?? []).map((rawNodeChildren) =>\n      getBaseNode({ context, rawNode: rawNodeChildren })\n    ),\n    id: nodeId,\n  }\n}\n\nexport const fetchData = async (): Promise<BaseNode> => {\n  const rawNode = (await json(\n    `${ROOT_PATH}data/d3js/collapsible-tree/data.json`\n  )) as RawNode\n\n  return getBaseNode({ context: { id: 0 }, rawNode })\n}\n\ntype Config = ChartConfig<BaseData>\n\nconst getNodeLabel: Config[\"getNodeLabel\"] = (node) => node.name\nconst getNodeId: Config[\"getNodeId\"] = (node) => node.id\n\nexport const createChartConfig = (rootData: BaseNode): Config => ({\n  getNodeId,\n  getNodeLabel,\n  rootData,\n  rootElId: CONTAINER_ID,\n})\n","import { renderChart } from \"./collapsible-tree-chart\"\nimport {\n  CONTAINER_ID,\n  createChartConfig,\n  fetchData,\n} from \"./collapsible-tree-chart-config\"\n\nconst main = async () => {\n  const rootData = await fetchData()\n\n  const chartConfig = createChartConfig(rootData)\n\n  renderChart(chartConfig)\n}\n\nexport { CONTAINER_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, { CONTAINER_ID } from \"@/demos/collapsible-tree/collapsible-tree\"\n\nconst CollapsibleTree = ({ pageContext }: DemoPageProps) => (\n  <Demo main={main} pageContext={pageContext}>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default CollapsibleTree\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["margin","duration","height","getDataNode","initialNode","_children","undefined","children","map","subNode","x","x0","y","y0","renderChart","chartConfig","rootData","rootElId","rootEl","document","getElementById","classList","add","width","getBoundingClientRect","dataNodeRoot","rootHierarchy","hierarchy","data","tree","treeD3","nodeSize","rootTree","descendants","forEach","treeNode","depth","diagonal","linkHorizontal","diagonalNode","svgG","select","append","attr","translateOffset","draggedState","dragHandler","drag","on","dragEvent","dx","dy","node","parentNode","style","call","setupDrag","gLink","gNode","update","source","nodes","reverse","links","left","right","eachBefore","selectAll","getNodeId","circleDefaultFill","nodeEnter","enter","this","text","getNodeLabel","clone","lower","merge","transition","exit","remove","link","treeLink","target","linkEnter","CONTAINER_ID","getBaseNode","context","rawNode","nodeId","id","rawNodeChildren","fetchData","json","ROOT_PATH","name","createChartConfig","pageContext","main","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err"],"sourceRoot":""}