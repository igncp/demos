{"version":3,"file":"component---src-pages-d-3-js-weekly-heatmap-tsx-3d7c3cd75f2f22158791.js","mappings":"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","sources":["webpack://demos/./src/common.ts","webpack://demos/./src/demos/weekly-heatmap/weekly-heatmap.module.css","webpack://demos/./src/demos/weekly-heatmap/weekly-heatmap-chart.ts","webpack://demos/./src/demos/weekly-heatmap/weekly-heatmap-data.ts","webpack://demos/./src/demos/weekly-heatmap/weekly-heatmap.ts","webpack://demos/./src/pages/d3js/weekly-heatmap.tsx","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js","webpack://demos/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["type DocName = string\ntype DocLink = string\n\ntype Meta = {\n  description: string\n}\n\ntype DemoBase = {\n  dataFiles: string[]\n  docs: Array<[DocName, DocLink]>\n  isCompleted: boolean\n  name: string\n  notes: string[]\n  sources: string[]\n  summary: string[]\n}\n\ntype DemoFile = {\n  content: string\n  filePath: string\n}\n\ntype DemoInfo = DemoBase & {\n  category: string\n  files: {\n    demoCSS: DemoFile[]\n    demoTS: DemoFile[]\n    page: {\n      content: string\n      type: string\n    }\n  }\n  key: string\n}\n\ntype DemoSummary = {\n  category: string\n  key: string\n  name: DemoBase[\"name\"]\n  route: string\n}\n\ntype IndexPageProps = {\n  pageContext: {\n    groupedDemos: DemoSummary[][]\n    meta: Meta\n    numberPerGroup: number\n  }\n}\n\ntype DemoPageProps = {\n  pageContext: {\n    demoInfo: DemoInfo\n    meta: Meta\n  }\n}\n\nenum SPECIAL_DEMO_KEYS {\n  STORYBOOK = \"storybook\",\n  TESTING = \"testing\",\n}\n\nconst JQUERYUI = {\n  SCRIPT: \"/vendors/jquery-ui/jquery-ui.min.js\",\n  STYLE: \"/vendors/jquery-ui/themes/base/jquery-ui.min.css\",\n}\n\nexport {\n  DemoBase,\n  DemoInfo,\n  DemoPageProps,\n  DemoSummary,\n  IndexPageProps,\n  JQUERYUI,\n  Meta,\n  SPECIAL_DEMO_KEYS,\n}\n","// extracted by mini-css-extract-plugin\nexport var weeklyHeatmapChart = \"weekly-heatmap-module--weeklyHeatmapChart--f1173\";\nexport var bordered = \"weekly-heatmap-module--bordered--2b26a\";\nexport var mono = \"weekly-heatmap-module--mono--4476c\";\nexport var axisBold = \"weekly-heatmap-module--axisBold--507d8\";","import {\n  D3DragEvent,\n  Selection,\n  drag as dragD3,\n  max as maxD3,\n  scaleQuantile,\n  select,\n} from \"d3\"\n\nimport * as styles from \"./weekly-heatmap.module.css\"\n\nconst colors = [\n  \"#ffffd9\",\n  \"#edf8b1\",\n  \"#c7e9b4\",\n  \"#7fcdbb\",\n  \"#41b6c4\",\n  \"#1d91c0\",\n  \"#225ea8\",\n  \"#253494\",\n  \"#081d58\",\n]\nconst { length: buckets } = colors\n\nconst margin = {\n  bottom: 100,\n  left: 50,\n  right: 50,\n  top: 50,\n}\nconst minHeight = 250\nconst minWidth = 850\n\nconst rectRadiusSize = 100\nconst extraHeight = 60\nconst axisOffset = -6\n\nconst legendStroke = \"#ccc\"\n\ntype ChartConfig<ChartData> = Readonly<{\n  getIsHorizontalLabelBold: (label: string, labelIndex: number) => boolean\n  getIsVerticalLabelBold: (label: string, labelIndex: number) => boolean\n  getItemHorizontalIndex: (cell: ChartData) => number\n  getItemTooltip: (cell: ChartData) => string\n  getItemValue: (cell: ChartData) => number\n  getItemVerticalIndex: (cell: ChartData) => number\n  getLegendText: (cellValue: number) => string\n  horizontalLabels: string[]\n  rootElId: string\n  verticalLabels: string[]\n  weeklyData: ChartData[]\n}>\n\ntype ChartElements<ChartData> = Readonly<{\n  cellsSel: Selection<SVGGElement, ChartData, SVGGElement, unknown>\n  gSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  legendSel: Selection<SVGGElement, number, SVGGElement, unknown>\n  svgDragSel: Selection<SVGGElement, unknown, HTMLElement, unknown>\n  svgSel: Selection<SVGSVGElement, unknown, HTMLElement, unknown>\n}>\n\ntype ChartClasses = Readonly<{\n  cell: string\n  legend: string\n}>\n\nclass HeatmapChart<ChartData> {\n  private readonly config: ChartConfig<ChartData>\n  private readonly elements: ChartElements<ChartData>\n  private readonly classes: ChartClasses\n  private readonly state = {\n    drag: {\n      x: 0,\n      y: 0,\n    },\n    width: 0,\n  }\n\n  private constructor(chartConfig: ChartConfig<ChartData>) {\n    this.config = chartConfig\n\n    const { rootElId } = chartConfig\n\n    const svgSel = select(`#${rootElId}`).append(\"svg\")\n    const svgDragSel = svgSel.append(\"g\")\n    const gSel = svgDragSel.append(\"g\")\n\n    const chartClasses = {\n      cell: \"cell\",\n      legend: \"legend\",\n    }\n\n    this.classes = chartClasses\n\n    this.elements = {\n      get cellsSel() {\n        return gSel.selectAll<SVGGElement, ChartData>(`.${chartClasses.cell}`)\n      },\n      gSel,\n      get legendSel() {\n        return gSel.selectAll<SVGGElement, number>(`.${chartClasses.legend}`)\n      },\n      svgDragSel,\n      svgSel,\n    }\n\n    this.render()\n\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  public static renderChart<ChartData>(chartConfig: ChartConfig<ChartData>) {\n    return new HeatmapChart<ChartData>(chartConfig)\n  }\n\n  public teardown() {\n    window.removeEventListener(\"resize\", this.handleResize)\n  }\n\n  public refresh() {\n    this.render()\n  }\n\n  private render() {\n    const { config, elements } = this\n    const { horizontalLabels, rootElId, verticalLabels, weeklyData } = config\n    const rootEl = document.getElementById(rootElId) as HTMLElement\n\n    rootEl.classList.add(styles.weeklyHeatmapChart)\n\n    const fullWidth =\n      rootEl.getBoundingClientRect().width - margin.left - margin.right\n    const width = Math.max(fullWidth, minWidth)\n\n    this.state.width = fullWidth\n\n    const height = Math.max(\n      Math.ceil((width * 10) / horizontalLabels.length) -\n        margin.top -\n        margin.bottom +\n        extraHeight,\n      minHeight\n    )\n    const cellSize = Math.floor(width / horizontalLabels.length)\n    const legendElementWidth = cellSize * 2\n\n    const max = maxD3(weeklyData, (cell) => config.getItemValue(cell))\n\n    const colorScale = scaleQuantile<string>()\n      .domain([0, buckets - 1, max])\n      .range(colors)\n\n    elements.svgSel\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"width\", width + margin.left + margin.right)\n\n    elements.gSel.attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n    elements.gSel\n      .selectAll(\".verticalLabel\")\n      .data(verticalLabels)\n      .enter()\n      .append(\"text\")\n      .attr(\n        \"class\",\n        (...[label, labelIndex]) =>\n          `verticalLabel ${styles.mono} axis${\n            config.getIsVerticalLabelBold(label, labelIndex)\n              ? ` ${styles.axisBold}`\n              : \"\"\n          }`\n      )\n\n    elements.gSel\n      .selectAll<SVGTextElement, string>(\".verticalLabel\")\n      .text((label) => label)\n      .attr(\"transform\", `translate(${axisOffset},${cellSize / 1.5})`)\n      .attr(\"x\", 0)\n      .attr(\"y\", (...[, labelIndex]) => labelIndex * cellSize)\n      .style(\"text-anchor\", \"end\")\n\n    elements.gSel\n      .selectAll(\".horizontalLabel\")\n      .data(horizontalLabels)\n      .enter()\n      .append(\"text\")\n      .text((label) => label)\n      .style(\"text-anchor\", \"middle\")\n      .attr(\n        \"class\",\n        (...[label, labelIndex]) =>\n          `horizontalLabel ${styles.mono} axis${\n            config.getIsHorizontalLabelBold(label, labelIndex)\n              ? ` ${styles.axisBold}`\n              : \"\"\n          }`\n      )\n\n    elements.gSel\n      .selectAll<SVGTextElement, string>(\".horizontalLabel\")\n      .attr(\"transform\", `translate(${cellSize / 2}, ${axisOffset})`)\n      .attr(\"x\", (...[, labelIndex]) => labelIndex * cellSize)\n      .attr(\"y\", 0)\n\n    elements.cellsSel\n      .data(weeklyData)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", `${this.classes.cell} ${styles.bordered}`)\n      .style(\"fill\", colors[0])\n\n    elements.cellsSel\n      .transition()\n      .duration(2000)\n      .style(\"fill\", (cellItem) => colorScale(config.getItemValue(cellItem)))\n\n    elements.cellsSel\n      .attr(\"height\", cellSize)\n      .attr(\"rx\", rectRadiusSize)\n      .attr(\"ry\", rectRadiusSize)\n      .attr(\"width\", cellSize)\n      .attr(\n        \"x\",\n        (cellItem) => config.getItemHorizontalIndex(cellItem) * cellSize\n      )\n      .attr(\"y\", (cellItem) => config.getItemVerticalIndex(cellItem) * cellSize)\n      .attr(\"title\", config.getItemTooltip)\n\n    $(`.${this.classes.cell}`).tooltip()\n\n    const legendData = [0].concat(colorScale.quantiles())\n\n    const legendNew = elements.legendSel\n      .data(legendData)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", this.classes.legend)\n\n    legendNew\n      .append(\"rect\")\n      .style(\"fill\", (...[, valueIndex]) => colors[valueIndex])\n      .style(\"stroke\", legendStroke)\n\n    legendNew\n      .append(\"text\")\n      .attr(\"class\", styles.mono)\n      .style(\"text-anchor\", \"middle\")\n\n    elements.legendSel.each(function handleLegendItem(\n      ...[valueItem, valueIndex]\n    ) {\n      select(this)\n        .selectAll(\"rect\")\n        .attr(\"x\", legendElementWidth * valueIndex)\n        .attr(\"y\", height)\n        .attr(\"width\", legendElementWidth)\n        .attr(\"height\", cellSize / 2)\n\n      select(this)\n        .selectAll<SVGTextElement, unknown>(`.${styles.mono}`)\n        .attr(\"x\", legendElementWidth * valueIndex + legendElementWidth / 2)\n        .text(config.getLegendText(valueItem))\n        .attr(\"y\", height + cellSize)\n    })\n\n    this.setupDrag()\n  }\n\n  private setupDrag() {\n    const { elements } = this\n\n    const updateDrag = () => {\n      this.elements.svgDragSel.attr(\n        \"transform\",\n        `translate(${this.state.drag.x},${this.state.drag.y})`\n      )\n    }\n\n    const canUseDrag = this.state.width < minWidth\n\n    const dragHandler = (\n      dragEvent: D3DragEvent<SVGSVGElement, unknown, unknown>\n    ) => {\n      if (!canUseDrag) {\n        return\n      }\n\n      this.state.drag.x += dragEvent.dx\n      this.state.drag.y += dragEvent.dy\n\n      updateDrag()\n    }\n\n    const dragBehavior = dragD3<SVGSVGElement, unknown>().on(\n      \"drag\",\n      dragHandler\n    )\n\n    elements.svgSel.style(\"cursor\", canUseDrag ? \"move\" : \"default\")\n\n    if (!canUseDrag) {\n      this.state.drag = { x: 0, y: 0 }\n    }\n\n    elements.svgSel.call(dragBehavior).on(\"drag\", dragHandler)\n\n    updateDrag()\n  }\n\n  private readonly handleResize = () => {\n    this.render()\n  }\n}\n\nexport { HeatmapChart, ChartConfig }\n","import { tsv } from \"d3\"\n\nimport { ChartConfig } from \"./weekly-heatmap-chart\"\n\nconst CONTAINER_ID = \"chart\"\nconst UPDATE_BUTTON_ID = \"update-random\"\n\ntype TimeItem = {\n  arbitraryMetric: number\n  day: number\n  hour: number\n}\n\ntype TimeItemOriginal = {\n  day: number\n  hour: number\n  value: number // eslint-disable-line id-denylist\n}\n\nconst days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]\n\nconst hours = Array.from({ length: 24 }).map(\n  (...[, hourIndex]: [unknown, number]) => {\n    const normalizedHour = hourIndex % 12\n\n    return `${normalizedHour + 1}${\n      hourIndex >= 11 && hourIndex !== 23 ? \"pm\" : \"am\"\n    }`\n  }\n)\n\nconst workingHourMin = 7\nconst workingHourMax = 16\nconst workingDayMin = 0\nconst workingDayMax = 4\n\nconst fetchData = async (): Promise<TimeItem[]> => {\n  const weeklyTSVData = (await tsv(\n    `${ROOT_PATH}data/d3js/weekly-heatmap/data.tsv`\n  )) as unknown as TimeItemOriginal[]\n\n  return weeklyTSVData.map((timeItem) => ({\n    arbitraryMetric: +timeItem.value,\n    day: +timeItem.day,\n    hour: +timeItem.hour,\n  }))\n}\n\ntype Config = ChartConfig<TimeItem>\n\nconst getItemValue: Config[\"getItemValue\"] = (timeItem) =>\n  timeItem.arbitraryMetric\n\nconst getItemTooltip: Config[\"getItemTooltip\"] = (timeItem) =>\n  `Arbitrary Metric: ${timeItem.arbitraryMetric.toFixed(2)}`\n\nconst getItemHorizontalIndex: Config[\"getItemHorizontalIndex\"] = (timeItem) =>\n  timeItem.hour - 1\n\nconst getItemVerticalIndex: Config[\"getItemVerticalIndex\"] = (timeItem) =>\n  timeItem.day - 1\n\nconst getIsHorizontalLabelBold: Config[\"getIsHorizontalLabelBold\"] = (\n  ...[, hourIndex]\n) => hourIndex >= workingHourMin && hourIndex <= workingHourMax\n\nconst getIsVerticalLabelBold: Config[\"getIsVerticalLabelBold\"] = (\n  ...[, dayIndex]\n) => dayIndex >= workingDayMin && dayIndex <= workingDayMax\n\nconst getLegendText: Config[\"getLegendText\"] = (arbitraryMetric) =>\n  `≥ ${arbitraryMetric.toFixed(2)}`\n\nconst createChartConfig = (weeklyData: TimeItem[]): Config => ({\n  getIsHorizontalLabelBold,\n  getIsVerticalLabelBold,\n  getItemHorizontalIndex,\n  getItemTooltip,\n  getItemValue,\n  getItemVerticalIndex,\n  getLegendText,\n  horizontalLabels: hours,\n  rootElId: CONTAINER_ID,\n  verticalLabels: days,\n  weeklyData,\n})\n\nexport {\n  CONTAINER_ID,\n  TimeItem,\n  UPDATE_BUTTON_ID,\n  createChartConfig,\n  fetchData,\n}\n","import { HeatmapChart } from \"./weekly-heatmap-chart\"\nimport {\n  CONTAINER_ID,\n  TimeItem,\n  UPDATE_BUTTON_ID,\n  createChartConfig,\n  fetchData,\n} from \"./weekly-heatmap-data\"\n\nconst main = async () => {\n  const weeklyData = await fetchData()\n  const chartConfig = createChartConfig(weeklyData)\n\n  const heatmap = HeatmapChart.renderChart<TimeItem>(chartConfig)\n\n  document.getElementById(UPDATE_BUTTON_ID)?.addEventListener(\"click\", () => {\n    weeklyData.forEach((weeklyDataItem) => {\n      const shouldUpdate = Math.random() > 0.85\n\n      if (shouldUpdate) {\n        weeklyDataItem.arbitraryMetric += Math.random() * 100 + 30\n      }\n    })\n    heatmap.refresh()\n  })\n}\n\nexport { CONTAINER_ID, UPDATE_BUTTON_ID }\n\nexport default main\n","import React from \"react\"\n\nimport { DemoPageProps, JQUERYUI } from \"@/common\"\n\nimport Demo from \"@/components/demo\"\n\nimport main, {\n  CONTAINER_ID,\n  UPDATE_BUTTON_ID,\n} from \"@/demos/weekly-heatmap/weekly-heatmap\"\n\nconst WeeklyHeatmap = ({ pageContext }: DemoPageProps) => (\n  <Demo\n    links={[JQUERYUI.STYLE]}\n    main={main}\n    pageContext={pageContext}\n    scripts={[JQUERYUI.SCRIPT]}\n  >\n    <form style={{ marginBottom: 20 }}>\n      <button className=\"btn btn-info\" id={UPDATE_BUTTON_ID} type=\"button\">\n        Update Random\n      </button>\n    </form>\n    <div id={CONTAINER_ID} />\n  </Demo>\n)\n\nexport default WeeklyHeatmap\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["SPECIAL_DEMO_KEYS","JQUERYUI","SCRIPT","STYLE","mono","axisBold","colors","buckets","length","margin","HeatmapChart","chartConfig","state","drag","x","y","width","handleResize","render","this","config","rootElId","svgSel","select","append","svgDragSel","gSel","chartClasses","cell","legend","classes","elements","cellsSel","selectAll","legendSel","window","addEventListener","renderChart","teardown","removeEventListener","refresh","horizontalLabels","verticalLabels","weeklyData","rootEl","document","getElementById","classList","add","fullWidth","getBoundingClientRect","Math","max","height","ceil","cellSize","floor","legendElementWidth","maxD3","getItemValue","colorScale","scaleQuantile","domain","range","attr","data","enter","label","labelIndex","styles","getIsVerticalLabelBold","text","style","getIsHorizontalLabelBold","transition","duration","cellItem","getItemHorizontalIndex","getItemVerticalIndex","getItemTooltip","$","tooltip","legendData","concat","quantiles","legendNew","valueIndex","each","valueItem","getLegendText","setupDrag","updateDrag","canUseDrag","dragHandler","dragEvent","dx","dy","dragBehavior","dragD3","on","call","CONTAINER_ID","UPDATE_BUTTON_ID","days","hours","Array","from","map","hourIndex","normalizedHour","fetchData","tsv","ROOT_PATH","weeklyTSVData","timeItem","arbitraryMetric","value","day","hour","toFixed","dayIndex","createChartConfig","main","heatmap","forEach","weeklyDataItem","random","pageContext","links","scripts","marginBottom","className","id","type","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined"],"sourceRoot":""}